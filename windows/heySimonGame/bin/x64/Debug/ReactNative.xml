<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReactNative</name>
    </assembly>
    <members>
        <member name="T:ReactNative.Bridge.DispatcherHelpers">
            <summary>
            A set of helpers for dispatcher access.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.DispatcherHelpers.AssertOnDispatcher">
            <summary>
            Asserts that the current thread has dispatcher access.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.DispatcherHelpers.IsOnDispatcher">
            <summary>
            Checks if the current thread has dispatcher access.
            </summary>
            <returns>
            <code>true</code> if the current thread has dispatcher access,
            otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:ReactNative.Bridge.DispatcherHelpers.RunOnDispatcher(Windows.UI.Core.DispatchedHandler)">
            <summary>
            Invokes an action on the dispatcher.
            </summary>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="M:ReactNative.Bridge.DispatcherHelpers.RunOnDispatcher(Windows.UI.Core.CoreDispatcherPriority,Windows.UI.Core.DispatchedHandler)">
            <summary>
            Invokes an action on the dispatcher.
            </summary>
            <param name="priority">The priority.</param>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="M:ReactNative.Bridge.DispatcherHelpers.CallOnDispatcher``1(System.Func{``0})">
            <summary>
            Invokes a function on the dispatcher and asynchronously returns the
            result.
            </summary>
            <typeparam name="T">Function return type.</typeparam>
            <param name="func">The function to invoke.</param>
            <returns>A task to await the result.</returns>
        </member>
        <member name="M:ReactNative.Bridge.DispatcherHelpers.Reset">
            <summary>
            Cleans up the dispatcher helpers.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.Queue.DispatcherActionQueue">
            <summary>
            Action queue that runs on a dispatcher thread.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.Queue.DispatcherActionQueue.#ctor(System.Action{System.Exception})">
            <summary>
            Instantiates the dispatcher action queue.
            </summary>
            <param name="onError">The exception handler.</param>
        </member>
        <member name="M:ReactNative.Bridge.Queue.DispatcherActionQueue.#ctor(System.Action{System.Exception},Windows.UI.Core.CoreDispatcher)">
            <summary>
            Instantiates the dispatcher action queue.
            </summary>
            <param name="onError">The exception handler.</param>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="T:ReactNative.Bridge.Queue.ActionQueue">
            <summary>
            A queue for executing actions in order.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.Queue.ActionQueue.#ctor(System.Action{System.Exception})">
            <summary>
            Creates an action queue.
            </summary>
            <param name="onError">The error handler.</param>
        </member>
        <member name="M:ReactNative.Bridge.Queue.ActionQueue.#ctor(System.Action{System.Exception},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Creates an action queue where the actions are performed on the
            given scheduler.
            </summary>
            <param name="onError">The error handler.</param>
            <param name="scheduler">The scheduler.</param>
        </member>
        <member name="M:ReactNative.Bridge.Queue.ActionQueue.Dispatch(System.Action)">
            <summary>
            Dispatch an action to the queue.
            </summary>
            <param name="action">The action.</param>
            <remarks>
            Returns immediately.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.Queue.ActionQueue.IsOnThread">
            <summary>
            Checks if the current thread is running in the context of this
            action queue.
            </summary>
            <returns>
            <code>true</code> if the current thread is running an action
            dispatched by this action queue, otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:ReactNative.Bridge.Queue.ActionQueue.Dispose">
            <summary>
            Disposes the action queue.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.Queue.ActionQueue.Dispose(System.Boolean)">
            <summary>
            Disposes the action queue.
            </summary>
            <param name="disposing">
            <code>true</code> if disposing directly, <code>false</code>
            if called by finalizer.
            </param>
        </member>
        <member name="T:ReactNative.Bridge.Queue.IActionQueue">
            <summary>
            A queue for executing actions in order.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.Queue.IActionQueue.Dispatch(System.Action)">
            <summary>
            Dispatch an action to the queue.
            </summary>
            <param name="action">The action.</param>
            <remarks>
            Returns immediately.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.Queue.IActionQueue.IsOnThread">
            <summary>
            Checks if the current thread is running in the context of this
            action queue.
            </summary>
            <returns>
            <code>true</code> if the current thread is running an action
            dispatched by this action queue, otherwise <code>false</code>.
            </returns>
        </member>
        <member name="T:ReactNative.Bridge.Queue.IReactQueueConfiguration">
            <summary>
            Specifies which <see cref="T:ReactNative.Bridge.Queue.IActionQueue"/>s must be used to run
            the various contexts of execution within React (dispatcher, native
            modules, and JS). Some of these queue *may* be the same but should be
            coded against as if they are different.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.IReactQueueConfiguration.DispatcherQueue">
            <summary>
            The main UI queue.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.IReactQueueConfiguration.NativeModulesQueue">
            <summary>
            The native modules queue.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.IReactQueueConfiguration.JavaScriptQueue">
            <summary>
            The JavaScript queue.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.Queue.ActionQueueExtensions">
            <summary>
            Extension methods for <see cref="T:ReactNative.Bridge.Queue.IActionQueue"/>s.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.Queue.ActionQueueExtensions.AssertOnThread(ReactNative.Bridge.Queue.IActionQueue)">
            <summary>
            Asserts <see cref="M:ReactNative.Bridge.Queue.IActionQueue.IsOnThread"/>, throwing if the <b>false</b>.
            </summary>
            <param name="actionQueue">The message queue thread.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the assertion fails.
            </exception>
        </member>
        <member name="M:ReactNative.Bridge.Queue.ActionQueueExtensions.RunAsync``1(ReactNative.Bridge.Queue.IActionQueue,System.Func{``0})">
            <summary>
            Calls a function on a message queue and returns a task to await the response.
            </summary>
            <typeparam name="T">Type of response.</typeparam>
            <param name="actionQueue">The message queue thread.</param>
            <param name="func">The function.</param>
            <returns>A task to await the result.</returns>
        </member>
        <member name="T:ReactNative.Bridge.Queue.ReactQueueConfiguration">
            <summary>
            Specifies which <see cref="T:ReactNative.Bridge.Queue.IActionQueue"/>s must be used to run
            the various contexts of execution within React (dispatcher, native
            modules, and JS). Some of these queue *may* be the same but should be
            coded against as if they are different.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.Queue.ReactQueueConfiguration.#ctor(ReactNative.Bridge.Queue.IActionQueue,ReactNative.Bridge.Queue.IActionQueue,ReactNative.Bridge.Queue.IActionQueue)">
            <summary>
            Instantiates the queue configuration.
            </summary>
            <param name="dispatcherQueue"></param>
            <param name="javaScriptQueue"></param>
            <param name="nativeModulesQueue"></param>
        </member>
        <member name="P:ReactNative.Bridge.Queue.ReactQueueConfiguration.DispatcherQueue">
            <summary>
            The main UI thread.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.ReactQueueConfiguration.JavaScriptQueue">
            <summary>
            The JavaScript thread.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.ReactQueueConfiguration.NativeModulesQueue">
            <summary>
            The native modules thread.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.Queue.ReactQueueConfiguration.Dispose">
            <summary>
            Disposes the queue configuration.
            </summary>
            <remarks>
            Should be called whenever the corresponding <see cref="T:ReactNative.Bridge.IReactInstance"/>
            is disposed.
            </remarks>
        </member>
        <member name="T:ReactNative.Bridge.CompiledReactDelegateFactory">
            <summary>
            A delegate factory that will compile a delegate to call the native method.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.CompiledReactDelegateFactory.Instance">
            <summary>
            The <see cref="T:ReactNative.Bridge.CompiledReactDelegateFactory"/> instance.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.CompiledReactDelegateFactory.Create(ReactNative.Bridge.INativeModule,System.Reflection.MethodInfo)">
            <summary>
            Create an invocation delegate from the given method.
            </summary>
            <param name="module">The native module instance.</param>
            <param name="method">The method.</param>
            <returns>The invocation delegate.</returns>
        </member>
        <member name="T:ReactNative.Bridge.IAsyncCancelable">
            <summary>
            Asynchronous disposable resource with disposal state tracking.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.IAsyncCancelable.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.IAsyncDisposable">
            <summary>
            A resource that can be disposed asynchronously.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IAsyncDisposable.DisposeAsync">
            <summary>
            Asynchronously disposes the instance.
            </summary>
            <returns>A task to await dispose operation.</returns>
        </member>
        <member name="T:ReactNative.Bridge.ICallback">
            <summary>
            Interface that represents a JavaScript callback function that can be
            passed to a native module as a method parameter.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ICallback.Invoke(System.Object[])">
            <summary>
            Invokes the callback.
            </summary>
            <param name="arguments">The callback arguments.</param>
        </member>
        <member name="T:ReactNative.Bridge.IInvocationHandler">
            <summary>
            An interface for invoking methods specified by name.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IInvocationHandler.Invoke(System.String,System.Object[])">
            <summary>
            Invoke the specified method.
            </summary>
            <param name="name">The name of the method.</param>
            <param name="args">The arguments for the method.</param>
        </member>
        <member name="T:ReactNative.Bridge.IJavaScriptExecutor">
            <summary>
            Interface for making JavaScript calls from native code.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IJavaScriptExecutor.CallFunctionReturnFlushedQueue(System.String,System.String,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Call the JavaScript method from the given module.
            </summary>
            <param name="moduleName">The module name.</param>
            <param name="methodName">The method name.</param>
            <param name="arguments">The arguments.</param>
            <returns>The flushed queue of native operations.</returns>
        </member>
        <member name="M:ReactNative.Bridge.IJavaScriptExecutor.InvokeCallbackAndReturnFlushedQueue(System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Invoke the JavaScript callback.
            </summary>
            <param name="callbackId">The callback identifier.</param>
            <param name="arguments">The arguments.</param>
            <returns>The flushed queue of native operations.</returns>
        </member>
        <member name="M:ReactNative.Bridge.IJavaScriptExecutor.FlushedQueue">
            <summary>
            Invoke the React 'flushedQueue' function.
            </summary>
            <returns>The flushed queue of native operations.</returns>
        </member>
        <member name="M:ReactNative.Bridge.IJavaScriptExecutor.SetGlobalVariable(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Sets a global variable in the JavaScript runtime.
            </summary>
            <param name="propertyName">The global variable name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ReactNative.Bridge.IJavaScriptExecutor.RunScript(System.String,System.String)">
            <summary>
            Runs the JavaScript at the given path.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="sourceUrl">The source URL.</param>
        </member>
        <member name="T:ReactNative.Bridge.IJavaScriptModule">
            <summary>
            An interface for JavaScript modules.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.IJavaScriptModule.InvocationHandler">
            <summary>
            The invocation handler.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.ILifecycleEventListener">
            <summary>
            Listener for application life cycle events.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ILifecycleEventListener.OnSuspend">
            <summary>
            Called when the host receives the suspend event.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ILifecycleEventListener.OnResume">
            <summary>
            Called when the host receives the resume event.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ILifecycleEventListener.OnDestroy">
            <summary>
            Called when the host is shutting down.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.INativeMethod">
            <summary>
            An interface representing native methods.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.INativeMethod.Type">
            <summary>
            The type of method.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.INativeMethod.Invoke(ReactNative.Bridge.IReactInstance,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Invoke the native method.
            </summary>
            <param name="reactInstance">The React instance.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="T:ReactNative.Bridge.INativeModule">
            <summary>
            A native module whose API can be provided to JavaScript React
            instances. 
            </summary>
            <remarks>
            <see cref="T:ReactNative.Bridge.INativeModule"/>s whose implementation is written in C#
            should extend <see cref="T:ReactNative.Bridge.NativeModuleBase"/> or
            <see cref="T:ReactNative.Bridge.ReactContextNativeModuleBase"/>.
            </remarks>
        </member>
        <member name="P:ReactNative.Bridge.INativeModule.ActionQueue">
            <summary>
            The action queue used by the native module.
            </summary>
            <remarks>
            Can be <code>null</code>, in which case, the call is evaluated
            inline on the native modules action queue.
            </remarks>
        </member>
        <member name="P:ReactNative.Bridge.INativeModule.CanOverrideExistingModule">
            <summary>
            Return true if you intend to override some other native module that
            was registered, e.g., as part of a different package (such as the
            core one). Trying to override without returning true from this 
            method is considered an error and will throw an exception during
            initialization. By default, all modules return false.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.INativeModule.Constants">
            <summary>
            The constants exported by this module.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.INativeModule.Methods">
            <summary>
            The methods callabke from JavaScript on this module.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.INativeModule.Name">
            <summary>
            The name of the module.
            </summary>
            <remarks>
            This will be the name used to <code>require()</code> this module
            from JavaScript.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.INativeModule.Initialize">
            <summary>
            Called after the creation of a <see cref="T:ReactNative.Bridge.IReactInstance"/>, in
            order to initialize native modules that require the React or
            JavaScript modules.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.INativeModule.OnReactInstanceDispose">
            <summary>
            Called before a <see cref="T:ReactNative.Bridge.IReactInstance"/> is disposed.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.IOnBatchCompleteListener">
            <summary>
            Interface that will be notified when a batch of JavaScript to native
            calls has finished.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IOnBatchCompleteListener.OnBatchComplete">
            <summary>
            Invoked when a batch of JavaScript to native calls has finished.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.IPromise">
            <summary>
            Interface that represents a JavaScript Promise which can be passed to 
            the native module as a method parameter.
            </summary>
            <remarks>
            Methods annotated with <see cref="T:ReactNative.Bridge.ReactMethodAttribute"/> that use 
            <see cref="T:ReactNative.Bridge.IPromise"/> as type of the last parameter will be marked as
            "remoteAsync" and will return a promise when invoked from JavaScript.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.IPromise.Resolve(System.Object)">
            <summary>
            Resolve the promise with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ReactNative.Bridge.IPromise.Reject(System.String,System.String)">
            <summary>
            Report an error which wasn't caused by an exception.
            </summary>
            <param name="code">The error code.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:ReactNative.Bridge.IPromise.Reject(System.String,System.Exception)">
            <summary>
            Report an exception.
            </summary>
            <param name="code">The error code.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ReactNative.Bridge.IPromise.Reject(System.String,System.String,System.Exception)">
            <summary>
            Report an exception with a custom error message.
            </summary>
            <param name="code">The error code.</param>
            <param name="message">The error message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ReactNative.Bridge.IPromise.Reject(System.String)">
            <summary>
            Report an error which wasn't caused by an exception.
            </summary>
            <param name="message">The error message.</param>
            <remarks>
            Using this method will pass the error code "EUNSPECIFIED".
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.IPromise.Reject(System.Exception)">
            <summary>
            Reject the promise with the given exception.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:ReactNative.Bridge.IReactBridge">
            <summary>
            Interface to the JavaScript execution environment and means of
            transport for messages between JavaScript and the native environment.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IReactBridge.CallFunction(System.String,System.String,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Calls a JavaScript function.
            </summary>
            <param name="moduleName">The module ID.</param>
            <param name="method">The method ID.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ReactNative.Bridge.IReactBridge.InvokeCallback(System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Invokes a JavaScript callback.
            </summary>
            <param name="callbackId">The callback identifier.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ReactNative.Bridge.IReactBridge.SetGlobalVariable(System.String,System.String)">
            <summary>
            Sets a global JavaScript variable.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="jsonEncodedArgument">The JSON-encoded value.</param>
        </member>
        <member name="M:ReactNative.Bridge.IReactBridge.RunScript(System.String,System.String)">
            <summary>
            Evaluates JavaScript.
            </summary>
            <param name="script">The script.</param>
            <param name="sourceUrl">The source URL.</param>
        </member>
        <member name="T:ReactNative.Bridge.IReactCallback">
            <summary>
            Interface that represents a native callback that can be invoked from
            JavaScript.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IReactCallback.Invoke(System.Int32,System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Invoke the native callback.
            </summary>
            <param name="moduleId">The module ID.</param>
            <param name="methodId">The method ID.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:ReactNative.Bridge.IReactCallback.OnBatchComplete">
            <summary>
            Signals that a batch of operations is complete.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.IReactDelegateFactory">
            <summary>
            Factory interface for manufacturing method invocation delegates.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IReactDelegateFactory.GetMethodType(System.Reflection.MethodInfo)">
            <summary>
            Extracts the native method type from the method.
            </summary>
            <param name="method">The method.</param>
            <returns>The native method type.</returns>
        </member>
        <member name="M:ReactNative.Bridge.IReactDelegateFactory.Create(ReactNative.Bridge.INativeModule,System.Reflection.MethodInfo)">
            <summary>
            Create an invocation delegate from the given method.
            </summary>
            <param name="nativeModule">The native module instance.</param>
            <param name="method">The method.</param>
            <returns>The invocation delegate.</returns>
        </member>
        <member name="M:ReactNative.Bridge.IReactDelegateFactory.Validate(System.Reflection.MethodInfo)">
            <summary>
            Check that the method is valid for <see cref="T:ReactNative.Bridge.ReactMethodAttribute"/>.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="T:ReactNative.Bridge.IReactInstance">
            <summary>
            An abstraction for the asynchronous JavaScript bridge. This provides an
            environment allowing the invocation of JavaScript methods and lets a
            set of native APIs be invokable from JavaScript as well.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.IReactInstance.NativeModules">
            <summary>
            Enumerates the available native modules.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.IReactInstance.QueueConfiguration">
            <summary>
            The React queue configuration.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IReactInstance.Initialize">
            <summary>
            Initializes the instance.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IReactInstance.InvokeFunction(System.String,System.String,Newtonsoft.Json.Linq.JArray,System.String)">
            <summary>
            Invokes a JavaScript function.
            </summary>
            <param name="moduleName">The module name.</param>
            <param name="method">The method ID.</param>
            <param name="arguments">The arguments.</param>
            <param name="tracingName">The tracing name.</param>
        </member>
        <member name="M:ReactNative.Bridge.IReactInstance.InvokeCallback(System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Invokes a JavaScript callback.
            </summary>
            <param name="callbackId">The callback ID.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ReactNative.Bridge.IReactInstance.GetJavaScriptModule``1">
            <summary>
            Gets a JavaScript module instance.
            </summary>
            <typeparam name="T">Type of JavaScript module.</typeparam>
            <returns>The JavaScript module instance.</returns>
        </member>
        <member name="M:ReactNative.Bridge.IReactInstance.GetNativeModule``1">
            <summary>
            Gets a native module instance.
            </summary>
            <typeparam name="T">Type of native module.</typeparam>
            <returns>The native module instance.</returns>
        </member>
        <member name="T:ReactNative.Bridge.JavaScriptBundleLoader">
            <summary>
            A class that stores JavaScript bundle information and allows the
            <see cref="T:ReactNative.Bridge.IReactInstance"/> to load a correct bundle through the
            <see cref="T:ReactNative.Bridge.IReactBridge"/>.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.JavaScriptBundleLoader.SourceUrl">
            <summary>
            The source URL of the bundle.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptBundleLoader.InitializeAsync">
            <summary>
            Initializes the JavaScript bundle loader, typically making an
            asynchronous call to cache the bundle in memory.
            </summary>
            <returns>A task to await initialization.</returns>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptBundleLoader.LoadScript(ReactNative.Bridge.IReactBridge)">
            <summary>
            Loads the bundle into a JavaScript executor.
            </summary>
            <param name="executor">The JavaScript executor.</param>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptBundleLoader.CreateFileLoader(System.String)">
            <summary>
            This loader will read the file from the project directory.
            </summary>
            <param name="fileName">The file name.</param>
            <returns>The JavaScript bundle loader.</returns>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptBundleLoader.CreateCachedBundleFromNetworkLoader(System.String,System.String)">
            <summary>
            This loader will use the cached bundle from the
            <see cref="T:ReactNative.DevSupport.IDevSupportManager"/>.
            </summary>
            <param name="sourceUrl">The source URL.</param>
            <param name="cachedFileLocation">The cached bundle.</param>
            <returns>The JavaScript bundle loader.</returns>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptBundleLoader.CreateRemoteDebuggerLoader(System.String,System.String)">
            <summary>
            This loader will trigger a remote debugger to load JavaScript from
            the given <paramref name="proxySourceUrl"/>.
            </summary>
            <param name="proxySourceUrl">
            The URL to load the JavaScript bundle from.
            </param>
            <param name="realSourceUrl">
            The URL to report as the source URL, e.g., for asset loading.
            </param>
            <returns>The JavaScript bundle loader.</returns>
        </member>
        <member name="T:ReactNative.Bridge.JavaScriptModuleBase">
            <summary>
            Base class for <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s.
            </summary>
            <summary>
            Base class for <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.JavaScriptModuleBase.InvocationHandler">
            <summary>
            The invocation handler.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleBase.Invoke(System.Object[],System.String)">
            <summary>
            Invoke a JavaScript method with the given arguments.
            </summary>
            <param name="args">The arguments.</param>
            <param name="caller">
            The name of the method. This parameter may be ignored if the name
            of the native method matches the name of the JavaScript method. The
            method name will be filled in automatically using the
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.
            </param>
            <remarks>
            The expectation is that <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s will use
            this method to notify the framework of a JavaScript call to be
            executed. This is to overcome the absense of a performant "proxy"
            implementation in the .NET framework.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleBase.Invoke(System.String)">
            <summary>
            Invoke a JavaScript method with the given arguments.
            </summary>
            <param name="caller">
            The name of the method. This parameter may be ignored if the name
            of the native method matches the name of the JavaScript method. The
            method name will be filled in automatically using the
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.
            </param>
            <remarks>
            The expectation is that <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s will use
            this method to notify the framework of a JavaScript call to be
            executed. This is to overcome the absense of a performant "proxy"
            implementation in the .NET framework.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleBase.Invoke(System.Object,System.String)">
            <summary>
            Invoke a JavaScript method with the given arguments.
            </summary>
            <param name="arg0">The first argument.</param>
            <param name="caller">
            The name of the method. This parameter may be ignored if the name
            of the native method matches the name of the JavaScript method. The
            method name will be filled in automatically using the
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.
            </param>
            <remarks>
            The expectation is that <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s will use
            this method to notify the framework of a JavaScript call to be
            executed. This is to overcome the absense of a performant "proxy"
            implementation in the .NET framework.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleBase.Invoke(System.Object,System.Object,System.String)">
            <summary>
            Invoke a JavaScript method with the given arguments.
            </summary>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
            <param name="caller">
            The name of the method. This parameter may be ignored if the name
            of the native method matches the name of the JavaScript method. The
            method name will be filled in automatically using the
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.
            </param>
            <remarks>
            The expectation is that <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s will use
            this method to notify the framework of a JavaScript call to be
            executed. This is to overcome the absense of a performant "proxy"
            implementation in the .NET framework.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleBase.Invoke(System.Object,System.Object,System.Object,System.String)">
            <summary>
            Invoke a JavaScript method with the given arguments.
            </summary>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
            <param name="arg2">The third argument.</param>
            <param name="caller">
            The name of the method. This parameter may be ignored if the name
            of the native method matches the name of the JavaScript method. The
            method name will be filled in automatically using the
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.
            </param>
            <remarks>
            The expectation is that <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s will use
            this method to notify the framework of a JavaScript call to be
            executed. This is to overcome the absense of a performant "proxy"
            implementation in the .NET framework.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleBase.Invoke(System.Object,System.Object,System.Object,System.Object,System.String)">
            <summary>
            Invoke a JavaScript method with the given arguments.
            </summary>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
            <param name="arg2">The third argument.</param>
            <param name="arg3">The fourth argument.</param>
            <param name="caller">
            The name of the method. This parameter may be ignored if the name
            of the native method matches the name of the JavaScript method. The
            method name will be filled in automatically using the
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.
            </param>
            <remarks>
            The expectation is that <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s will use
            this method to notify the framework of a JavaScript call to be
            executed. This is to overcome the absense of a performant "proxy"
            implementation in the .NET framework.
            </remarks>
        </member>
        <member name="T:ReactNative.Bridge.JavaScriptModuleRegistry">
            <summary>
            Class responsible for holding all <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s
            registered to a <see cref="T:ReactNative.Bridge.IReactInstance"/>. Requires that
            JavaScript modules use the <see cref="T:ReactNative.Bridge.JavaScriptModuleBase"/> base
            class, and implement each of it's methods to dispatch through the
            <see cref="M:ReactNative.Bridge.JavaScriptModuleBase.Invoke(System.Object[],System.String)"/> method.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleRegistry.#ctor">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.JavaScriptModuleRegistry"/>. 
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleRegistry.GetJavaScriptModule``1(ReactNative.Bridge.IReactInstance)">
            <summary>
            Gets an instance of a <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>.
            </summary>
            <typeparam name="T">Type of JavaScript module.</typeparam>
            <param name="instance">The React instance.</param>
            <returns>The JavaScript module instance.</returns>
        </member>
        <member name="T:ReactNative.Bridge.NativeArgumentsParseException">
            <summary>
            An exception thrown when converting between JavaScript and native arguments.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.NativeArgumentsParseException.#ctor">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.NativeArgumentsParseException"/>. 
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.NativeArgumentsParseException.#ctor(System.String)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.NativeArgumentsParseException"/>. 
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:ReactNative.Bridge.NativeArgumentsParseException.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.NativeArgumentsParseException"/>. 
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ReactNative.Bridge.NativeArgumentsParseException.#ctor(System.String,System.String)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.NativeArgumentsParseException"/>.
            </summary>
            <param name="message">The exception message.</param>
            <param name="parameterName">The parameter name.</param>
        </member>
        <member name="M:ReactNative.Bridge.NativeArgumentsParseException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.NativeArgumentsParseException"/>.
            </summary>
            <param name="message">The exception message.</param>
            <param name="parameterName">The parameter name.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:ReactNative.Bridge.NativeModuleBase">
            <summary>
            Base class for React Native modules. Implementations can be linked
            to lifecycle events, such as the creation and disposal of the
            <see cref="T:ReactNative.Bridge.IReactInstance"/> by overriding the appropriate methods.
            
            Native methods are exposed to JavaScript with the
            <see cref="T:ReactNative.Bridge.ReactMethodAttribute"/> annotation. These methods may only
            use arguments that can be parsed by <see cref="M:Newtonsoft.Json.Linq.JToken.ToObject``1"/> or
            <see cref="T:ReactNative.Bridge.ICallback"/>, which maps from a JavaScript function and can
            be used only as a last parameter, or in the case of success and error
            callback pairs, the last two arguments respectively.
            
            All methods annotated with <see cref="T:ReactNative.Bridge.ReactMethodAttribute"/> must
            return <see cref="T:System.Void"/>.
            
            Please note that it is not allowed to have multiple methods annotated
            with <see cref="T:ReactNative.Bridge.ReactMethodAttribute"/> that share the same name.
            </summary>
            <remarks>
            Default implementations of <see cref="M:ReactNative.Bridge.NativeModuleBase.Initialize"/> and 
            <see cref="M:ReactNative.Bridge.NativeModuleBase.OnReactInstanceDispose"/> are provided for convenience.
            Subclasses need not call these base methods should they choose to
            override them.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.NativeModuleBase.#ctor">
            <summary>
            Instantiates a <see cref="T:ReactNative.Bridge.NativeModuleBase"/>.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.NativeModuleBase.#ctor(ReactNative.Bridge.IReactDelegateFactory)">
            <summary>
            Instantiates a <see cref="T:ReactNative.Bridge.NativeModuleBase"/>.
            </summary>
            <param name="delegateFactory">
            Factory responsible for creating delegates for method invocations.
            </param>
        </member>
        <member name="M:ReactNative.Bridge.NativeModuleBase.#ctor(ReactNative.Bridge.Queue.IActionQueue)">
            <summary>
            Instantiates a <see cref="T:ReactNative.Bridge.NativeModuleBase"/>.
            </summary>
            <param name="actionQueue">
            The action queue that native modules should execute on.
            </param>
        </member>
        <member name="M:ReactNative.Bridge.NativeModuleBase.#ctor(ReactNative.Bridge.IReactDelegateFactory,ReactNative.Bridge.Queue.IActionQueue)">
            <summary>
            Instantiates a <see cref="T:ReactNative.Bridge.NativeModuleBase"/>.
            </summary>
            <param name="delegateFactory">
            Factory responsible for creating delegates for method invocations.
            </param>
            <param name="actionQueue">
            The action queue that native modules should execute on.
            </param>
        </member>
        <member name="P:ReactNative.Bridge.NativeModuleBase.CanOverrideExistingModule">
            <summary>
            Return true if you intend to override some other native module that
            was registered, e.g., as part of a different package (such as the
            core one). Trying to override without returning true from this 
            method is considered an error and will throw an exception during
            initialization. By default, all modules return false.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.NativeModuleBase.ActionQueue">
            <summary>
            The action queue used by the native module.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.NativeModuleBase.Constants">
            <summary>
            The constants exported by this module.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.NativeModuleBase.Methods">
            <summary>
            The methods callabke from JavaScript on this module.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.NativeModuleBase.Name">
            <summary>
            The name of the module.
            </summary>
            <remarks>
            This will be the name used to <code>require()</code> this module
            from JavaScript.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.NativeModuleBase.Initialize">
            <summary>
            Called after the creation of a <see cref="T:ReactNative.Bridge.IReactInstance"/>, in
            order to initialize native modules that require the React or
            JavaScript modules.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.NativeModuleBase.OnReactInstanceDispose">
            <summary>
            Called before a <see cref="T:ReactNative.Bridge.IReactInstance"/> is disposed.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.NativeModuleRegistry">
            <summary>
            A set of native APIs exposed to a particular JavaScript instance.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.NativeModuleRegistry.Modules">
            <summary>
            The set of native modules exposed.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.NativeModuleRegistry.GetModule``1">
            <summary>
            Gets a module instance of a specific type.
            </summary>
            <typeparam name="T">Type of module instance.</typeparam>
            <returns>The module instance.</returns>
        </member>
        <member name="M:ReactNative.Bridge.NativeModuleRegistry.OnBatchComplete">
            <summary>
            Triggers the batch completion event for all modules.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.NativeModuleRegistry.WriteModuleDescriptions(Newtonsoft.Json.JsonWriter)">
            <summary>
            Write the module descriptions to the given <see cref="T:Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">The JSON writer.</param>
        </member>
        <member name="M:ReactNative.Bridge.NativeModuleRegistry.Invoke(ReactNative.Bridge.IReactInstance,System.Int32,System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Invoke a method on a native module.
            </summary>
            <param name="reactInstance">The React instance.</param>
            <param name="moduleId">The module ID.</param>
            <param name="methodId">The method ID.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:ReactNative.Bridge.NativeModuleRegistry.NotifyReactInstanceInitialize">
            <summary>
            Hook to notify modules that the <see cref="T:ReactNative.Bridge.IReactInstance"/> has
            been initialized.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.NativeModuleRegistry.NotifyReactInstanceDispose">
            <summary>
            Hook to notify modules that the <see cref="T:ReactNative.Bridge.IReactInstance"/> has
            been disposed.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.NativeModuleRegistry.Builder">
            <summary>
            Builder for <see cref="T:ReactNative.Bridge.NativeModuleRegistry"/>.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.NativeModuleRegistry.Builder.Add(ReactNative.Bridge.INativeModule)">
            <summary>
            Add a native module to the builder.
            </summary>
            <param name="module">The native module.</param>
            <returns>The builder instance.</returns>
        </member>
        <member name="M:ReactNative.Bridge.NativeModuleRegistry.Builder.Build">
            <summary>
            Build a <see cref="T:ReactNative.Bridge.NativeModuleRegistry"/> instance.
            </summary>
            <returns>The instance.</returns>
        </member>
        <member name="T:ReactNative.Bridge.ReactBridge">
            <summary>
            Class to the JavaScript execution environment and means of transport
            for messages between JavaScript and the native environment.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ReactBridge.#ctor(ReactNative.Bridge.IJavaScriptExecutor,ReactNative.Bridge.IReactCallback,ReactNative.Bridge.Queue.IActionQueue)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.IReactBridge"/>.
            </summary>
            <param name="executor">The JavaScript executor.</param>
            <param name="reactCallback">The native callback handler.</param>
            <param name="nativeModulesQueueThread">
            The native modules queue thread.
            </param>
        </member>
        <member name="M:ReactNative.Bridge.ReactBridge.CallFunction(System.String,System.String,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Calls a JavaScript function.
            </summary>
            <param name="moduleName">The module ID.</param>
            <param name="method">The method ID.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ReactNative.Bridge.ReactBridge.InvokeCallback(System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Invokes a JavaScript callback.
            </summary>
            <param name="callbackId">The callback ID.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ReactNative.Bridge.ReactBridge.SetGlobalVariable(System.String,System.String)">
            <summary>
            Sets a global JavaScript variable.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="jsonEncodedArgument">The JSON-encoded value.</param>
        </member>
        <member name="M:ReactNative.Bridge.ReactBridge.RunScript(System.String,System.String)">
            <summary>
            Evaluates JavaScript.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="sourceUrl">The source URL.</param>
        </member>
        <member name="M:ReactNative.Bridge.ReactBridge.Dispose">
            <summary>
            Disposes the bridge.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.ReactContext">
            <summary>
            Abstract context wrapper for the React instance to manage
            lifecycle events.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.ReactContext.ReactInstance">
            <summary>
            The React instance associated with the context.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.ReactContext.HasActiveReactInstance">
            <summary>
            Checks if the context has an active <see cref="T:ReactNative.Bridge.IReactInstance"/>.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.ReactContext.NativeModuleCallExceptionHandler">
            <summary>
            The exception handler for native module calls.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.GetJavaScriptModule``1">
            <summary>
            Gets the instance of the <see cref="T:ReactNative.Bridge.IJavaScriptModule"/> associated
            with the <see cref="T:ReactNative.Bridge.IReactInstance"/>.
            </summary>
            <typeparam name="T">Type of JavaScript module.</typeparam>
            <returns>The JavaScript module instance.</returns>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.GetNativeModule``1">
            <summary>
            Gets the instance of the <see cref="T:ReactNative.Bridge.INativeModule"/> associated
            with the <see cref="T:ReactNative.Bridge.IReactInstance"/>.
            </summary>
            <typeparam name="T">Type of native module.</typeparam>
            <returns>The native module instance.</returns>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.AddLifecycleEventListener(ReactNative.Bridge.ILifecycleEventListener)">
            <summary>
            Adds a lifecycle event listener to the context.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.RemoveLifecycleEventListener(ReactNative.Bridge.ILifecycleEventListener)">
            <summary>
            Removes a lifecycle event listener from the context.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.OnSuspend">
            <summary>
            Called by the host when the application suspends.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.OnResume">
            <summary>
            Called by the host when the application resumes.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.OnDestroy">
            <summary>
            Called by the host when the application is destroyed.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.DisposeAsync">
            <summary>
            Called by the host when the application shuts down.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.IsOnDispatcherQueueThread">
            <summary>
            Checks if the current thread is on the React instance dispatcher
            queue thread.
            </summary>
            <returns>
            <b>true</b> if the call is from the dispatcher queue thread,
             <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.AssertOnDispatcherQueueThread">
            <summary>
            Asserts that the current thread is on the React instance dispatcher
            queue thread.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.RunOnDispatcherQueueThread(System.Action)">
            <summary>
            Enqueues an action on the dispatcher queue thread.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.IsOnJavaScriptQueueThread">
            <summary>
            Checks if the current thread is on the React instance
            JavaScript queue thread.
            </summary>
            <returns>
            <b>true</b> if the call is from the JavaScript queue thread,
            <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.AssertOnJavaScriptQueueThread">
            <summary>
            Asserts that the current thread is on the React instance
            JavaScript queue thread.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.RunOnJavaScriptQueueThread(System.Action)">
            <summary>
            Enqueues an action on the JavaScript queue thread.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.IsOnNativeModulesQueueThread">
            <summary>
            Checks if the current thread is on the React instance native 
            modules queue thread.
            </summary>
            <returns>
            <b>true</b> if the call is from the native modules queue thread,
            <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.AssertOnNativeModulesQueueThread">
            <summary>
            Asserts that the current thread is on the React instance native
            modules queue thread.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.RunOnNativeModulesQueueThread(System.Action)">
            <summary>
            Enqueues an action on the native modules queue thread.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.HandleException(System.Exception)">
            <summary>
            Passes the exception to the current 
            <see cref="P:ReactNative.Bridge.ReactContext.NativeModuleCallExceptionHandler"/>, if set, otherwise
            rethrows.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.InitializeWithInstance(ReactNative.Bridge.IReactInstance)">
            <summary>
            Set and initialize the <see cref="T:ReactNative.Bridge.IReactInstance"/> instance
            for this context.
            </summary>
            <param name="instance">The React instance.</param>
            <remarks>
            This method should be called exactly once.
            </remarks>
        </member>
        <member name="T:ReactNative.Bridge.ReactContextNativeModuleBase">
            <summary>
            Base class for React Native modules that require access to the 
            <see cref="T:ReactNative.Bridge.ReactContext"/>.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ReactContextNativeModuleBase.#ctor(ReactNative.Bridge.ReactContext)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.ReactContextNativeModuleBase"/>.
            </summary>
            <param name="reactContext">The React context.</param>
        </member>
        <member name="M:ReactNative.Bridge.ReactContextNativeModuleBase.#ctor(ReactNative.Bridge.ReactContext,ReactNative.Bridge.Queue.IActionQueue)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.ReactContextNativeModuleBase"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="actionQueue">The action queue.</param>
        </member>
        <member name="M:ReactNative.Bridge.ReactContextNativeModuleBase.#ctor(ReactNative.Bridge.ReactContext,ReactNative.Bridge.IReactDelegateFactory)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.ReactContextNativeModuleBase"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="delegateFactory">The React method delegate factory.</param>
        </member>
        <member name="M:ReactNative.Bridge.ReactContextNativeModuleBase.#ctor(ReactNative.Bridge.ReactContext,ReactNative.Bridge.IReactDelegateFactory,ReactNative.Bridge.Queue.IActionQueue)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.ReactContextNativeModuleBase"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="delegateFactory">The React method delegate factory.</param>
            <param name="actionQueue">The action queue.</param>
        </member>
        <member name="P:ReactNative.Bridge.ReactContextNativeModuleBase.Context">
            <summary>
            The React context.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.ReactInstance">
            <summary>
            A higher level API on top of the <see cref="T:ReactNative.Bridge.IJavaScriptExecutor" /> and module registries. This provides an
            environment allowing the invocation of JavaScript methods.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.ReactMethodAttribute">
            <summary>
            An attribute for annotating methods in an
            <see cref="T:ReactNative.Bridge.INativeModule"/>.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.ReflectionReactDelegateFactory">
            <summary>
            A delegate factory that uses reflection to create the native method.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.ReflectionReactDelegateFactory.Instance">
            <summary>
            The <see cref="T:ReactNative.Bridge.ReflectionReactDelegateFactory"/> instance.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ReflectionReactDelegateFactory.Create(ReactNative.Bridge.INativeModule,System.Reflection.MethodInfo)">
            <summary>
            Create an invocation delegate from the given method.
            </summary>
            <param name="module">The native module instance.</param>
            <param name="method">The method.</param>
            <returns>The invocation delegate.</returns>
        </member>
        <member name="T:ReactNative.Chakra.Executor.NativeJavaScriptExecutor">
            <summary>
            Uses the native C++ interface to the JSRT for Chakra.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.Executor.NativeJavaScriptExecutor.#ctor">
            <summary>
            Instantiates the <see cref="T:ReactNative.Chakra.Executor.NativeJavaScriptExecutor"/>.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.Executor.NativeJavaScriptExecutor.#ctor(System.Boolean)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Chakra.Executor.NativeJavaScriptExecutor"/>.
            </summary>
            <param name="useSerialization">true to use serialization, else false.</param>
        </member>
        <member name="M:ReactNative.Chakra.Executor.NativeJavaScriptExecutor.CallFunctionReturnFlushedQueue(System.String,System.String,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Call the JavaScript method from the given module.
            </summary>
            <param name="moduleName">The module name.</param>
            <param name="methodName">The method name.</param>
            <param name="arguments">The arguments.</param>
            <returns>The flushed queue of native operations.</returns>
        </member>
        <member name="M:ReactNative.Chakra.Executor.NativeJavaScriptExecutor.Dispose">
            <summary>
            Disposes the <see cref="T:ReactNative.Chakra.Executor.NativeJavaScriptExecutor"/> instance.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.Executor.NativeJavaScriptExecutor.FlushedQueue">
            <summary>
            Flush the queue.
            </summary>
            <returns>The flushed queue of native operations.</returns>
        </member>
        <member name="M:ReactNative.Chakra.Executor.NativeJavaScriptExecutor.InvokeCallbackAndReturnFlushedQueue(System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Invoke the JavaScript callback.
            </summary>
            <param name="callbackId">The callback identifier.</param>
            <param name="arguments">The arguments.</param>
            <returns>The flushed queue of native operations.</returns>
        </member>
        <member name="M:ReactNative.Chakra.Executor.NativeJavaScriptExecutor.RunScript(System.String,System.String)">
            <summary>
            Runs the JavaScript at the given path.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="sourceUrl">The source URL.</param>
        </member>
        <member name="M:ReactNative.Chakra.Executor.NativeJavaScriptExecutor.SetGlobalVariable(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Sets a global variable in the JavaScript runtime.
            </summary>
            <param name="propertyName">The global variable name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ReactNative.Chakra.Executor.ChakraJavaScriptExecutor">
            <summary>
            JavaScript runtime wrapper.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.Executor.ChakraJavaScriptExecutor.#ctor">
            <summary>
            Instantiates the <see cref="T:ReactNative.Chakra.Executor.ChakraJavaScriptExecutor"/>.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.Executor.ChakraJavaScriptExecutor.CallFunctionReturnFlushedQueue(System.String,System.String,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Call the JavaScript method from the given module.
            </summary>
            <param name="moduleName">The module name.</param>
            <param name="methodName">The method name.</param>
            <param name="arguments">The arguments.</param>
            <returns>The flushed queue of native operations.</returns>
        </member>
        <member name="M:ReactNative.Chakra.Executor.ChakraJavaScriptExecutor.FlushedQueue">
            <summary>
            Flush the queue.
            </summary>
            <returns>The flushed queue of native operations.</returns>
        </member>
        <member name="M:ReactNative.Chakra.Executor.ChakraJavaScriptExecutor.InvokeCallbackAndReturnFlushedQueue(System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Invoke the JavaScript callback.
            </summary>
            <param name="callbackId">The callback identifier.</param>
            <param name="arguments">The arguments.</param>
            <returns>The flushed queue of native operations.</returns>
        </member>
        <member name="M:ReactNative.Chakra.Executor.ChakraJavaScriptExecutor.RunScript(System.String,System.String)">
            <summary>
            Runs the script at the given path.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="sourceUrl">The source URL.</param>
        </member>
        <member name="M:ReactNative.Chakra.Executor.ChakraJavaScriptExecutor.SetGlobalVariable(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Sets a global variable in the JavaScript runtime.
            </summary>
            <param name="propertyName">The global variable name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ReactNative.Chakra.Executor.ChakraJavaScriptExecutor.GetGlobalVariable(System.String)">
            <summary>
            Gets a global variable from the JavaScript runtime.
            </summary>
            <param name="propertyName">The global variable name.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.Executor.ChakraJavaScriptExecutor.Dispose">
            <summary>
            Disposes the <see cref="T:ReactNative.Chakra.Executor.ChakraJavaScriptExecutor"/> instance.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptBackgroundWorkItemCallback">
            <summary>
                A background work item callback.
            </summary>
            <remarks>
                This is passed to the host's thread service (if provided) to allow the host to 
                invoke the work item callback on the background thread of its choice.
            </remarks>
            <param name="callbackData">Data argument passed to the thread service.</param>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptBeforeCollectCallback">
            <summary>
                A callback called before collection.
            </summary>
            <param name="callbackState">The state passed to SetBeforeCollectCallback.</param>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptContext">
            <summary>
                A script context.
            </summary>
            <remarks>
                <para>
                Each script context contains its own global object, distinct from the global object in 
                other script contexts.
                </para>
                <para>
                Many Chakra hosting APIs require an "active" script context, which can be set using 
                Current. Chakra hosting APIs that require a current context to be set will note 
                that explicitly in their documentation.
                </para>
            </remarks>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptContext.reference">
            <summary>
                The reference.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.#ctor(System.IntPtr)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptContext"/> struct. 
            </summary>
            <param name="reference">The reference.</param>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptContext.Invalid">
            <summary>
                Gets an invalid context.
            </summary>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptContext.Current">
            <summary>
                Gets or sets the current script context on the thread.
            </summary>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptContext.HasException">
            <summary>
                Gets a value indicating whether the runtime of the current context is in an exception state.
            </summary>
            <remarks>
                <para>
                If a call into the runtime results in an exception (either as the result of running a 
                script or due to something like a conversion failure), the runtime is placed into an 
                "exception state." All calls into any context created by the runtime (except for the 
                exception APIs) will fail with <c>InExceptionState</c> until the exception is 
                cleared.
                </para>
                <para>
                If the runtime of the current context is in the exception state when a callback returns 
                into the engine, the engine will automatically rethrow the exception.
                </para>
                <para>
                Requires an active script context.
                </para>
            </remarks>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptContext.Runtime">
            <summary>
                Gets the runtime that the context belongs to.
            </summary>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptContext.IsValid">
            <summary>
                Gets a value indicating whether the context is a valid context or not.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.Idle">
            <summary>
                Tells the runtime to do any idle processing it need to do.
            </summary>
            <remarks>
                <para>
                If idle processing has been enabled for the current runtime, calling <c>Idle</c> will 
                inform the current runtime that the host is idle and that the runtime can perform 
                memory cleanup tasks.
                </para>
                <para>
                <c>Idle</c> will also return the number of system ticks until there will be more idle work
                for the runtime to do. Calling <c>Idle</c> before this number of ticks has passed will do
                no work.
                </para>
                <para>
                Requires an active script context.
                </para>
            </remarks>
            <returns>
                The next system tick when there will be more idle work to do. Returns the 
                maximum number of ticks if there no upcoming idle work to do.
            </returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.ParseScript(System.String,ReactNative.Chakra.JavaScriptSourceContext,System.String)">
            <summary>
                Parses a script and returns a <c>Function</c> representing the script.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="script">The script to parse.</param>
            <param name="sourceContext">
                A cookie identifying the script that can be used by script contexts that have debugging enabled.
            </param>
            <param name="sourceName">The location the script came from.</param>
            <returns>A <c>Function</c> representing the script code.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.ParseScript(System.String,System.Byte[],ReactNative.Chakra.JavaScriptSourceContext,System.String)">
            <summary>
                Parses a serialized script and returns a <c>Function</c> representing the script.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="script">The script to parse.</param>
            <param name="buffer">The serialized script.</param>
            <param name="sourceContext">
                A cookie identifying the script that can be used by script contexts that have debugging enabled.
            </param>
            <param name="sourceName">The location the script came from.</param>
            <returns>A <c>Function</c> representing the script code.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.ParseScript(System.String)">
            <summary>
                Parses a script and returns a <c>Function</c> representing the script.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="script">The script to parse.</param>
            <returns>A <c>Function</c> representing the script code.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.ParseScript(System.String,System.Byte[])">
            <summary>
                Parses a serialized script and returns a <c>Function</c> representing the script.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="script">The script to parse.</param>
            <param name="buffer">The serialized script.</param>
            <returns>A <c>Function</c> representing the script code.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.RunScript(System.String,ReactNative.Chakra.JavaScriptSourceContext,System.String)">
            <summary>
                Executes a script.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="script">The script to run.</param>
            <param name="sourceContext">
                A cookie identifying the script that can be used by script contexts that have debugging enabled.
            </param>
            <param name="sourceName">The location the script came from.</param>
            <returns>The result of the script, if any.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.RunScript(System.String,System.Byte[],ReactNative.Chakra.JavaScriptSourceContext,System.String)">
            <summary>
                Runs a serialized script.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="script">The source code of the serialized script.</param>
            <param name="buffer">The serialized script.</param>
            <param name="sourceContext">
                A cookie identifying the script that can be used by script contexts that have debugging enabled.
            </param>
            <param name="sourceName">The location the script came from.</param>
            <returns>The result of the script, if any.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.RunScript(System.String)">
            <summary>
                Executes a script.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="script">The script to run.</param>
            <returns>The result of the script, if any.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.RunScript(System.String,System.Byte[])">
            <summary>
                Runs a serialized script.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="script">The source code of the serialized script.</param>
            <param name="buffer">The serialized script.</param>
            <returns>The result of the script, if any.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.SerializeScript(System.String,System.Byte[])">
            <summary>
                Serializes a parsed script to a buffer than can be reused.
            </summary>
            <remarks>
                <para>
                SerializeScript parses a script and then stores the parsed form of the script in a 
                runtime-independent format. The serialized script then can be deserialized in any
                runtime without requiring the script to be re-parsed.
                </para>
                <para>
                Requires an active script context.
                </para>
            </remarks>
            <param name="script">The script to serialize.</param>
            <param name="buffer">The buffer to put the serialized script into. Can be null.</param>
            <returns>
                The size of the buffer, in bytes, required to hold the serialized script.
            </returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.GetAndClearException">
            <summary>
                Returns the exception that caused the runtime of the current context to be in the 
                exception state and resets the exception state for that runtime.
            </summary>
            <remarks>
                <para>
                If the runtime of the current context is not in an exception state, this API will throw
                <c>JsErrorInvalidArgument</c>. If the runtime is disabled, this will return an exception
                indicating that the script was terminated, but it will not clear the exception (the 
                exception will be cleared if the runtime is re-enabled using 
                <c>EnableRuntimeExecution</c>).
                </para>
                <para>
                Requires an active script context.
                </para>
            </remarks>
            <returns>The exception for the runtime of the current context.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.SetException(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Sets the runtime of the current context to an exception state.
            </summary>
            <remarks>
                <para>
                If the runtime of the current context is already in an exception state, this API will 
                throw <c>JsErrorInExceptionState</c>.
                </para>
                <para>
                Requires an active script context.
                </para>
            </remarks>
            <param name="exception">
                The JavaScript exception to set for the runtime of the current context.
            </param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.StartDebugging">
            <summary>
                Starts debugging in the context.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.AddRef">
            <summary>
                Adds a reference to a script context.
            </summary>
            <remarks>
                Calling AddRef ensures that the context will not be freed until Release is called.
            </remarks>
            <returns>The object's new reference count.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.Release">
            <summary>
                Releases a reference to a script context.
            </summary>
            <remarks>
                Removes a reference to a context that was created by AddRef.
            </remarks>
            <returns>The object's new reference count.</returns>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptContext.Scope">
            <summary>
                A scope automatically sets a context to current and resets the original context
                when disposed.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptContext.Scope.previousContext">
            <summary>
                The previous context.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptContext.Scope.disposed">
            <summary>
                Whether the structure has been disposed.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.Scope.#ctor(ReactNative.Chakra.JavaScriptContext)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptContext.Scope"/> struct. 
            </summary>
            <param name="context">The context to create the scope for.</param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.Scope.Dispose">
            <summary>
                Disposes the scope and sets the previous context to current.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptEngineException">
            <summary>
                An exception that occurred in the workings of the JavaScript engine itself.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptEngineException.#ctor(ReactNative.Chakra.JavaScriptErrorCode)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptEngineException"/> class. 
            </summary>
            <param name="code">The error code returned.</param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptEngineException.#ctor(ReactNative.Chakra.JavaScriptErrorCode,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptEngineException"/> class. 
            </summary>
            <param name="code">The error code returned.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptErrorCode">
            <summary>
                An error code returned from a Chakra hosting API.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.NoError">
            <summary>
                Success error code.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.CategoryUsage">
            <summary>
                Category of errors that relates to incorrect usage of the API itself.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.InvalidArgument">
            <summary>
                An argument to a hosting API was invalid.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.NullArgument">
            <summary>
                An argument to a hosting API was null in a context where null is not allowed.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.NoCurrentContext">
            <summary>
                The hosting API requires that a context be current, but there is no current context.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.InExceptionState">
            <summary>
                The engine is in an exception state and no APIs can be called until the exception is 
                cleared.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.NotImplemented">
            <summary>
                A hosting API is not yet implemented.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.WrongThread">
            <summary>
                A hosting API was called on the wrong thread.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.RuntimeInUse">
            <summary>
                A runtime that is still in use cannot be disposed.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.BadSerializedScript">
            <summary>
                A bad serialized script was used, or the serialized script was serialized by a 
                different version of the Chakra engine.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.InDisabledState">
            <summary>
                The runtime is in a disabled state.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.CannotDisableExecution">
            <summary>
                Runtime does not support reliable script interruption.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.HeapEnumInProgress">
            <summary>
                A heap enumeration is currently underway in the script context.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.ArgumentNotObject">
            <summary>
                A hosting API that operates on Object values was called with a non-Object value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.InProfileCallback">
            <summary>
                A script context is in the middle of a profile callback.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.InThreadServiceCallback">
            <summary>
                A thread service callback is currently underway.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.CannotSerializeDebugScript">
            <summary>
                Scripts cannot be serialized in debug contexts.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.AlreadyDebuggingContext">
            <summary>
                The context cannot be put into a debug state because it is already in a debug state.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.AlreadyProfilingContext">
            <summary>
                The context cannot start profiling because it is already profiling.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.IdleNotEnabled">
            <summary>
                Idle notification given when the host did not enable idle processing.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.CategoryEngine">
            <summary>
                Category of errors that relates to errors occurring within the engine itself.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.OutOfMemory">
            <summary>
                The Chakra engine has run out of memory.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.CategoryScript">
            <summary>
                Category of errors that relates to errors in a script.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.ScriptException">
            <summary>
                A JavaScript exception occurred while running a script.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.ScriptCompile">
            <summary>
                JavaScript failed to compile.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.ScriptTerminated">
            <summary>
                A script was terminated due to a request to suspend a runtime.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.ScriptEvalDisabled">
            <summary>
                A script was terminated because it tried to use "eval" or "function" and eval was disabled.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.CategoryFatal">
            <summary>
                Category of errors that are fatal and signify failure of the engine.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.Fatal">
            <summary>
                A fatal error in the engine has occurred.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptException">
            <summary>
                An exception returned from the Chakra engine.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptException.code">
            <summary>
            The error code.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptException.#ctor(ReactNative.Chakra.JavaScriptErrorCode)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptException"/> class. 
            </summary>
            <param name="code">The error code returned.</param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptException.#ctor(ReactNative.Chakra.JavaScriptErrorCode,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptException"/> class. 
            </summary>
            <param name="code">The error code returned.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptException.ErrorCode">
            <summary>
                Gets the error code.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptFatalException">
            <summary>
                A fatal exception occurred.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptFatalException.#ctor(ReactNative.Chakra.JavaScriptErrorCode)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptFatalException"/> class. 
            </summary>
            <param name="code">The error code returned.</param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptFatalException.#ctor(ReactNative.Chakra.JavaScriptErrorCode,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptFatalException"/> class. 
            </summary>
            <param name="code">The error code returned.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptMemoryAllocationCallback">
            <summary>
                User implemented callback routine for memory allocation events
            </summary>
            <param name="callbackState">The state passed to SetRuntimeMemoryAllocationCallback.</param>
            <param name="allocationEvent">The type of type allocation event.</param>
            <param name="allocationSize">The size of the allocation.</param>
            <returns>
                For the Allocate event, returning true allows the runtime to continue with 
                allocation. Returning false indicates the allocation request is rejected. The return value
                is ignored for other allocation events.
            </returns>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptMemoryEventType">
            <summary>
                Allocation callback event type.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptMemoryEventType.Allocate">
            <summary>
                Indicates a request for memory allocation.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptMemoryEventType.Free">
            <summary>
                Indicates a memory freeing event.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptMemoryEventType.Failure">
            <summary>
                Indicates a failed allocation event.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptNativeFunction">
            <summary>
                A function callback.
            </summary>
            <param name="callee">
                A <c>Function</c> object that represents the function being invoked.
            </param>
            <param name="isConstructCall">Indicates whether this is a regular call or a 'new' call.</param>
            <param name="arguments">The arguments to the call.</param>
            <param name="argumentCount">The number of arguments.</param>
            <param name="callbackData">Callback data, if any.</param>
            <returns>The result of the call, if any.</returns>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptObjectFinalizeCallback">
            <summary>
                A finalization callback.
            </summary>
            <param name="data">
                The external data that was passed in when creating the object being finalized.
            </param>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptPropertyId">
            <summary>
                A property identifier.
            </summary>
            <remarks>
                Property identifiers are used to refer to properties of JavaScript objects instead of using
                strings.
            </remarks>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptPropertyId.id">
            <summary>
            The id.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptPropertyId.#ctor(System.IntPtr)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptPropertyId"/> struct. 
            </summary>
            <param name="id">The ID.</param>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptPropertyId.Invalid">
            <summary>
                Gets an invalid ID.
            </summary>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptPropertyId.Name">
            <summary>
                Gets the name associated with the property ID.
            </summary>
            <remarks>
                <para>
                Requires an active script context.
                </para>
            </remarks>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptPropertyId.FromString(System.String)">
            <summary>
                Gets the property ID associated with the name. 
            </summary>
            <remarks>
                <para>
                Property IDs are specific to a context and cannot be used across contexts.
                </para>
                <para>
                Requires an active script context.
                </para>
            </remarks>
            <param name="name">
                The name of the property ID to get or create. The name may consist of only digits.
            </param>
            <returns>The property ID in this runtime for the given name.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptPropertyId.op_Equality(ReactNative.Chakra.JavaScriptPropertyId,ReactNative.Chakra.JavaScriptPropertyId)">
            <summary>
                The equality operator for property IDs.
            </summary>
            <param name="left">The first property ID to compare.</param>
            <param name="right">The second property ID to compare.</param>
            <returns>Whether the two property IDs are the same.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptPropertyId.op_Inequality(ReactNative.Chakra.JavaScriptPropertyId,ReactNative.Chakra.JavaScriptPropertyId)">
            <summary>
                The inequality operator for property IDs.
            </summary>
            <param name="left">The first property ID to compare.</param>
            <param name="right">The second property ID to compare.</param>
            <returns>Whether the two property IDs are not the same.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptPropertyId.Equals(ReactNative.Chakra.JavaScriptPropertyId)">
            <summary>
                Checks for equality between property IDs.
            </summary>
            <param name="other">The other property ID to compare.</param>
            <returns>Whether the two property IDs are the same.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptPropertyId.Equals(System.Object)">
            <summary>
                Checks for equality between property IDs.
            </summary>
            <param name="obj">The other property ID to compare.</param>
            <returns>Whether the two property IDs are the same.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptPropertyId.GetHashCode">
            <summary>
                The hash code.
            </summary>
            <returns>The hash code of the property ID.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptPropertyId.ToString">
            <summary>
                Converts the property ID to a string.
            </summary>
            <returns>The name of the property ID.</returns>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptRuntime">
            <summary>
                A Chakra runtime.
            </summary>
            <remarks>
                <para>
                Each Chakra runtime has its own independent execution engine, JIT compiler, and garbage 
                collected heap. As such, each runtime is completely isolated from other runtimes.
                </para>
                <para>
                Runtimes can be used on any thread, but only one thread can call into a runtime at any 
                time.
                </para>
                <para>
                NOTE: A JavaScriptRuntime, unlike other objects in the Chakra hosting API, is not 
                garbage collected since it contains the garbage collected heap itself. A runtime will 
                continue to exist until Dispose is called.
                </para>
            </remarks>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptRuntime.handle">
            <summary>
            The handle.
            </summary>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptRuntime.IsValid">
            <summary>
                Gets a value indicating whether the runtime is valid.
            </summary>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptRuntime.MemoryUsage">
            <summary>
                Gets the current memory usage for a runtime.
            </summary>
            <remarks>
                Memory usage can be always be retrieved, regardless of whether or not the runtime is active
                on another thread.
            </remarks>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptRuntime.MemoryLimit">
            <summary>
                Gets or sets the current memory limit for a runtime.
            </summary>
            <remarks>
                The memory limit of a runtime can be always be retrieved, regardless of whether or not the 
                runtime is active on another thread.
            </remarks>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptRuntime.Disabled">
            <summary>
                Gets or sets a value indicating whether script execution is disabled in the runtime.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptRuntime.Create(ReactNative.Chakra.JavaScriptRuntimeAttributes,ReactNative.Chakra.JavaScriptThreadServiceCallback)">
            <summary>
                Creates a new runtime.
            </summary>
            <param name="attributes">The attributes of the runtime to be created.</param>
            <param name="threadServiceCallback">The thread service for the runtime. Can be null.</param>
            <returns>The runtime created.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptRuntime.Create(ReactNative.Chakra.JavaScriptRuntimeAttributes)">
            <summary>
                Creates a new runtime.
            </summary>
            <param name="attributes">The attributes of the runtime to be created.</param>
            <returns>The runtime created.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptRuntime.Create">
            <summary>
                Creates a new runtime.
            </summary>
            <returns>The runtime created.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptRuntime.Dispose">
            <summary>
                Disposes a runtime.
            </summary>
            <remarks>
                Once a runtime has been disposed, all resources owned by it are invalid and cannot be used.
                If the runtime is active (i.e. it is set to be current on a particular thread), it cannot 
                be disposed.
            </remarks>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptRuntime.CollectGarbage">
            <summary>
                Performs a full garbage collection.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptRuntime.SetMemoryAllocationCallback(System.IntPtr,ReactNative.Chakra.JavaScriptMemoryAllocationCallback)">
            <summary>
                Sets a memory allocation callback for specified runtime
            </summary>
            <remarks>
                <para>
                Registering a memory allocation callback will cause the runtime to call back to the host 
                whenever it acquires memory from, or releases memory to, the OS. The callback routine is
                called before the runtime memory manager allocates a block of memory. The allocation will
                be rejected if the callback returns false. The runtime memory manager will also invoke the
                callback routine after freeing a block of memory, as well as after allocation failures. 
                </para>
                <para>
                The callback is invoked on the current runtime execution thread, therefore execution is 
                blocked until the callback completes.
                </para>
                <para>
                The return value of the callback is not stored; previously rejected allocations will not
                prevent the runtime from invoking the callback again later for new memory allocations.
                </para>
            </remarks>
            <param name="callbackState">
                User provided state that will be passed back to the callback.
            </param>
            <param name="allocationCallback">
                Memory allocation callback to be called for memory allocation events.
            </param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptRuntime.SetBeforeCollectCallback(System.IntPtr,ReactNative.Chakra.JavaScriptBeforeCollectCallback)">
            <summary>
                Sets a callback function that is called by the runtime before garbage collection.
            </summary>
            <remarks>
                <para>
                The callback is invoked on the current runtime execution thread, therefore execution is 
                blocked until the callback completes.
                </para>
                <para>
                The callback can be used by hosts to prepare for garbage collection. For example, by 
                releasing unnecessary references on Chakra objects.
                </para>
            </remarks>
            <param name="callbackState">
                User provided state that will be passed back to the callback.
            </param>
            <param name="beforeCollectCallback">The callback function being set.</param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptRuntime.CreateContext">
            <summary>
                Creates a debug script context for running scripts.
            </summary>
            <remarks>
                Each script context has its own global object that is isolated from all other script 
                contexts.
            </remarks>
            <returns>The created script context.</returns>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptRuntimeAttributes">
            <summary>
                Attributes of a runtime.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptRuntimeAttributes.None">
            <summary>
                No special attributes.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptRuntimeAttributes.DisableBackgroundWork">
            <summary>
                The runtime will not do any work (such as garbage collection) on background threads.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptRuntimeAttributes.AllowScriptInterrupt">
            <summary>
                The runtime should support reliable script interruption. This increases the number of
                places where the runtime will check for a script interrupt request at the cost of a
                small amount of runtime performance.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptRuntimeAttributes.EnableIdleProcessing">
            <summary>
                Host will call Idle, so enable idle processing. Otherwise, the runtime will manage
                memory slightly more aggressively.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptRuntimeAttributes.DisableNativeCodeGeneration">
            <summary>
                Runtime will not generate native code.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptRuntimeAttributes.DisableEval">
            <summary>
                Using Eval or Function constructor will throw an exception.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptRuntimeVersion">
            <summary>
                Version of the runtime.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptRuntimeVersion.Version10">
            <summary>
                Create runtime with IE10 version.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptRuntimeVersion.Version11">
            <summary>
                Create runtime with IE11 version.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptRuntimeVersion.VersionEdge">
            <summary>
                Create runtime with highest version present on the machine at runtime.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptScriptException">
            <summary>
                A script exception.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptScriptException.error">
            <summary>
            The error.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptScriptException.#ctor(ReactNative.Chakra.JavaScriptErrorCode,ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptScriptException"/> class. 
            </summary>
            <param name="code">The error code returned.</param>
            <param name="error">The JavaScript error object.</param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptScriptException.#ctor(ReactNative.Chakra.JavaScriptErrorCode,ReactNative.Chakra.JavaScriptValue,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptScriptException"/> class. 
            </summary>
            <param name="code">The error code returned.</param>
            <param name="error">The JavaScript error object.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptScriptException.Error">
            <summary>
                Gets a JavaScript object representing the script error.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptSourceContext">
            <summary>
                A cookie that identifies a script for debugging purposes.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptSourceContext.context">
            <summary>
            The context.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.#ctor(System.IntPtr)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptSourceContext"/> struct.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptSourceContext.None">
            <summary>
                Gets an empty source context.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.op_Equality(ReactNative.Chakra.JavaScriptSourceContext,ReactNative.Chakra.JavaScriptSourceContext)">
            <summary>
                The equality operator for source contexts.
            </summary>
            <param name="left">The first source context to compare.</param>
            <param name="right">The second source context to compare.</param>
            <returns>Whether the two source contexts are the same.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.op_Inequality(ReactNative.Chakra.JavaScriptSourceContext,ReactNative.Chakra.JavaScriptSourceContext)">
            <summary>
                The inequality operator for source contexts.
            </summary>
            <param name="left">The first source context to compare.</param>
            <param name="right">The second source context to compare.</param>
            <returns>Whether the two source contexts are not the same.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.op_Subtraction(ReactNative.Chakra.JavaScriptSourceContext,System.Int32)">
            <summary>
                Subtracts an offset from the value of the source context.
            </summary>
            <param name="context">The source context to subtract the offset from.</param>
            <param name="offset">The offset to subtract.</param>
            <returns>A new source context that reflects the subtraction of the offset from the context.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.Subtract(ReactNative.Chakra.JavaScriptSourceContext,System.Int32)">
            <summary>
                Subtracts an offset from the value of the source context.
            </summary>
            <param name="left">The source context to subtract the offset from.</param>
            <param name="right">The offset to subtract.</param>
            <returns>A new source context that reflects the subtraction of the offset from the context.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.op_Decrement(ReactNative.Chakra.JavaScriptSourceContext)">
            <summary>
                Decrements the value of the source context.
            </summary>
            <param name="context">The source context to decrement.</param>
            <returns>A new source context that reflects the decrementing of the context.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.Decrement(ReactNative.Chakra.JavaScriptSourceContext)">
            <summary>
                Decrements the value of the source context.
            </summary>
            <param name="left">The source context to decrement.</param>
            <returns>A new source context that reflects the decrementing of the context.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.op_Addition(ReactNative.Chakra.JavaScriptSourceContext,System.Int32)">
            <summary>
                Adds an offset from the value of the source context.
            </summary>
            <param name="context">The source context to add the offset to.</param>
            <param name="offset">The offset to add.</param>
            <returns>A new source context that reflects the addition of the offset to the context.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.Add(ReactNative.Chakra.JavaScriptSourceContext,System.Int32)">
            <summary>
                Adds an offset from the value of the source context.
            </summary>
            <param name="left">The source context to add the offset to.</param>
            <param name="right">The offset to add.</param>
            <returns>A new source context that reflects the addition of the offset to the context.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.op_Increment(ReactNative.Chakra.JavaScriptSourceContext)">
            <summary>
                Increments the value of the source context.
            </summary>
            <param name="context">The source context to increment.</param>
            <returns>A new source context that reflects the incrementing of the context.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.Increment(ReactNative.Chakra.JavaScriptSourceContext)">
            <summary>
                Increments the value of the source context.
            </summary>
            <param name="left">The source context to increment.</param>
            <returns>A new source context that reflects the incrementing of the context.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.FromIntPtr(System.IntPtr)">
            <summary>
                Creates a new source context. 
            </summary>
            <param name="cookie">
                The cookie for the source context.
            </param>
            <returns>The new source context.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.Equals(ReactNative.Chakra.JavaScriptSourceContext)">
            <summary>
                Checks for equality between source contexts.
            </summary>
            <param name="other">The other source context to compare.</param>
            <returns>Whether the two source contexts are the same.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.Equals(System.Object)">
            <summary>
                Checks for equality between source contexts.
            </summary>
            <param name="obj">The other source context to compare.</param>
            <returns>Whether the two source contexts are the same.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.GetHashCode">
            <summary>
                The hash code.
            </summary>
            <returns>The hash code of the source context.</returns>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptThreadServiceCallback">
            <summary>
                A thread service callback.
            </summary>
            <remarks>
                The host can specify a background thread service when creating a runtime. If 
                specified, then background work items will be passed to the host using this callback. The
                host is expected to either begin executing the background work item immediately and return
                true or return false and the runtime will handle the work item in-thread.
            </remarks>
            <param name="callbackFunction">The callback for the background work item.</param>
            <param name="callbackData">The data argument to be passed to the callback.</param>
            <returns>Whether the thread service will execute the callback.</returns>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptUsageException">
            <summary>
                An API usage exception occurred.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptUsageException.#ctor(ReactNative.Chakra.JavaScriptErrorCode)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptUsageException"/> class. 
            </summary>
            <param name="code">The error code returned.</param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptUsageException.#ctor(ReactNative.Chakra.JavaScriptErrorCode,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptUsageException"/> class. 
            </summary>
            <param name="code">The error code returned.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptValue">
            <summary>
                A JavaScript value.
            </summary>
            <remarks>
                A JavaScript value is one of the following types of values: Undefined, Null, Boolean, 
                String, Number, or Object.
            </remarks>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValue.reference">
            <summary>
            The reference.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.#ctor(System.IntPtr)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptValue"/> struct.
            </summary>
            <param name="reference">The reference.</param>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.Invalid">
            <summary>
                Gets an invalid value.
            </summary>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.Undefined">
            <summary>
                Gets the value of <c>undefined</c> in the current script context.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.Null">
            <summary>
                Gets the value of <c>null</c> in the current script context.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.True">
            <summary>
                Gets the value of <c>true</c> in the current script context.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.False">
            <summary>
                Gets the value of <c>false</c> in the current script context.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.GlobalObject">
            <summary>
                Gets the global object in the current script context.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.IsValid">
            <summary>
                Gets a value indicating whether the value is valid.
            </summary>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.ValueType">
            <summary>
                Gets the JavaScript type of the value.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <returns>The type of the value.</returns>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.StringLength">
            <summary>
                Gets the length of a <c>String</c> value.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <returns>The length of the string.</returns>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.Prototype">
            <summary>
                Gets or sets the prototype of an object.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.IsExtensionAllowed">
            <summary>
                Gets a value indicating whether an object is extensible or not.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.HasExternalData">
            <summary>
                Gets a value indicating whether an object is an external object.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.ExternalData">
            <summary>
                Gets or sets the data in an external object.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.FromBoolean(System.Boolean)">
            <summary>
                Creates a <c>Boolean</c> value from a <c>bool</c> value.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.FromDouble(System.Double)">
            <summary>
                Creates a <c>Number</c> value from a <c>double</c> value.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="value">The value to be converted.</param>
            <returns>The new <c>Number</c> value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.FromInt32(System.Int32)">
            <summary>
                Creates a <c>Number</c> value from a <c>int</c> value.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="value">The value to be converted.</param>
            <returns>The new <c>Number</c> value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.FromString(System.String)">
            <summary>
                Creates a <c>String</c> value from a string pointer.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="value">The string  to convert to a <c>String</c> value.</param>
            <returns>The new <c>String</c> value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.FromObject(System.Object)">
            <summary>
                Creates a JavaScript value that is a projection of the passed in object.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="value">An object to be projected.</param>
            <returns>A JavaScript value that is a projection of the object.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CreateObject">
            <summary>
                Creates a new <c>Object</c>.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <returns>The new <c>Object</c>.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CreateExternalObject(System.IntPtr,ReactNative.Chakra.JavaScriptObjectFinalizeCallback)">
            <summary>
                Creates a new <c>Object</c> that stores some external data.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="data">External data that the object will represent. May be null.</param>
            <param name="finalizer">
                A callback for when the object is finalized. May be null.
            </param>
            <returns>The new <c>Object</c>.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CreateFunction(ReactNative.Chakra.JavaScriptNativeFunction)">
            <summary>
                Creates a new JavaScript function.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="function">The method to call when the function is invoked.</param>
            <returns>The new function object.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CreateFunction(ReactNative.Chakra.JavaScriptNativeFunction,System.IntPtr)">
            <summary>
                Creates a new JavaScript function.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="function">The method to call when the function is invoked.</param>
            <param name="callbackData">Data to be provided to all function callbacks.</param>
            <returns>The new function object.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CreateArray(System.UInt32)">
            <summary>
                Creates a JavaScript array object.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="length">The initial length of the array.</param>
            <returns>The new array object.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CreateError(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Creates a new JavaScript error object
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="message">Message for the error object.</param>
            <returns>The new error object.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CreateRangeError(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Creates a new JavaScript RangeError error object
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="message">Message for the error object.</param>
            <returns>The new error object.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CreateReferenceError(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Creates a new JavaScript ReferenceError error object
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="message">Message for the error object.</param>
            <returns>The new error object.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CreateSyntaxError(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Creates a new JavaScript SyntaxError error object
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="message">Message for the error object.</param>
            <returns>The new error object.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CreateTypeError(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Creates a new JavaScript TypeError error object
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="message">Message for the error object.</param>
            <returns>The new error object.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CreateUriError(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Creates a new JavaScript URIError error object
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="message">Message for the error object.</param>
            <returns>The new error object.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.AddRef">
            <summary>
                Adds a reference to the object.
            </summary>
            <remarks>
                This only needs to be called on objects that are not going to be stored somewhere on 
                the stack. Calling AddRef ensures that the JavaScript object the value refers to will not be freed 
                until Release is called
            </remarks>
            <returns>The object's new reference count.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.Release">
            <summary>
                Releases a reference to the object.
            </summary>
            <remarks>
                Removes a reference that was created by AddRef.
            </remarks>
            <returns>The object's new reference count.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.ToBoolean">
            <summary>
                Retrieves the <c>bool</c> value of a <c>Boolean</c> value.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <returns>The converted value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.ToDouble">
            <summary>
                Retrieves the <c>double</c> value of a <c>Number</c> value.
            </summary>
            <remarks>
                <para>
                This function retrieves the value of a Number value. It will fail with 
                <c>InvalidArgument</c> if the type of the value is not <c>Number</c>.
                </para>
                <para>
                Requires an active script context.
                </para>
            </remarks>
            <returns>The <c>double</c> value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.ToString">
            <summary>
                Retrieves the string pointer of a <c>String</c> value.
            </summary>
            <remarks>
                <para>
                This function retrieves the string pointer of a <c>String</c> value. It will fail with 
                <c>InvalidArgument</c> if the type of the value is not <c>String</c>.
                </para>
                <para>
                Requires an active script context.
                </para>
            </remarks>
            <returns>The string.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.ToObject">
            <summary>
                Retrieves the object representation of an <c>Object</c> value.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <returns>The object representation of the value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.ConvertToBoolean">
            <summary>
                Converts the value to <c>Boolean</c> using regular JavaScript semantics.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <returns>The converted value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.ConvertToNumber">
            <summary>
                Converts the value to <c>Number</c> using regular JavaScript semantics.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <returns>The converted value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.ConvertToString">
            <summary>
                Converts the value to <c>String</c> using regular JavaScript semantics.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <returns>The converted value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.ConvertToObject">
            <summary>
                Converts the value to <c>Object</c> using regular JavaScript semantics.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <returns>The converted value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.PreventExtension">
            <summary>
                Sets an object to not be extensible.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.GetOwnPropertyDescriptor(ReactNative.Chakra.JavaScriptPropertyId)">
            <summary>
                Gets a property descriptor for an object's own property.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="propertyId">The ID of the property.</param>
            <returns>The property descriptor.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.GetOwnPropertyNames">
            <summary>
                Gets the list of all properties on the object.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <returns>An array of property names.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.HasProperty(ReactNative.Chakra.JavaScriptPropertyId)">
            <summary>
                Determines whether an object has a property.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="propertyId">The ID of the property.</param>
            <returns>Whether the object (or a prototype) has the property.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.GetProperty(ReactNative.Chakra.JavaScriptPropertyId)">
            <summary>
                Gets an object's property.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="id">The ID of the property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.SetProperty(ReactNative.Chakra.JavaScriptPropertyId,ReactNative.Chakra.JavaScriptValue,System.Boolean)">
            <summary>
                Sets an object's property.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="id">The ID of the property.</param>
            <param name="value">The new value of the property.</param>
            <param name="useStrictRules">The property set should follow strict mode rules.</param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.DeleteProperty(ReactNative.Chakra.JavaScriptPropertyId,System.Boolean)">
            <summary>
                Deletes an object's property.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="propertyId">The ID of the property.</param>
            <param name="useStrictRules">The property set should follow strict mode rules.</param>
            <returns>Whether the property was deleted.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.DefineProperty(ReactNative.Chakra.JavaScriptPropertyId,ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Defines a new object's own property from a property descriptor.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="propertyId">The ID of the property.</param>
            <param name="propertyDescriptor">The property descriptor.</param>
            <returns>Whether the property was defined.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.HasIndexedProperty(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Test if an object has a value at the specified index.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="index">The index to test.</param>
            <returns>Whether the object has an value at the specified index.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.GetIndexedProperty(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Retrieve the value at the specified index of an object.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="index">The index to retrieve.</param>
            <returns>The retrieved value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.SetIndexedProperty(ReactNative.Chakra.JavaScriptValue,ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Set the value at the specified index of an object.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="index">The index to set.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.DeleteIndexedProperty(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Delete the value at the specified index of an object.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="index">The index to delete.</param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.Equals(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Compare two JavaScript values for equality.
            </summary>
            <remarks>
                <para>
                This function is equivalent to the "==" operator in JavaScript.
                </para>
                <para>
                Requires an active script context.
                </para>
            </remarks>
            <param name="other">The object to compare.</param>
            <returns>Whether the values are equal.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.StrictEquals(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Compare two JavaScript values for strict equality.
            </summary>
            <remarks>
                <para>
                This function is equivalent to the "===" operator in JavaScript.
                </para>
                <para>
                Requires an active script context.
                </para>
            </remarks>
            <param name="other">The object to compare.</param>
            <returns>Whether the values are strictly equal.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CallFunction(ReactNative.Chakra.JavaScriptValue[])">
            <summary>
                Invokes a function.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="arguments">The arguments to the call.</param>
            <returns>The <c>Value</c> returned from the function invocation, if any.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.ConstructObject(ReactNative.Chakra.JavaScriptValue[])">
            <summary>
                Invokes a function as a constructor.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="arguments">The arguments to the call.</param>
            <returns>The <c>Value</c> returned from the function invocation.</returns>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptValueType">
            <summary>
                The JavaScript type of a JavaScriptValue.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.Undefined">
            <summary>
                The value is the <c>undefined</c> value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.Null">
            <summary>
                The value is the <c>null</c> value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.Number">
            <summary>
                The value is a JavaScript number value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.String">
            <summary>
                The value is a JavaScript string value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.Boolean">
            <summary>
                The value is a JavaScript Boolean value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.Object">
            <summary>
                The value is a JavaScript object value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.Function">
            <summary>
                The value is a JavaScript function object value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.Error">
            <summary>
                The value is a JavaScript error object value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.Array">
            <summary>
                The value is a JavaScript array object value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.Symbol">
            <summary>
                The value is a JavaScript symbol value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.ArrayBuffer">
            <summary>
                The value is a JavaScript ArrayBuffer object value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.TypedArray">
            <summary>
                The value is a JavaScript typed array object value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.DataView">
            <summary>
                The value is a JavaScript DataView object value.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.Native">
            <summary>
                Native interfaces.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.Native.ProfilerEventMask">
            <summary>
                Event mask for profiling.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.Native.ProfilerEventMask.TraceScriptFunctionCall">
            <summary>
                Trace calls to script functions.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.Native.ProfilerEventMask.TraceNativeFunctionCall">
            <summary>
                Trace calls to built-in functions.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.Native.ProfilerEventMask.TraceDomFunctionCall">
            <summary>
                Trace calls to DOM methods.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.Native.ProfilerEventMask.TraceAll">
            <summary>
                Trace all calls except DOM methods.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.Native.ProfilerEventMask.TraceAllWithDom">
            <summary>
                Trace all calls.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.Native.ProfilerScriptType">
            <summary>
                Profiled script type.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.Native.ProfilerScriptType.User">
            <summary>
                A user script.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.Native.ProfilerScriptType.Dynamic">
            <summary>
                A dynamic script.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.Native.ProfilerScriptType.Native">
            <summary>
                A native script.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.Native.ProfilerScriptType.Dom">
            <summary>
                A DOM-related script.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.Native.IProcessDebugManager32">
            <summary>
                IProcessDebugManager32 COM interface.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.Native.IProcessDebugManager32.CreateApplication(ReactNative.Chakra.Native.IDebugApplication32@)">
            <summary>
                Creates a new debug application.
            </summary>
            <param name="debugApplication">The new debug application.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IProcessDebugManager32.GetDefaultApplication(ReactNative.Chakra.Native.IDebugApplication32@)">
            <summary>
                Gets the default debug application.
            </summary>
            <param name="debugApplication">The default debug application.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IProcessDebugManager32.AddApplication(ReactNative.Chakra.Native.IDebugApplication32,System.UInt32@)">
            <summary>
                Adds a new debug application.
            </summary>
            <param name="debugApplication">The new debug application.</param>
            <param name="cookie">An engine-defined cookie.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IProcessDebugManager32.RemoveApplication(System.UInt32)">
            <summary>
                Removes a debug application.
            </summary>
            <param name="cookie">The cookie of the debug application to remove.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IProcessDebugManager32.CreateDebugDocumentHelper(System.Object,ReactNative.Chakra.Native.IDebugDocumentHelper32@)">
            <summary>
                Creates a debug document helper.
            </summary>
            <param name="outerUnknown">The outer unknown.</param>
            <param name="helper">The new debug document helper.</param>
        </member>
        <member name="T:ReactNative.Chakra.Native.IProcessDebugManager64">
            <summary>
                IProcessDebugManager64 COM interface.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.Native.IProcessDebugManager64.CreateApplication(ReactNative.Chakra.Native.IDebugApplication64@)">
            <summary>
                Creates a new debug application.
            </summary>
            <param name="debugApplication">The new debug application.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IProcessDebugManager64.GetDefaultApplication(ReactNative.Chakra.Native.IDebugApplication64@)">
            <summary>
                Gets the default debug application.
            </summary>
            <param name="debugApplication">The default debug application.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IProcessDebugManager64.AddApplication(ReactNative.Chakra.Native.IDebugApplication64,System.UInt32@)">
            <summary>
                Adds a new debug application.
            </summary>
            <param name="debugApplication">The new debug application.</param>
            <param name="cookie">An engine-defined cookie.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IProcessDebugManager64.RemoveApplication(System.UInt32)">
            <summary>
                Removes a debug application.
            </summary>
            <param name="cookie">The cookie of the debug application to remove.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IProcessDebugManager64.CreateDebugDocumentHelper(System.Object,ReactNative.Chakra.Native.IDebugDocumentHelper64@)">
            <summary>
                Creates a debug document helper.
            </summary>
            <param name="outerUnknown">The outer unknown.</param>
            <param name="helper">The new debug document helper.</param>
        </member>
        <member name="T:ReactNative.Chakra.Native.IDebugApplication32">
            <summary>
                IDebugApplication32 COM interface.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.Native.IDebugApplication64">
            <summary>
                IDebugApplication64 COM interface.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.Native.IDebugDocumentHelper32">
            <summary>
                IDebugDocumentHelper32 COM interface.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.Native.IDebugDocumentHelper64">
            <summary>
                IDebugDocumentHelper64 COM interface.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.Native.IActiveScriptProfilerCallback">
            <summary>
                IActiveScriptProfilerCallback COM interface.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.Native.IActiveScriptProfilerCallback.Initialize(System.UInt32)">
            <summary>
                Called when the profile is started.
            </summary>
            <param name="context">The context provided when profiling was started.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IActiveScriptProfilerCallback.Shutdown(System.UInt32)">
            <summary>
                Called when profiling is stopped.
            </summary>
            <param name="reason">The reason code provided when profiling was stopped.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IActiveScriptProfilerCallback.ScriptCompiled(System.Int32,ReactNative.Chakra.Native.ProfilerScriptType,System.IntPtr)">
            <summary>
                Called when a script is compiled.
            </summary>
            <param name="scriptId">The ID of the script.</param>
            <param name="type">The type of the script.</param>
            <param name="debugDocumentContext">The debug document context, if any.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IActiveScriptProfilerCallback.FunctionCompiled(System.Int32,System.Int32,System.String,System.String,System.IntPtr)">
            <summary>
                Called when a function is compiled.
            </summary>
            <param name="functionId">The ID of the function.</param>
            <param name="scriptId">The ID of the script.</param>
            <param name="functionName">The name of the function.</param>
            <param name="functionNameHint">The function name hint.</param>
            <param name="debugDocumentContext">The debug document context, if any.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IActiveScriptProfilerCallback.OnFunctionEnter(System.Int32,System.Int32)">
            <summary>
                Called when a function is entered.
            </summary>
            <param name="scriptId">The ID of the script.</param>
            <param name="functionId">The ID of the function.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IActiveScriptProfilerCallback.OnFunctionExit(System.Int32,System.Int32)">
            <summary>
                Called when a function is exited.
            </summary>
            <param name="scriptId">The ID of the script.</param>
            <param name="functionId">The ID of the function.</param>
        </member>
        <member name="T:ReactNative.Chakra.Native.IActiveScriptProfilerCallback2">
            <summary>
                IActiveScriptProfilerCallback2 COM interface.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.Native.IActiveScriptProfilerCallback2.OnFunctionEnterByName(System.String,ReactNative.Chakra.Native.ProfilerScriptType)">
            <summary>
                Called when a function is entered by name.
            </summary>
            <param name="functionName">The name of the function.</param>
            <param name="type">The type of the function.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IActiveScriptProfilerCallback2.OnFunctionExitByName(System.String,ReactNative.Chakra.Native.ProfilerScriptType)">
            <summary>
                Called when a function is exited by name.
            </summary>
            <param name="functionName">The name of the function.</param>
            <param name="type">The type of the function.</param>
        </member>
        <member name="T:ReactNative.Chakra.Native.IActiveScriptProfilerHeapEnum">
            <summary>
                IActiveScriptProfilerHeapEnum COM interface.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.Native.ThrowIfError(ReactNative.Chakra.JavaScriptErrorCode)">
            <summary>
            Throws if a native method returns an error code.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="T:ReactNative.Chakra.Native.ProcessDebugManager">
            <summary>
                ProcessDebugManager COM interface.
            </summary>
        </member>
        <member name="M:ReactNative.DevSupport.DevOptionDialog.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:ReactNative.DevSupport.DevOptionDialog.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="T:ReactNative.DevSupport.ProgressDialog">
            <summary>
            Content dialog for when the app is waiting.
            </summary>
            <remarks>
            This is used when awaiting the regeneration of the JavaScript bundle.
            </remarks>
        </member>
        <member name="M:ReactNative.DevSupport.ProgressDialog.#ctor(System.String,System.String)">
            <summary>
            Instantiates the <see cref="T:ReactNative.DevSupport.ProgressDialog"/>.
            </summary>
            <param name="title">The title.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:ReactNative.DevSupport.ProgressDialog.Heading">
            <summary>
            The title of the dialog.
            </summary>
        </member>
        <member name="P:ReactNative.DevSupport.ProgressDialog.Message">
            <summary>
            The message displayed in the dialog.
            </summary>
        </member>
        <member name="P:ReactNative.DevSupport.ProgressDialog.Token">
            <summary>
            The cancellation token cancelled upon dialog dismissal.
            </summary>
        </member>
        <member name="M:ReactNative.DevSupport.ProgressDialog.Dispose">
            <summary>
            Disposes the <see cref="T:ReactNative.DevSupport.ProgressDialog"/>. 
            </summary>
        </member>
        <member name="M:ReactNative.DevSupport.ProgressDialog.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:ReactNative.DevSupport.ProgressDialog.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="T:ReactNative.DevSupport.RedBoxDialog">
            <summary>
            The content dialog for red box exception display.
            </summary>
        </member>
        <member name="M:ReactNative.DevSupport.RedBoxDialog.#ctor(System.Action)">
            <summary>
            Instantiates the <see cref="T:ReactNative.DevSupport.RedBoxDialog"/>.
            </summary>
            <param name="onClick">
            Action to take when primary button is clicked.
            </param>
        </member>
        <member name="E:ReactNative.DevSupport.RedBoxDialog.PropertyChanged">
            <summary>
            Notifies the event subscriber when properties change.
            </summary>
        </member>
        <member name="P:ReactNative.DevSupport.RedBoxDialog.ErrorCookie">
            <summary>
            The error cookie.
            </summary>
        </member>
        <member name="P:ReactNative.DevSupport.RedBoxDialog.Message">
            <summary>
            The exception message.
            </summary>
        </member>
        <member name="P:ReactNative.DevSupport.RedBoxDialog.StackTrace">
            <summary>
            The stack trace.
            </summary>
        </member>
        <member name="M:ReactNative.DevSupport.RedBoxDialog.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:ReactNative.DevSupport.RedBoxDialog.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="T:ReactNative.DevSupport.ShakeAccelerometer">
            <summary>
            A static class that manages the Shaken event for the Accelerometer.
            </summary>
        </member>
        <member name="E:ReactNative.DevSupport.ShakeAccelerometer.Shaken">
            <summary>
            Raised whenever the Accelerometer detects a shaking gesture.
            </summary>
        </member>
        <member name="P:ReactNative.DevSupport.ShakeAccelerometer.Instance">
            <summary>
            Get the default shake accelerometer.
            </summary>
            <returns>The default shake accelerometer.</returns>
        </member>
        <member name="T:ReactNative.DevSupport.DebugServerException">
            <summary>
            Tracks errors connecting to or received from the debug server. The
            debug server returns errors as JSON objects. This exeception represents
            that error.
            </summary>
        </member>
        <member name="M:ReactNative.DevSupport.DebugServerException.#ctor">
            <summary>
            Instantiates the <see cref="T:ReactNative.DevSupport.DebugServerException"/>. 
            </summary>
        </member>
        <member name="M:ReactNative.DevSupport.DebugServerException.#ctor(System.String)">
            <summary>
            Instantiates the <see cref="T:ReactNative.DevSupport.DebugServerException"/>.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:ReactNative.DevSupport.DebugServerException.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates the <see cref="T:ReactNative.DevSupport.DebugServerException"/>. 
            </summary>
            <param name="message">The exception message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:ReactNative.DevSupport.DebugServerException.Parse(System.String)">
            <summary>
            Parse a <see cref="T:ReactNative.DevSupport.DebugServerException"/> from the server response.
            </summary>
            <param name="content">
            JSON response returned by the debug server.
            </param>
            <returns>The exception instance.</returns>
        </member>
        <member name="T:ReactNative.DevSupport.DevServerHelper">
            <summary>
            Helper class for debug server running in the host machine.
            </summary> 
        </member>
        <member name="M:ReactNative.DevSupport.DevServerHelper.#ctor(ReactNative.DevSupport.DevInternalSettings)">
            <summary>
            Instantiates the <see cref="T:ReactNative.DevSupport.DevServerHelper"/>.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:ReactNative.DevSupport.DevServerHelper.WebSocketProxyUrl">
            <summary>
            The JavaScript debugging proxy URL.
            </summary>
        </member>
        <member name="P:ReactNative.DevSupport.DevServerHelper.DebugServerHost">
            <summary>
            The host to use when connecting to the bundle server.
            </summary>
        </member>
        <member name="P:ReactNative.DevSupport.DevServerHelper.IsJavaScriptDevModeEnabled">
            <summary>
            Signals whether to enable dev mode when requesting JavaScript bundles.
            </summary>
        </member>
        <member name="P:ReactNative.DevSupport.DevServerHelper.IsHotModuleReplacementEnabled">
            <summary>
            Signals whether hot module replacement is enabled.
            </summary>
        </member>
        <member name="P:ReactNative.DevSupport.DevServerHelper.WebsocketProxyUrl">
            <summary>
            The Websocket proxy URL.
            </summary>
        </member>
        <member name="M:ReactNative.DevSupport.DevServerHelper.DownloadBundleFromUrlAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Download the latest bundle into a local stream.
            </summary>
            <param name="jsModulePath">The module path.</param>
            <param name="outputStream">The output stream.</param>
            <param name="token">A token to cancel the request.</param>
            <returns>A task to await completion.</returns>
        </member>
        <member name="M:ReactNative.DevSupport.DevServerHelper.IsPackagerRunningAsync">
            <summary>
            Checks if the packager is running.
            </summary>
            <returns>A task to await the packager status.</returns>
        </member>
        <member name="M:ReactNative.DevSupport.DevServerHelper.StartPollingOnChangeEndpoint(System.Action)">
            <summary>
            Start the bundle change polling service.
            </summary>
            <param name="onServerContentChanged">
            Callback for when the bundle content changes.
            </param>
            <returns>A disposable to use to stop polling.</returns>
        </member>
        <member name="M:ReactNative.DevSupport.DevServerHelper.LaunchDevToolsAsync(System.Threading.CancellationToken)">
            <summary>
            Launch the developer tools.
            </summary>
        </member>
        <member name="M:ReactNative.DevSupport.DevServerHelper.GetSourceMapUrl(System.String)">
            <summary>
            Get the source map URL for the JavaScript bundle.
            </summary>
            <param name="mainModuleName">The main module name.</param>
            <returns>The source map URL.</returns>
        </member>
        <member name="M:ReactNative.DevSupport.DevServerHelper.GetSourceUrl(System.String)">
            <summary>
            Get the source URL for the JavaScript bundle.
            </summary>
            <param name="mainModuleName">The main module name.</param>
            <returns>The source URL.</returns>
        </member>
        <member name="M:ReactNative.DevSupport.DevServerHelper.GetJavaScriptBundleUrlForRemoteDebugging(System.String)">
            <summary>
            Gets the bundle URL for remote debugging.
            </summary>
            <param name="mainModuleName">The main module name.</param>
            <returns>The bundle URL.</returns>
        </member>
        <member name="M:ReactNative.DevSupport.DevServerHelper.Dispose">
            <summary>
            Disposes the <see cref="T:ReactNative.DevSupport.DevServerHelper"/>. 
            </summary>
        </member>
        <member name="T:ReactNative.DevSupport.HMRClient">
            <summary>
            JavaScript module for HMRClient.
            
            The HMR(Hot Module Replacement)Client allows for the application to
            receive updates from the packager server (over a web socket), allowing
            for injection of JavaScript to the running application (without a 
            refresh).
            </summary>
        </member>
        <member name="M:ReactNative.DevSupport.HMRClient.enable(System.String,System.String,System.String,System.Int32)">
            <summary>
            Enable the HMRClient so that the client will receive updates from
            the packager server.
            </summary>
            <param name="platform">
            The platform in which HMR updates will be enabled.
            </param>
            <param name="bundleEntry">
            The path to the bundle entry file (e.g., index.windows.bundle).
            </param>
            <param name="host">
            The host that the HMRClient should communicate with.
            </param>
            <param name="port">
            The port that the HMRClient should communicate with on the host.
            </param>
        </member>
        <member name="T:ReactNative.DevSupport.IDevSupportManager">
            <summary>
            Interface for accessing and interacting with development features.
            In Debug builds, use <see cref="T:ReactNative.DevSupport.DevSupportManager"/>; for release, use
            <see cref="T:ReactNative.DevSupport.DisabledDevSupportManager"/>.
            </summary>
        </member>
        <member name="P:ReactNative.DevSupport.IDevSupportManager.DevSettings">
            <summary>
            The developer settings.
            </summary>
        </member>
        <member name="P:ReactNative.DevSupport.IDevSupportManager.DownloadedJavaScriptBundleFile">
            <summary>
            The cached JavaScript bundle.
            </summary>
        </member>
        <member name="P:ReactNative.DevSupport.IDevSupportManager.IsEnabled">
            <summary>
            Enables or disables the instance.
            </summary>
        </member>
        <member name="P:ReactNative.DevSupport.IDevSupportManager.IsRemoteDebuggingEnabled">
            <summary>
            Enables or disables remote debugging.
            </summary>
        </member>
        <member name="P:ReactNative.DevSupport.IDevSupportManager.IsProgressDialogEnabled">
            <summary>
            Enables or disables the progress dialog.
            </summary>
        </member>
        <member name="P:ReactNative.DevSupport.IDevSupportManager.SourceMapUrl">
            <summary>
            The source map URL.
            </summary>
        </member>
        <member name="P:ReactNative.DevSupport.IDevSupportManager.SourceUrl">
            <summary>
            The source URL.
            </summary>
        </member>
        <member name="P:ReactNative.DevSupport.IDevSupportManager.JavaScriptBundleUrlForRemoteDebugging">
            <summary>
            The source URL used during remote debugging.
            </summary>
        </member>
        <member name="M:ReactNative.DevSupport.IDevSupportManager.HandleException(System.Exception)">
            <summary>
            Handle a native exception.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ReactNative.DevSupport.IDevSupportManager.HandleReloadJavaScript">
            <summary>
            Handles reloading the JavaScript bundle.
            </summary>
        </member>
        <member name="M:ReactNative.DevSupport.IDevSupportManager.HasUpToDateBundleInCacheAsync">
            <summary>
            Checks if an up-to-date JavaScript bundle is ready.
            </summary>
            <returns>A task to await the result.</returns>
        </member>
        <member name="M:ReactNative.DevSupport.IDevSupportManager.HideRedboxDialog">
            <summary>
            Dismisses the red box exception dialog.
            </summary>
        </member>
        <member name="M:ReactNative.DevSupport.IDevSupportManager.IsPackagerRunningAsync">
            <summary>
            Checks if the packager is running.
            </summary>
            <returns>
            <code>true</code> if the packager is running, otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:ReactNative.DevSupport.IDevSupportManager.OnNewReactContextCreated(ReactNative.Bridge.ReactContext)">
            <summary>
            Notify when a new React context is created.
            </summary>
            <param name="context">The React context.</param>
        </member>
        <member name="M:ReactNative.DevSupport.IDevSupportManager.OnReactContextDestroyed(ReactNative.Bridge.ReactContext)">
            <summary>
            Notify when a new React context is destroyed.
            </summary>
            <param name="context">The React context.</param>
        </member>
        <member name="M:ReactNative.DevSupport.IDevSupportManager.ReloadSettings">
            <summary>
            Reload developer settings.
            </summary>
        </member>
        <member name="M:ReactNative.DevSupport.IDevSupportManager.ShowDevOptionsDialog">
            <summary>
            Show the developer options dialog.
            </summary>
        </member>
        <member name="M:ReactNative.DevSupport.IDevSupportManager.ShowNewJavaScriptError(System.String,Newtonsoft.Json.Linq.JArray,System.Int32)">
            <summary>
            Display a JavaScript error.
            </summary>
            <param name="title">The error message.</param>
            <param name="details">The error stack trace.</param>
            <param name="exceptionId">An identifier for the exception.</param>
        </member>
        <member name="M:ReactNative.DevSupport.IDevSupportManager.ShowNewNativeError(System.String,System.Exception)">
            <summary>
            Display a native exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="ex">The thrown exception.</param>
        </member>
        <member name="M:ReactNative.DevSupport.IDevSupportManager.UpdateJavaScriptError(System.String,Newtonsoft.Json.Linq.JArray,System.Int32)">
            <summary>
            Update the details of a JavaScript exception.
            </summary>
            <param name="title">The error message.</param>
            <param name="details">The error stack trace.</param>
            <param name="exceptionId">An identifier for the exception.</param>
        </member>
        <member name="T:ReactNative.DevSupport.IReactInstanceDevCommandsHandler">
            <summary>
            Interface used by <see cref="T:ReactNative.DevSupport.IDevSupportManager"/> for requesting React
            instance regeneration based on the option that the user selects in the
            developer options menu.
            </summary>
        </member>
        <member name="M:ReactNative.DevSupport.IReactInstanceDevCommandsHandler.OnJavaScriptBundleLoadedFromServer">
            <summary>
            Action to notify the <see cref="T:ReactNative.ReactInstanceManager"/> about the
            availability of a new JavaScript bundle downloaded from the server.
            </summary>
        </member>
        <member name="M:ReactNative.DevSupport.IReactInstanceDevCommandsHandler.OnBundleFileReloadRequest">
            <summary>
            Action triggered when the user requests that the application be
            reloaded from the initially specified bundle file.
            </summary>
        </member>
        <member name="M:ReactNative.DevSupport.IReactInstanceDevCommandsHandler.OnReloadWithJavaScriptDebugger(System.Func{ReactNative.Bridge.IJavaScriptExecutor})">
            <summary>
            Action triggered when the user requests that the application be
            reloaded from the JavaScript debugger.
            </summary>
            <param name="javaScriptExecutorFactory">
            The JavaScript executor factory.
            </param>
        </member>
        <member name="M:ReactNative.DevSupport.IReactInstanceDevCommandsHandler.ToggleElementInspector">
            <summary>
            Toggles the element inspector.
            </summary>
        </member>
        <member name="T:ReactNative.DevSupport.IStackFrame">
            <summary>
            A data container for call stack information.
            </summary>
        </member>
        <member name="P:ReactNative.DevSupport.IStackFrame.Method">
            <summary>
            The method name.
            </summary>
        </member>
        <member name="P:ReactNative.DevSupport.IStackFrame.Line">
            <summary>
            The line number.
            </summary>
        </member>
        <member name="P:ReactNative.DevSupport.IStackFrame.Column">
            <summary>
            The column number.
            </summary>
        </member>
        <member name="P:ReactNative.DevSupport.IStackFrame.FileName">
            <summary>
            The file name.
            </summary>
        </member>
        <member name="P:ReactNative.DevSupport.IStackFrame.SourceInfo">
            <summary>
            The formatted source information.
            </summary>
        </member>
        <member name="T:ReactNative.Modules.Clipboard.ClipboardModule">
            <summary>
            A module that allows JS to get/set clipboard contents.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.Clipboard.ClipboardModule.Name">
            <summary>
            The name of the native module.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Clipboard.ClipboardModule.getString(ReactNative.Bridge.IPromise)">
            <summary>
            Get the clipboard content through a promise.
            </summary>
            <param name="promise">The promise.</param>
        </member>
        <member name="M:ReactNative.Modules.Clipboard.ClipboardModule.setString(System.String)">
            <summary>
            Add text to the clipboard or clear the clipboard.
            </summary>
            <param name="text">The text. If null clear clipboard.</param>
        </member>
        <member name="M:ReactNative.Modules.Clipboard.ClipboardModule.RunOnDispatcher(Windows.UI.Core.DispatchedHandler)">
            <summary>
            Run action on UI thread.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="T:ReactNative.Modules.Clipboard.IClipboardInstance">
            <summary>
            Gets and sets information from the clipboard object.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Clipboard.IClipboardInstance.Clear">
            <summary>
            Removes all data from the Clipboard.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Clipboard.IClipboardInstance.GetContent">
            <summary>
            Gets the current content that is stored in the clipboard object.
            </summary>
            <returns>Contains the content of the Clipboard.</returns>
        </member>
        <member name="M:ReactNative.Modules.Clipboard.IClipboardInstance.SetContent(Windows.ApplicationModel.DataTransfer.DataPackage)">
            <summary>
            Sets the current content that is stored in the clipboard object.
            </summary>
            <param name="package">Contains the content of the clipboard. If NULL, the clipboard is emptied.</param>
        </member>
        <member name="T:ReactNative.Modules.DeviceInfo.DeviceInfoModule">
            <summary>
            Native module that manages window dimension updates to JavaScript.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.DeviceInfo.DeviceInfoModule.#ctor(ReactNative.Bridge.ReactContext)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Modules.DeviceInfo.DeviceInfoModule"/>. 
            </summary>
            <param name="reactContext">The React context.</param>
        </member>
        <member name="P:ReactNative.Modules.DeviceInfo.DeviceInfoModule.Name">
            <summary>
            The name of the native module.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.DeviceInfo.DeviceInfoModule.Constants">
            <summary>
            Native module constants.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.DeviceInfo.DeviceInfoModule.Initialize">
            <summary>
            Called after the creation of a <see cref="T:ReactNative.Bridge.IReactInstance"/>,
            </summary>
        </member>
        <member name="M:ReactNative.Modules.DeviceInfo.DeviceInfoModule.OnSuspend">
            <summary>
            Called when the application is suspended.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.DeviceInfo.DeviceInfoModule.OnResume">
            <summary>
            Called when the application is resumed.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.DeviceInfo.DeviceInfoModule.OnDestroy">
            <summary>
            Called when the application is terminated.
            </summary>
        </member>
        <member name="T:ReactNative.Modules.Image.ImageLoadStatus">
            <summary>
            Image load status enum.
            </summary>
            <remarks>
            Keep in sync with public constants in <see cref="T:ReactNative.Views.Image.ReactImageLoadEvent"/>. 
            </remarks>
        </member>
        <member name="F:ReactNative.Modules.Image.ImageLoadStatus.None">
            <summary>
            Invalid status.
            </summary>
        </member>
        <member name="F:ReactNative.Modules.Image.ImageLoadStatus.OnLoadStart">
            <summary>
            Image loading started status.
            </summary>
        </member>
        <member name="F:ReactNative.Modules.Image.ImageLoadStatus.OnLoad">
            <summary>
            Image loaded status.
            </summary>
        </member>
        <member name="F:ReactNative.Modules.Image.ImageLoadStatus.OnLoadEnd">
            <summary>
            Image loading finished status.
            </summary>
        </member>
        <member name="T:ReactNative.Modules.Launch.LauncherModule">
            <summary>
            The module responsible for activating URIs and managing the initial launch URL. 
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Launch.LauncherModule.#ctor(ReactNative.Bridge.ReactContext)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Modules.Launch.LauncherModule"/>. 
            </summary>
            <param name="reactContext">The React context.</param>
        </member>
        <member name="P:ReactNative.Modules.Launch.LauncherModule.Name">
            <summary>
            The name of the module.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Launch.LauncherModule.openURL(System.String,ReactNative.Bridge.IPromise)">
            <summary>
            Opens the given URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="promise">
            The promise that should be resolved after the URL is opened.
            </param>
        </member>
        <member name="M:ReactNative.Modules.Launch.LauncherModule.canOpenURL(System.String,ReactNative.Bridge.IPromise)">
            <summary>
            Checks if the application can open the given URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="promise">
            The promise used to return the result of the check.
            </param>
        </member>
        <member name="M:ReactNative.Modules.Launch.LauncherModule.getInitialURL(ReactNative.Bridge.IPromise)">
            <summary>
            Gets the URL the application was launched with, or <code>null</code>
            if the application was started normally.
            </summary>
            <param name="promise">
            The promise used to return the initial URL.
            </param>
        </member>
        <member name="M:ReactNative.Modules.Launch.LauncherModule.Initialize">
            <summary>
            Called when the app is initialized.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Launch.LauncherModule.OnSuspend">
            <summary>
            Called when the app is being suspended.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Launch.LauncherModule.OnResume">
            <summary>
            Called when the app is resumed.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Launch.LauncherModule.OnDestroy">
            <summary>
            Called when the app is destroyed.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Launch.LauncherModule.SetActivatedUrl(System.String)">
            <summary>
            The initial URL used to activate the application.
            </summary>
        </member>
        <member name="T:ReactNative.Modules.NetInfo.IConnectionProfile">
            <summary>
            An interface for network connection profiles.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.NetInfo.IConnectionProfile.ConnectivityLevel">
            <summary>
            A value that indicates the network connectivity level.
            </summary>
        </member>
        <member name="T:ReactNative.Modules.NetInfo.INetworkInformation">
            <summary>
            An interface for network information status and updates.
            </summary>
        </member>
        <member name="E:ReactNative.Modules.NetInfo.INetworkInformation.NetworkStatusChanged">
            <summary>
            An event that occurs whenever the network status changes.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.NetInfo.INetworkInformation.GetInternetConnectionProfile">
            <summary>
            Gets the connection profile associated with the internet connection
            currently used by the local machine.
            </summary>
            <returns>
            The profile for the connection currently used to connect the machine
            to the Internet, or null if there is no connection profile with a 
            suitable connection.
            </returns>
        </member>
        <member name="M:ReactNative.Modules.NetInfo.INetworkInformation.Start">
            <summary>
            Starts observing network status changes.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.NetInfo.INetworkInformation.Stop">
            <summary>
            Stops observing network status changes.
            </summary>
        </member>
        <member name="T:ReactNative.Modules.NetInfo.NetInfoModule">
            <summary>
            Module that monitors and provides nformation about the connectivity
            state of the device.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.NetInfo.NetInfoModule.#ctor(ReactNative.Bridge.ReactContext)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Modules.NetInfo.NetInfoModule"/>.
            </summary>
            <param name="reactContext">The React context.</param>
        </member>
        <member name="M:ReactNative.Modules.NetInfo.NetInfoModule.#ctor(ReactNative.Modules.NetInfo.INetworkInformation,ReactNative.Bridge.ReactContext)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Modules.NetInfo.NetInfoModule"/>.
            </summary>
            <param name="networkInfo">The network information.</param>
            <param name="reactContext">The React context.</param>
        </member>
        <member name="P:ReactNative.Modules.NetInfo.NetInfoModule.Name">
            <summary>
            Gets the name of the native module.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.NetInfo.NetInfoModule.getCurrentConnectivity(ReactNative.Bridge.IPromise)">
            <summary>
            Gets the current connectivity state of the app.
            </summary>
            <param name="promise">A promise to resolve the request.</param>
        </member>
        <member name="M:ReactNative.Modules.NetInfo.NetInfoModule.OnDestroy">
            <summary>
            Called when the application host is destroyed.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.NetInfo.NetInfoModule.OnResume">
            <summary>
            Called when the application host is resumed.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.NetInfo.NetInfoModule.OnSuspend">
            <summary>
            Called when the application host is suspended.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.NetInfo.NetInfoModule.Initialize">
            <summary>
            Called when the React instance is initialized.
            </summary>
        </member>
        <member name="T:ReactNative.Modules.StatusBar.IStatusBar">
            <summary>
            An interface for statusbar.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.StatusBar.IStatusBar.BackgroundOpacity">
            <summary>
            Gets or sets the opacity of the background color of the status bar.
            </summary>
            <returns>The opacity of the background color of the status bar.</returns>
        </member>
        <member name="P:ReactNative.Modules.StatusBar.IStatusBar.BackgroundColor">
            <summary>
            Gets or sets the background color of the status bar. The alpha channel of the color is not used.
            </summary>
            <returns>The background color of the status bar.</returns>
        </member>
        <member name="M:ReactNative.Modules.StatusBar.IStatusBar.HideAsync">
            <summary>
            Hides the status bar.
            </summary>
            <returns>The asynchronous results of the operation. Use this to determine when the async call is complete</returns>
        </member>
        <member name="M:ReactNative.Modules.StatusBar.IStatusBar.ShowAsync">
            <summary>
            Shows the status bar.
            </summary>
            <returns>The asynchronous results of the operation. Use this to determine when the async call is complete</returns>
        </member>
        <member name="T:ReactNative.Modules.StatusBar.StatusBarModule">
            <summary>
            A module that allows JS to set StatusBar properties.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.StatusBar.StatusBarModule.#ctor">
            <summary>
            Instantiates the <see cref="T:ReactNative.Modules.StatusBar.StatusBarModule"/>.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.StatusBar.StatusBarModule.#ctor(ReactNative.Modules.StatusBar.IStatusBar)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Modules.StatusBar.StatusBarModule"/>.
            </summary>
            <param name="statusBar">The status bar instance.</param>
        </member>
        <member name="P:ReactNative.Modules.StatusBar.StatusBarModule.Name">
            <summary>
            The name of the native module.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.StatusBar.StatusBarModule.setHidden(System.Boolean)">
            <summary>
            Hide or show StatusBar.
            </summary>
            <param name="hide">Hide or show StatusBar.</param>
        </member>
        <member name="M:ReactNative.Modules.StatusBar.StatusBarModule.setColor(System.Nullable{System.UInt32})">
            <summary>
            Set StatusBar background color.
            </summary>
            <param name="color">RGB color.</param>
        </member>
        <member name="M:ReactNative.Modules.StatusBar.StatusBarModule.setTranslucent(System.Boolean)">
            <summary>
            Set StatusBar opacity.
            </summary>
            <param name="translucent">Is StatusBar translucent.</param>
        </member>
        <member name="M:ReactNative.Modules.StatusBar.StatusBarModule.GetStatusBar">
            <summary>
            Create default StatusBar.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.StatusBar.StatusBarModule.RunOnDispatcher(Windows.UI.Core.DispatchedHandler)">
            <summary>
            Run action on UI thread.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="T:ReactNative.Modules.Vibration.VibrationModule">
            <summary>
            Represents the module for vibration.  Note this is only available on Windows Mobile.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Vibration.VibrationModule.#ctor">
            <summary>
            Creates a new instance of the Vibration Module.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Vibration.VibrationModule.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the Vibration Module with a flag of whether the platform is mobile.
            </summary>
            <param name="isMobile"></param>
        </member>
        <member name="P:ReactNative.Modules.Vibration.VibrationModule.Name">
            <summary>
            The name of the module.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Vibration.VibrationModule.vibrate(System.Int32)">
            <summary>
            Vibrates the device for the specified milliseconds.
            </summary>
            <param name="duration">The duration in milliseconds to vibrate.</param>
        </member>
        <member name="M:ReactNative.Modules.Vibration.VibrationModule.cancel">
            <summary>
            Cancels the current vibration.
            </summary>
        </member>
        <member name="T:ReactNative.Modules.Core.IReactPackage">
            <summary>
            Main interface for providing additional capabilities to the React 
            framework through the following mechanisms:
            
            1) Registering new native modules.
            2) Registering new JavaScript modules that may be accessed from native
               modules or from other parts of the native code (requiring JavaScript
               modules from the package doesn't mean it will automatically be 
               included as a part of the JavaScript bundle, so there should be a 
               corresponding piece of code on JavaScript side that will require the
               implementation of that JavaScript module so that it gets bundled).
            3) Registering custom native views (i.e., view managers) and custom 
               event types.
            4) Registering natively packaged assets/resources (e.g. images) exposed
               to JavaScript.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.IReactPackage.CreateNativeModules(ReactNative.Bridge.ReactContext)">
            <summary>
            Creates the list of native modules to register with the react
            instance. 
            </summary>
            <param name="reactContext">The React application context.</param>
            <returns>The list of native modules.</returns>
        </member>
        <member name="M:ReactNative.Modules.Core.IReactPackage.CreateViewManagers(ReactNative.Bridge.ReactContext)">
            <summary>
            Creates the list of view managers that should be registered with
            the <see cref="T:ReactNative.UIManager.UIManagerModule"/>.
            </summary>
            <param name="reactContext">The React application context.</param>
            <returns>The list of view managers.</returns>
        </member>
        <member name="T:ReactNative.Modules.Core.DeviceEventManagerModule">
            <summary>
            Native module that handles device hardware events like hardware back presses.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.DeviceEventManagerModule.#ctor(ReactNative.Bridge.ReactContext,System.Action)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Modules.Core.DeviceEventManagerModule"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="onBackPressed">
            The action to take when back is pressed.
            </param>
        </member>
        <member name="P:ReactNative.Modules.Core.DeviceEventManagerModule.Name">
            <summary>
            The name of the module.
            </summary>
            <remarks>
            This will be the name used to <code>require()</code> this module
            from JavaScript.
            </remarks>
        </member>
        <member name="M:ReactNative.Modules.Core.DeviceEventManagerModule.EmitHardwareBackPressed">
            <summary>
            Sends an event to the JavaScript instance that the hardware back
            has been pressed.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.DeviceEventManagerModule.invokeDefaultBackPressHandler">
            <summary>
            Invokes the default back handler for the host of this React 
            instance. This should be invoked if JavaScript does not want to
            handle the back press itself.
            </summary>
        </member>
        <member name="T:ReactNative.Modules.Core.ExceptionsManagerModule">
            <summary>
            Native module for managing exceptions from the JavaScript runtime.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.ExceptionsManagerModule.#ctor(ReactNative.DevSupport.IDevSupportManager)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Modules.Core.ExceptionsManagerModule"/>.
            </summary>
            <param name="devSupportManager">
            The developer support manager instance.
            </param>
        </member>
        <member name="P:ReactNative.Modules.Core.ExceptionsManagerModule.Name">
            <summary>
            The name of the module.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.ExceptionsManagerModule.reportFatalException(System.String,Newtonsoft.Json.Linq.JArray,System.Int32)">
            <summary>
            Report a fatal exception from JavaScript.
            </summary>
            <param name="title">The exception message.</param>
            <param name="details">The exception stack trace.</param>
            <param name="exceptionId">An identifier for the exception.</param>
            <remarks>
            Will either trigger a red box dialog or a runtime exception.
            </remarks>
        </member>
        <member name="M:ReactNative.Modules.Core.ExceptionsManagerModule.reportSoftException(System.String,Newtonsoft.Json.Linq.JArray,System.Int32)">
            <summary>
            Reports a non-fatal exception from JavaScript.
            </summary>
            <param name="title">The exception message.</param>
            <param name="details">The exception stack trace.</param>
            <param name="exceptionId">An identifier for the exception.</param>
            <remarks>
            Should not trigger a red box dialog or runtime exception.
            </remarks>
        </member>
        <member name="M:ReactNative.Modules.Core.ExceptionsManagerModule.updateExceptionMessage(System.String,Newtonsoft.Json.Linq.JArray,System.Int32)">
            <summary>
            Updates the exception details for a JavaScript error with the given
            exception identifier.
            </summary>
            <param name="title">The exception message.</param>
            <param name="details">The exception stack trace.</param>
            <param name="exceptionId">An identifier for the exception.</param>
        </member>
        <member name="M:ReactNative.Modules.Core.ExceptionsManagerModule.dismissRedbox">
            <summary>
            Dismisses any active exception dialogs.
            </summary>
        </member>
        <member name="T:ReactNative.Modules.Core.FrameEventArgs">
            <summary>
            Event arguments for frame callbacks.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.Core.FrameEventArgs.RenderingTime">
            <summary>
            The relative frame time.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.Core.FrameEventArgs.FrameTime">
            <summary>
            The absolute frame time.
            </summary>
        </member>
        <member name="T:ReactNative.Modules.Core.JavaScriptException">
            <summary>
            A class for JavaScript exceptions.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.JavaScriptException.#ctor(System.String,System.String)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Modules.Core.JavaScriptException"/>.
            </summary>
            <param name="message">The exception message.</param>
            <param name="stackTrace">The JavaScript stack trace.</param>
        </member>
        <member name="M:ReactNative.Modules.Core.JavaScriptException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Modules.Core.JavaScriptException"/>.
            </summary>
            <param name="message">The exception message.</param>
            <param name="stackTrace">The JavaScript stack trace.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:ReactNative.Modules.Core.JavaScriptException.JavaScriptStackTrace">
            <summary>
            The exception stack trace.
            </summary>
        </member>
        <member name="T:ReactNative.Modules.Core.JSTimers">
            <summary>
            JavaScript module for invoking timers by identifier.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.JSTimers.callTimers(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Calls a batch of timers with the given identifiers.
            </summary>
            <param name="timerIds">The timer identifiers.</param>
        </member>
        <member name="M:ReactNative.Modules.Core.JSTimers.callIdleCallbacks(System.Int64)">
            <summary>
            Calls the idle callbacks with the current frame time.
            </summary>
            <param name="frameTime">The frame time.</param>
        </member>
        <member name="T:ReactNative.Modules.Core.RCTDeviceEventEmitter">
            <summary>
            JavaScript module for emitting device events.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.RCTDeviceEventEmitter.emit(System.String,System.Object)">
            <summary>
            Emits an event to the JavaScript instance.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="data">The event data.</param>
        </member>
        <member name="T:ReactNative.Modules.Core.RCTNativeAppEventEmitter">
            <summary>
            Native app event emitter.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.RCTNativeAppEventEmitter.emit(System.String,System.Object)">
            <summary>
            Emit a native app event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="data">The event data.</param>
        </member>
        <member name="T:ReactNative.Modules.Core.ReactChoreographer">
            <summary>
            A simple action queue that allows us to control the order certain
            callbacks are executed within a given frame.
            </summary>
        </member>
        <member name="E:ReactNative.Modules.Core.ReactChoreographer.DispatchUICallback">
            <summary>
            For use by <see cref="T:ReactNative.UIManager.UIManagerModule"/>. 
            </summary>
        </member>
        <member name="E:ReactNative.Modules.Core.ReactChoreographer.NativeAnimatedCallback">
            <summary>
            For use by <see cref="T:ReactNative.Animated.NativeAnimatedModule"/>. 
            </summary>
        </member>
        <member name="E:ReactNative.Modules.Core.ReactChoreographer.JavaScriptEventsCallback">
            <summary>
            For events that make JavaScript do things.
            </summary>
        </member>
        <member name="E:ReactNative.Modules.Core.ReactChoreographer.IdleCallback">
            <summary>
            Event used to trigger the idle callback. Called after all UI work has been
            dispatched to JavaScript.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.Core.ReactChoreographer.Instance">
            <summary>
            The choreographer instance.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.ReactChoreographer.Initialize">
            <summary>
            Initializes the <see cref="T:ReactNative.Modules.Core.ReactChoreographer"/> instance.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.ReactChoreographer.Dispose">
            <summary>
            Disposes the <see cref="T:ReactNative.Modules.Core.ReactChoreographer"/> instance. 
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.ReactChoreographer.ActivateCallback(System.String)">
            <summary>
            Activate the callback for the given key.
            </summary>
            <param name="callbackKey">The callback key.</param>
        </member>
        <member name="M:ReactNative.Modules.Core.ReactChoreographer.DeactivateCallback(System.String)">
            <summary>
            Deactivate the callback for the given key.
            </summary>
            <param name="callbackKey">The callback key.</param>
        </member>
        <member name="T:ReactNative.Modules.Core.Timing">
            <summary>
            Native module for JavaScript timer execution.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.Timing.#ctor(ReactNative.Bridge.ReactContext)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Modules.Core.Timing"/> module.
            </summary>
            <param name="reactContext">The React context.</param>
        </member>
        <member name="P:ReactNative.Modules.Core.Timing.Name">
            <summary>
            The name of the module.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.Timing.Initialize">
            <summary>
            Initializes the module.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.Timing.OnSuspend">
            <summary>
            Called when the host application suspends.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.Timing.OnResume">
            <summary>
            Called when the host application resumes.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.Timing.OnDestroy">
            <summary>
            Called when the host application is destroyed.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.Timing.createTimer(System.Int32,System.Int32,System.Double,System.Boolean)">
            <summary>
            Creates a timer with the given properties.
            </summary>
            <param name="callbackId">The timer identifier.</param>
            <param name="duration">The duration in milliseconds.</param>
            <param name="jsSchedulingTime">
            The Unix timestamp when the timer was created.
            </param>
            <param name="repeat">
            A flag signaling if the timer should fire at intervals.
            </param>
        </member>
        <member name="M:ReactNative.Modules.Core.Timing.deleteTimer(System.Int32)">
            <summary>
            Removes a timer.
            </summary>
            <param name="timerId">The timer identifier.</param>
        </member>
        <member name="M:ReactNative.Modules.Core.Timing.setSendIdleEvents(System.Boolean)">
            <summary>
            Enable or disable idle events.
            </summary>
            <param name="sendIdleEvents">
            <code>true</code> if idle events should be enabled, otherwise
            <code>false</code>.
            </param>
        </member>
        <member name="M:ReactNative.Modules.Core.Timing.OnReactInstanceDispose">
            <summary>
            Called before a <see cref="T:ReactNative.Bridge.IReactInstance"/> is disposed.
            </summary>
        </member>
        <member name="T:ReactNative.Modules.AppState.AppStateModule">
            <summary>
            Native module for monitoring the state of the application.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.AppState.AppStateModule.#ctor(ReactNative.Bridge.ReactContext)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Modules.AppState.AppStateModule"/>.
            </summary>
            <param name="reactContext">The React context.</param>
        </member>
        <member name="P:ReactNative.Modules.AppState.AppStateModule.Name">
            <summary>
            The name of the module.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.AppState.AppStateModule.Initialize">
            <summary>
            Initializes the module.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.AppState.AppStateModule.OnSuspend">
            <summary>
            Called when the application host suspends.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.AppState.AppStateModule.OnResume">
            <summary>
            Called when the application host resumes.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.AppState.AppStateModule.OnDestroy">
            <summary>
            Called when the application host is shutdown.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.AppState.AppStateModule.getCurrentAppState(ReactNative.Bridge.ICallback,ReactNative.Bridge.ICallback)">
            <summary>
            Native method to retrieve the current application state.
            </summary>
            <param name="success">The success callback.</param>
            <param name="error">The error callback.</param>
        </member>
        <member name="T:ReactNative.Modules.DevSupport.IDeveloperSettings">
            <summary>
            Provides access to React Native developer settings.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.DevSupport.IDeveloperSettings.IsFpsDebugEnabled">
            <summary>
            Signals whether an overlay showing current FPS should be shown.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.DevSupport.IDeveloperSettings.IsAnimationFpsDebugEnabled">
            <summary>
            Signals whether debug information about transitions should be displayed.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.DevSupport.IDeveloperSettings.IsJavaScriptDevModeEnabled">
            <summary>
            Signals whether dev mode should be enabled in JavaScript bundles.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.DevSupport.IDeveloperSettings.IsJavaScriptMinifyEnabled">
            <summary>
            Signals whether JavaScript bundle should be minified.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.DevSupport.IDeveloperSettings.IsElementInspectorEnabled">
            <summary>
            Signals whether element inspector is enabled.
            </summary>
        </member>
        <member name="T:ReactNative.Modules.DevSupport.SourceCodeModule">
            <summary>
            Module that exposes the URL to the source code map (used for exception
            stack trace parsing) to JavaScript.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.DevSupport.SourceCodeModule.#ctor(System.String,System.String)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Modules.DevSupport.SourceCodeModule"/>.
            </summary>
            <param name="sourceUrl">The source URL.</param>
            <param name="sourceMapUrl">The source map URL.</param>
        </member>
        <member name="P:ReactNative.Modules.DevSupport.SourceCodeModule.Name">
            <summary>
            The name of the module.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.DevSupport.SourceCodeModule.Constants">
            <summary>
            The module constants.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.DevSupport.SourceCodeModule.getScriptText(ReactNative.Bridge.IPromise)">
            <summary>
            Gets the script mapping URL.
            </summary>
            <param name="promise">The promise.</param>
        </member>
        <member name="T:ReactNative.Modules.I18N.I18NModule">
            <summary>
            A module that allows JS to get/set right to left preferences.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.I18N.I18NModule.Name">
            <summary>
            Gets the module name.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.I18N.I18NModule.Constants">
            <summary>
            The constants exported by this module.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.I18N.I18NModule.allowRTL(System.Boolean)">
            <summary>
            Sets whether to allow right to left.
            </summary>
            <param name="value">true to allow right to left; else false.</param>
        </member>
        <member name="M:ReactNative.Modules.I18N.I18NModule.forceRTL(System.Boolean)">
            <summary>
            Sets whether to force right to left.  This is used for development purposes to force a language such as English to be RTL.
            </summary>
            <param name="value">true to force right to left; else false.</param>
        </member>
        <member name="T:ReactNative.Modules.I18N.I18NUtil">
            <summary>
            Class used for right to left preferences.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.I18N.I18NUtil.IsRightToLeft">
            <summary>
            Check if the system is using Right to Left. This only happens when the app:
            - is forcing RTL layout regardless of language
            - allows RTL layout when using RTL locale.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.I18N.I18NUtil.IsRightToLeftAllowed">
            <summary>
            Gets or sets whether right to left is allowed.  Should be used very early during startup before the bridge is initialized.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.I18N.I18NUtil.IsRightToLeftForced">
            <summary>
            Gets or sets whether right to left is forced, used for development purposes.
            </summary>
        </member>
        <member name="T:ReactNative.Modules.Network.IHttpClient">
            <summary>
            An interface for HTTP clients.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Network.IHttpClient.SendRequestAsync(Windows.Web.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Send an asynchronous HTTP request.
            </summary>
            <param name="request">The HTTP request.</param>
            <param name="token">A cancellation token.</param>
            <returns>The HTTP response.</returns>
        </member>
        <member name="T:ReactNative.Modules.Network.NetworkingModule">
            <summary>
            Implements the XMLHttpRequest JavaScript interface.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Network.NetworkingModule.#ctor(ReactNative.Bridge.ReactContext)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Modules.Network.NetworkingModule"/>.
            </summary>
            <param name="reactContext">The context.</param>
        </member>
        <member name="M:ReactNative.Modules.Network.NetworkingModule.#ctor(ReactNative.Modules.Network.IHttpClient,ReactNative.Bridge.ReactContext)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Modules.Network.NetworkingModule"/>.
            </summary>
            <param name="client">The HTTP client.</param>
            <param name="reactContext">The context.</param>
        </member>
        <member name="P:ReactNative.Modules.Network.NetworkingModule.Name">
            <summary>
            The name of the native module.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Network.NetworkingModule.sendRequest(System.String,System.Uri,System.Int32,System.String[][],Newtonsoft.Json.Linq.JObject,System.String,System.Boolean,System.Int32)">
            <summary>
            Send an HTTP request on the networking module.
            </summary>
            <param name="method">The HTTP method.</param>
            <param name="url">The URL.</param>
            <param name="requestId">The request ID.</param>
            <param name="headers">The headers.</param>
            <param name="data">The request data.</param>
            <param name="responseType">The response type (either "text" or "base64").</param>
            <param name="useIncrementalUpdates">
            <code>true</code> if incremental updates are allowed.
            </param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:ReactNative.Modules.Network.NetworkingModule.abortRequest(System.Int32)">
            <summary>
            Abort an HTTP request with the given request ID.
            </summary>
            <param name="requestId">The request ID.</param>
        </member>
        <member name="M:ReactNative.Modules.Network.NetworkingModule.OnReactInstanceDispose">
            <summary>
            Called before a <see cref="T:ReactNative.Bridge.IReactInstance"/> is disposed.
            </summary>
        </member>
        <member name="T:ReactNative.Modules.Network.TaskCancellationManager`1">
            <summary>
            Task cancellation manager.
            </summary>
            <typeparam name="TKey">Type of key used to identify tasks.</typeparam>
        </member>
        <member name="M:ReactNative.Modules.Network.TaskCancellationManager`1.#ctor">
            <summary>
            Instantiates a <see cref="T:ReactNative.Modules.Network.TaskCancellationManager`1"/>.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Network.TaskCancellationManager`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Instantiates a <see cref="T:ReactNative.Modules.Network.TaskCancellationManager`1"/>.
            </summary>
            <param name="keyComparer">The key comparer.</param>
        </member>
        <member name="P:ReactNative.Modules.Network.TaskCancellationManager`1.PendingOperationCount">
            <summary>
            Number of outstanding operations being managed.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Network.TaskCancellationManager`1.AddAndInvokeAsync(`0,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Adds a task to the manager.
            </summary>
            <param name="key">The task key.</param>
            <param name="taskFactory">The task factory.</param>
            <remarks>
            The task factory is invoked during this method call.
            </remarks>
        </member>
        <member name="M:ReactNative.Modules.Network.TaskCancellationManager`1.Cancel(`0)">
            <summary>
            Cancels the task with the given key.
            </summary>
            <param name="key">The task key.</param>
        </member>
        <member name="M:ReactNative.Modules.Network.TaskCancellationManager`1.CancelAllTasks">
            <summary>
            Cancels all pending tasks.
            </summary>
        </member>
        <member name="T:ReactNative.Modules.SystemInfo.PlatformConstantsModule">
            <summary>
            Module that exposes platform constants to JavaScript.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.SystemInfo.PlatformConstantsModule.Name">
            <summary>
            The native module name.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.SystemInfo.PlatformConstantsModule.Constants">
            <summary>
            The native module constants.
            </summary>
        </member>
        <member name="T:ReactNative.Modules.SystemInfo.ReactNativeVersion">
            <summary>
            Maintains the current NPM build version.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.SystemInfo.ReactNativeVersion.Version">
            <summary>
            The React Native NPM build version.
            </summary>
        </member>
        <member name="T:ReactNative.ReactPage">
            <summary>
            Base page for React Native applications.
            </summary>
        </member>
        <member name="M:ReactNative.ReactPage.#ctor">
            <summary>
            Instantiates the <see cref="T:ReactNative.ReactPage"/>.
            </summary>
        </member>
        <member name="P:ReactNative.ReactPage.JavaScriptBundleFile">
            <summary>
            The custom path of the bundle file.
            </summary>
            <remarks>
            This is used in cases where the bundle should be loaded from a
            custom path.
            </remarks>
        </member>
        <member name="P:ReactNative.ReactPage.JavaScriptMainModuleName">
            <summary>
            The name of the main module.
            </summary>
            <remarks>
            This is used to determine the URL used to fetch the JavaScript
            bundle from the packager server. It is only used when dev support
            is enabled.
            </remarks>
        </member>
        <member name="P:ReactNative.ReactPage.JavaScriptExecutorFactory">
            <summary>
            Instantiates the JavaScript executor.
            </summary>
        </member>
        <member name="P:ReactNative.ReactPage.MainComponentName">
            <summary>
            The name of the main component registered from JavaScript.
            </summary>
        </member>
        <member name="P:ReactNative.ReactPage.UseDeveloperSupport">
            <summary>
            Signals whether developer mode should be enabled.
            </summary>
        </member>
        <member name="P:ReactNative.ReactPage.Packages">
            <summary>
            The list of <see cref="T:ReactNative.Modules.Core.IReactPackage"/>s used by the application.
            </summary>
        </member>
        <member name="P:ReactNative.ReactPage.RootView">
            <summary>
            The root view managed by the page.
            </summary>
        </member>
        <member name="M:ReactNative.ReactPage.OnCreate(System.String)">
            <summary>
            Called when the application is first initialized.
            </summary>
            <param name="arguments">The launch arguments.</param>
        </member>
        <member name="M:ReactNative.ReactPage.OnCreate(System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Called when the application is first initialized.
            </summary>
            <param name="arguments">The launch arguments.</param>
            <param name="initialProps">The initialProps.</param>
        </member>
        <member name="M:ReactNative.ReactPage.OnSuspend">
            <summary>
            Called before the application is suspended.
            </summary>
        </member>
        <member name="M:ReactNative.ReactPage.OnResume(System.Action)">
            <summary>
            Called when the application is resumed.
            </summary>
            <param name="onBackPressed">
            Default action to take when back pressed.
            </param>
        </member>
        <member name="M:ReactNative.ReactPage.DisposeAsync">
            <summary>
            Called before the application shuts down.
            </summary>
        </member>
        <member name="M:ReactNative.ReactPage.CreateRootView">
            <summary>
            Creates the React root view.
            </summary>
            <returns>The root view.</returns>
            <remarks>
            Subclasses may override this method if it needs to use a custom
            root view.
            </remarks>
        </member>
        <member name="M:ReactNative.ReactPage.OnAcceleratorKeyActivated(Windows.UI.Core.CoreDispatcher,Windows.UI.Core.AcceleratorKeyEventArgs)">
            <summary>
            Captures the all key downs and Ups. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ReactNative.Touch.IOnInterceptTouchEventListener">
            <summary>
            A listener for intercepting touch events.
            </summary>
        </member>
        <member name="M:ReactNative.Touch.IOnInterceptTouchEventListener.OnInterceptTouchEvent(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Called to evaluate touch interception occurs on a view parent.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="event">
            The motion event being dispatched down the hierarchy.
            </param>
            <returns>
            <code>true</code> to steal the motion event from the children and 
            dispatch to this view, or <code>false</code> to allow the motion 
            event to be delivered to the child view.
            </returns>
        </member>
        <member name="T:ReactNative.Touch.JavaScriptResponderHandler">
            <summary>
            This class coordinates JavaScript responder commands for the 
            <see cref="T:ReactNative.UIManager.UIManagerModule"/>. It should be set 
            as the <see cref="T:ReactNative.Touch.IOnInterceptTouchEventListener"/> for all newly 
            created native views that implement IReactInterceptingViewParent and 
            will dispatch touch events to the JavaScript gesture recognizer when
            the JavaScript responder is set to be enabled.
            </summary>
        </member>
        <member name="M:ReactNative.Touch.JavaScriptResponderHandler.SetJavaScriptResponder(System.Int32,Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Sets the JavaScript responder to the given view.
            </summary>
            <param name="tag">The view tag.</param>
            <param name="viewParentBlockingNativeResponder">
            The view instance.
            </param>
        </member>
        <member name="M:ReactNative.Touch.JavaScriptResponderHandler.ClearJavaScriptResponder">
            <summary>
            Clears the JavaScript responder.
            </summary>
        </member>
        <member name="M:ReactNative.Touch.JavaScriptResponderHandler.OnInterceptTouchEvent(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
            Called to evaluate touch interception occurs on a view parent.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="event">
            The motion event being dispatched down the hierarchy.
            </param>
            <returns>
            <code>true</code> to steal the motion event from the children and 
            dispatch to this view, or <code>false</code> to allow the motion 
            event to be delivered to the child view.
            </returns>
        </member>
        <member name="T:ReactNative.Tracing.Tracer">
            <summary>
            Tracing helpers for the application.
            </summary>
        </member>
        <member name="F:ReactNative.Tracing.Tracer.TRACE_TAG_REACT_BRIDGE">
            <summary>
            Trace ID for bridge events.
            </summary>
        </member>
        <member name="F:ReactNative.Tracing.Tracer.TRACE_TAG_REACT_APPS">
            <summary>
            Trace ID for application events.
            </summary>
        </member>
        <member name="F:ReactNative.Tracing.Tracer.TRACE_TAG_REACT_VIEW">
            <summary>
            Trace ID for view events.
            </summary>
        </member>
        <member name="P:ReactNative.Tracing.Tracer.Instance">
            <summary>
            The logging channel instance.
            </summary>
        </member>
        <member name="M:ReactNative.Tracing.Tracer.Trace(System.Int32,System.String)">
            <summary>
            Create a logging activity builder.
            </summary>
            <param name="tag">The trace tag.</param>
            <param name="name">The event name.</param>
            <returns>The logging activity builder.</returns>
        </member>
        <member name="M:ReactNative.Tracing.Tracer.Write(System.Int32,System.String)">
            <summary>
            Write an event.
            </summary>
            <param name="tag">The trace tag.</param>
            <param name="eventName">The event name.</param>
        </member>
        <member name="M:ReactNative.Tracing.Tracer.Error(System.Int32,System.String,System.Exception)">
            <summary>
            Write an error event.
            </summary>
            <param name="tag">The trace tag.</param>
            <param name="eventName">The event name.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="T:ReactNative.Shell.MainReactPackage">
            <summary>
            Package defining basic modules and view managers.
            </summary>
        </member>
        <member name="M:ReactNative.Shell.MainReactPackage.CreateNativeModules(ReactNative.Bridge.ReactContext)">
            <summary>
            Creates the list of native modules to register with the react
            instance.
            </summary>
            <param name="reactContext">The React application context.</param>
            <returns>The list of native modules.</returns>
        </member>
        <member name="M:ReactNative.Shell.MainReactPackage.CreateViewManagers(ReactNative.Bridge.ReactContext)">
            <summary>
            Creates the list of view managers that should be registered with
            the <see cref="T:ReactNative.UIManager.UIManagerModule"/>.
            </summary>
            <param name="reactContext">The React application context.</param>
            <returns>The list of view managers.</returns>
        </member>
        <member name="T:ReactNative.UIManager.BaseViewManager`2">
            <summary>
            Base class that should be suitable for the majority of subclasses of <see cref="T:ReactNative.UIManager.IViewManager"/>.
            It provides support for base view properties such as opacity, etc.
            </summary>
            <typeparam name="TFrameworkElement">Type of framework element.</typeparam>
            <typeparam name="TLayoutShadowNode">Type of shadow node.</typeparam>
        </member>
        <member name="M:ReactNative.UIManager.BaseViewManager`2.SetTransform(`0,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Set's the  <typeparamref name="TFrameworkElement"/> styling layout 
            properties, based on the <see cref="T:Newtonsoft.Json.Linq.JObject"/> map.
            </summary>
            <param name="view">The view instance.</param>
            <param name="transforms">The list of transforms.</param>
        </member>
        <member name="M:ReactNative.UIManager.BaseViewManager`2.SetOpacity(`0,System.Double)">
            <summary>
            Sets the opacity of the <typeparamref name="TFrameworkElement"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="opacity">The opacity value.</param>
        </member>
        <member name="M:ReactNative.UIManager.BaseViewManager`2.SetOverflow(`0,System.String)">
            <summary>
            Sets the overflow property for the <typeparamref name="TFrameworkElement"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="overflow">The overflow value.</param>
        </member>
        <member name="M:ReactNative.UIManager.BaseViewManager`2.SetZIndex(`0,System.Int32)">
            <summary>
            Sets the z-index of the element.
            </summary>
            <param name="view">The view instance.</param>
            <param name="zIndex">The z-index.</param>
        </member>
        <member name="M:ReactNative.UIManager.BaseViewManager`2.SetManipulationModes(`0,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Sets the manipulation mode for the view.
            </summary>
            <param name="view">The view instance.</param>
            <param name="manipulationModes">The manipulation modes.</param>
        </member>
        <member name="M:ReactNative.UIManager.BaseViewManager`2.SetAccessibilityLabel(`0,System.String)">
            <summary>
            Sets the accessibility label of the element.
            </summary>
            <param name="view">The view instance.</param>
            <param name="label">The label.</param>
        </member>
        <member name="M:ReactNative.UIManager.BaseViewManager`2.SetAccessibilityLiveRegion(`0,System.String)">
            <summary>
            Sets the accessibility live region.
            </summary>
            <param name="view">The view instance.</param>
            <param name="liveRegion">The live region.</param>
        </member>
        <member name="M:ReactNative.UIManager.BaseViewManager`2.SetTestId(`0,System.String)">
            <summary>
            Sets the test ID, i.e., the automation ID.
            </summary>
            <param name="view">The view instance.</param>
            <param name="testId">The test ID.</param>
        </member>
        <member name="M:ReactNative.UIManager.BaseViewManager`2.OnDropViewInstance(ReactNative.UIManager.ThemedReactContext,`0)">
            <summary>
            Called when view is detached from view hierarchy and allows for 
            additional cleanup by the <see cref="T:ReactNative.UIManager.IViewManager"/> subclass.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The view.</param>
            <remarks>
            Be sure to call this base class method to register for pointer 
            entered and pointer exited events.
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.BaseViewManager`2.SetDimensions(`0,ReactNative.UIManager.Dimensions)">
            <summary>
            Sets the dimensions of the view.
            </summary>
            <param name="view">The view.</param>
            <param name="dimensions">The dimensions.</param>
        </member>
        <member name="M:ReactNative.UIManager.BaseViewManager`2.AddEventEmitters(ReactNative.UIManager.ThemedReactContext,`0)">
            <summary>
            Subclasses can override this method to install custom event 
            emitters on the given view.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The view instance.</param>
            <remarks>
            Consider overriding this method if your view needs to emit events
            besides basic touch events to JavaScript (e.g., scroll events).
            
            Make sure you call the base implementation to ensure base pointer
            event handlers are subscribed.
            </remarks>
        </member>
        <member name="T:ReactNative.UIManager.Annotations.ReactPropAttribute">
            <summary>
            An annotation for properties of native vies that should be exposed to
            JavaScript.
            </summary>
            <remarks>
            Each annotated method should return <see cref="T:System.Void"/>.
            
            In cases when the property has been removed from the corresponding 
            React component, the annotated setter will be called and a default
            value will be provided as a value parameter. Default values can be
            customized using, e.g., <see cref="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultInt32"/>. 
            In all other cases where the type is not a primitive, 
            <code>null</code> will be provided as a default.
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.Annotations.ReactPropAttribute.#ctor(System.String)">
            <summary>
            Instantiates the <see cref="T:ReactNative.UIManager.Annotations.ReactPropAttribute"/>.
            </summary>
            <param name="name">The property name.</param>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropAttribute.Name">
            <summary>
            Name of the property exposed to JavaScript.
            </summary>
        </member>
        <member name="T:ReactNative.UIManager.Annotations.ReactPropBaseAttribute">
            <summary>
            A base class for common functionality across <see cref="T:ReactNative.UIManager.Annotations.ReactPropAttribute"/>
            and <see cref="T:ReactNative.UIManager.Annotations.ReactPropGroupAttribute"/>.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.UseDefaultType">
            <summary>
            A type handle that signals to use the default type.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.CustomType">
            <summary>
            The custom type name that should be sent to JavaScript.
            </summary>
            <remarks>
            In most cases, this should not be set. The custom type is meant to
            be used when additional processing of the value needs to occur in
            JavaScript before sending it over the bridge.
            </remarks>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultBoolean">
            <summary>
            The default value for boolean properties.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultByte">
            <summary>
            The default value for byte properties.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultSByte">
            <summary>
            The default value for signed byte properties.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultDouble">
            <summary>
            The default value for double properties.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultSingle">
            <summary>
            The default value for float properties.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultInt32">
            <summary>
            The default value for integers.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultUInt32">
            <summary>
            The default value for unsigned integers.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultInt64">
            <summary>
            The default value for long integers.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultUInt64">
            <summary>
            The default value for unsigned long integers.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultInt16">
            <summary>
            The default value for short integers.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultUInt16">
            <summary>
            The default value for unsigned short integers.
            </summary>
        </member>
        <member name="T:ReactNative.UIManager.Annotations.ReactPropGroupAttribute">
            <summary>
            Annotates a group of properties of native views that should be exposed
            to JavaScript. It is a batched version of the 
            <see cref="T:ReactNative.UIManager.Annotations.ReactPropAttribute"/> annotation.
            </summary>
            <remarks>
            This annotation is meant to be used of similar properties. That is why
            it only supports a set of properties of the same type. A good example
            is supporting "border", where there are many variations of that
            property and each has very similar handling.
            
            Each annotated method should return <see cref="T:System.Void"/>.
            
            In cases when the property has been removed from the corresponding 
            React component, the annotated setter will be called and a default
            value will be provided as a value parameter. Default values can be
            customized using, e.g., <see cref="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultInt32"/>.
            In all other cases, <code>null</code> will be provided as a default.
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.Annotations.ReactPropGroupAttribute.#ctor(System.String[])">
            <summary>
            Instantiates the <see cref="T:ReactNative.UIManager.Annotations.ReactPropGroupAttribute"/>.
            </summary>
            <param name="names">The property group names.</param>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropGroupAttribute.Names">
            <summary>
            The set of property group names.
            </summary>
        </member>
        <member name="T:ReactNative.UIManager.AppRegistry">
            <summary>
            The application registry.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.AppRegistry.runApplication(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Run the application.
            </summary>
            <param name="appKey">The app key.</param>
            <param name="appParameters">The app parameters.</param>
        </member>
        <member name="M:ReactNative.UIManager.AppRegistry.unmountApplicationComponentAtRootTag(System.Int32)">
            <summary>
            Unmount the application.
            </summary>
            <param name="rootTagNode">The root tag node.</param>
        </member>
        <member name="T:ReactNative.UIManager.BorderedCanvas">
            <summary>
            Represents a Canvas with an optional Border inside.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.BorderedCanvas.Border">
            <summary>
            The Border associated with this Canvas or null if it doesn't have a border.
            The Border is always the first element in the Children collection.
            </summary>
        </member>
        <member name="T:ReactNative.UIManager.ColorHelpers">
            <summary>
            Helper class for parsing color values.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.ColorHelpers.Transparent">
            <summary>
            Unsigned integer representation of transparent color.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.ColorHelpers.Parse(System.UInt32)">
            <summary>
            Parses a color from an unsigned integer.
            </summary>
            <param name="value">The unsigned integer color value.</param>
            <returns>The parsed color value.</returns>
        </member>
        <member name="T:ReactNative.UIManager.IUIBlock">
            <summary>
            Interface that represents a block to execute on the UI thread.
            Exposes NativeViewHierarchyManager for third party libraries.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.IUIBlock.Execute(ReactNative.UIManager.NativeViewHierarchyManager)">
            <summary>
            Executes the block.
            </summary>
            <param name="nativeViewHierarchyManager">The native view hierarchy manager.</param>
        </member>
        <member name="T:ReactNative.UIManager.DependencyObjectExtensions">
            <summary>
            Extension methods for <see cref="T:Windows.UI.Xaml.DependencyObject"/>.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.DependencyObjectExtensions.SetPointerEvents(Windows.UI.Xaml.DependencyObject,ReactNative.UIManager.PointerEvents)">
            <summary>
            Sets the pointer events for the view.
            </summary>
            <param name="view">The view.</param>
            <param name="pointerEvents">The pointer events.</param>
        </member>
        <member name="M:ReactNative.UIManager.DependencyObjectExtensions.GetPointerEvents(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the pointer events for the view.
            </summary>
            <param name="view">The view.</param>
            <returns>The pointer events.</returns>
        </member>
        <member name="M:ReactNative.UIManager.DependencyObjectExtensions.SetReactCompoundView(Windows.UI.Xaml.DependencyObject,ReactNative.UIManager.IReactCompoundView)">
            <summary>
            Associates an implementation of IReactCompoundView with the view.
            </summary>
            <param name="view">The view.</param>
            <param name="compoundView">The implementation of IReactCompoundView.</param>
        </member>
        <member name="M:ReactNative.UIManager.DependencyObjectExtensions.GetReactCompoundView(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the implementation of IReactCompoundView associated with the view.
            </summary>
            <param name="view">The view.</param>
            <returns>
            The implementation of IReactCompoundView associated with the view. Defaults to
            an instance of ReactDefaultCompoundView when no other implementation has been
            provided.
            </returns>
        </member>
        <member name="M:ReactNative.UIManager.DependencyObjectExtensions.GetTag(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Get the React tag for the view instance. 
            </summary>
            <param name="view">The view instance.</param>
            <returns>The React tag.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if tag is not available for the view.
            </exception>
        </member>
        <member name="M:ReactNative.UIManager.DependencyObjectExtensions.HasTag(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Checks if a React tag is available for the view instance.
            </summary>
            <param name="view">The view instance.</param>
            <returns>
            <code>true</code> if the view has a tag, <code>false</code> otherwise.
            </returns>
        </member>
        <member name="M:ReactNative.UIManager.DependencyObjectExtensions.GetReactContext(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the <see cref="T:ReactNative.UIManager.ThemedReactContext"/> associated with the view
            instance.
            </summary>
            <param name="view">The view instance.</param>
            <returns>The context.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if context is not available for the view.
            </exception>
        </member>
        <member name="T:ReactNative.UIManager.DependencyObjectViewManager`2">
            <summary>
            Class responsible for knowing how to create and update views of a given
            type. It is also responsible for creating and updating
            <see cref="T:ReactNative.UIManager.ReactShadowNode"/> subclasses used for calculating position
            and size for the corresponding native view.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.DependencyObjectViewManager`2.Name">
            <summary>
            The name of this view manager. This will be the name used to 
            reference this view manager from JavaScript.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.DependencyObjectViewManager`2.ShadowNodeType">
            <summary>
            The <see cref="T:System.Type"/> instance that represents the type of shadow
            node that this manager will return from
            <see cref="M:ReactNative.UIManager.DependencyObjectViewManager`2.CreateShadowNodeInstance"/>.
            
            This method will be used in the bridge initialization phase to
            collect properties exposed using the <see cref="T:ReactNative.UIManager.Annotations.ReactPropAttribute"/>
            annotation from the <see cref="T:ReactNative.UIManager.ReactShadowNode"/> subclass.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.DependencyObjectViewManager`2.CommandsMap">
            <summary>
            The commands map for the view manager.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.DependencyObjectViewManager`2.ExportedCustomBubblingEventTypeConstants">
            <summary>
            The exported custom bubbling event types.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.DependencyObjectViewManager`2.ExportedCustomDirectEventTypeConstants">
            <summary>
            The exported custom direct event types.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.DependencyObjectViewManager`2.ExportedViewConstants">
            <summary>
            The exported view constants.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.DependencyObjectViewManager`2.NativeProperties">
            <summary>
            Creates a shadow node for the view manager.
            </summary>
            <returns>The shadow node instance.</returns>
        </member>
        <member name="M:ReactNative.UIManager.DependencyObjectViewManager`2.UpdateProperties(`0,ReactNative.UIManager.ReactStylesDiffMap)">
            <summary>
            Update the properties of the given view.
            </summary>
            <param name="viewToUpdate">The view to update.</param>
            <param name="props">The properties.</param>
        </member>
        <member name="M:ReactNative.UIManager.DependencyObjectViewManager`2.CreateView(ReactNative.UIManager.ThemedReactContext,ReactNative.Touch.JavaScriptResponderHandler)">
            <summary>
            Creates a view and installs event emitters on it.
            </summary>
            <param name="reactContext">The context.</param>
            <param name="jsResponderHandler">The responder handler.</param>
            <returns>The view.</returns>
        </member>
        <member name="M:ReactNative.UIManager.DependencyObjectViewManager`2.OnDropViewInstance(ReactNative.UIManager.ThemedReactContext,`0)">
            <summary>
            Called when view is detached from view hierarchy and allows for 
            additional cleanup by the <see cref="T:ReactNative.UIManager.IViewManager"/>
            subclass.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The view.</param>
            <remarks>
            Derived classes do not need to call this base method.
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.DependencyObjectViewManager`2.CreateShadowNodeInstance">
            <summary>
            This method should return the subclass of <see cref="T:ReactNative.UIManager.ReactShadowNode"/>
            which will be then used for measuring the position and size of the
            view. 
            </summary>
            <remarks>
            In most cases, this will just return an instance of
            <see cref="T:ReactNative.UIManager.ReactShadowNode"/>.
            </remarks>
            <returns>The shadow node instance.</returns>
        </member>
        <member name="M:ReactNative.UIManager.DependencyObjectViewManager`2.UpdateExtraData(`0,System.Object)">
            <summary>
            Implement this method to receive optional extra data enqueued from
            the corresponding instance of <see cref="T:ReactNative.UIManager.ReactShadowNode"/> in
            <see cref="M:ReactNative.UIManager.ReactShadowNode.OnCollectExtraUpdates(ReactNative.UIManager.UIViewOperationQueue)"/>.
            </summary>
            <param name="root">The root view.</param>
            <param name="extraData">The extra data.</param>
        </member>
        <member name="M:ReactNative.UIManager.DependencyObjectViewManager`2.ReceiveCommand(`0,System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Implement this method to receive events/commands directly from
            JavaScript through the <see cref="T:ReactNative.UIManager.UIManagerModule"/>.
            </summary>
            <param name="view">
            The view instance that should receive the command.
            </param>
            <param name="commandId">Identifer for the command.</param>
            <param name="args">Optional arguments for the command.</param>
        </member>
        <member name="M:ReactNative.UIManager.DependencyObjectViewManager`2.GetDimensions(`0)">
            <summary>
            Gets the dimensions of the view.
            </summary>
            <param name="view">The view.</param>
            <returns>The view dimensions.</returns>
        </member>
        <member name="M:ReactNative.UIManager.DependencyObjectViewManager`2.SetDimensions(`0,ReactNative.UIManager.Dimensions)">
            <summary>
            Sets the dimensions of the view.
            </summary>
            <param name="view">The view.</param>
            <param name="dimensions">The output buffer.</param>
        </member>
        <member name="M:ReactNative.UIManager.DependencyObjectViewManager`2.CreateViewInstance(ReactNative.UIManager.ThemedReactContext)">
            <summary>
            Creates a new view instance of type <typeparamref name="TDependencyObject"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <returns>The view instance.</returns>
        </member>
        <member name="M:ReactNative.UIManager.DependencyObjectViewManager`2.AddEventEmitters(ReactNative.UIManager.ThemedReactContext,`0)">
            <summary>
            Subclasses can override this method to install custom event 
            emitters on the given view.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The view instance.</param>
            <remarks>
            Consider overriding this method if your view needs to emit events
            besides basic touch events to JavaScript (e.g., scroll events).
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.DependencyObjectViewManager`2.OnAfterUpdateTransaction(`0)">
            <summary>
            Callback that will be triggered after all properties are updated in
            the current update transation (all <see cref="T:ReactNative.UIManager.Annotations.ReactPropAttribute"/> handlers
            for properties updated in the current transaction have been called).
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="T:ReactNative.UIManager.Dimensions">
            <summary>
            Simple structural type for containing dimensions.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.Dimensions.X">
            <summary>
            The X-coordinate.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.Dimensions.Y">
            <summary>
            The Y-coordinate.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.Dimensions.Width">
            <summary>
            The width.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.Dimensions.Height">
            <summary>
            The height.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.Dimensions.Equals(ReactNative.UIManager.Dimensions)">
            <summary>
            Checks if two <see cref="T:ReactNative.UIManager.Dimensions"/> instances are equal.
            </summary>
            <param name="other">The other object.</param>
            <returns>
            <code>true</code> if the instances are equal, otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:ReactNative.UIManager.Dimensions.Equals(System.Object)">
            <summary>
            Checks if two instances are equal.
            </summary>
            <param name="obj">The other object.</param>
            <returns>
            <code>true</code> if the instances are equal, otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:ReactNative.UIManager.Dimensions.GetHashCode">
            <summary>
            Gets a hash code for the instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:ReactNative.UIManager.Dimensions.op_Equality(ReactNative.UIManager.Dimensions,ReactNative.UIManager.Dimensions)">
            <summary>
            Checks if two <see cref="T:ReactNative.UIManager.Dimensions"/> instances are equal.
            </summary>
            <param name="x">The first instance.</param>
            <param name="y">The second instance.</param>
            <returns>
            <code>true</code> if the instances are equal, otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:ReactNative.UIManager.Dimensions.op_Inequality(ReactNative.UIManager.Dimensions,ReactNative.UIManager.Dimensions)">
            <summary>
            Checks if two <see cref="T:ReactNative.UIManager.Dimensions"/> instances are not equal.
            </summary>
            <param name="x">The first instance.</param>
            <param name="y">The second instance.</param>
            <returns>
            <code>true</code> if the instances are equal, otherwise <code>false</code>.
            </returns>
        </member>
        <member name="F:ReactNative.UIManager.EdgeSpacing.Left">
            <summary>
            Spacing type that represents the left direction. E.g. <code>marginLeft</code>.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.EdgeSpacing.Top">
            <summary>
            Spacing type that represents the top direction. E.g. <code>marginTop</code>.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.EdgeSpacing.Right">
            <summary>
            Spacing type that represents the right direction. E.g. <code>marginRight</code>.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.EdgeSpacing.Bottom">
            <summary>
            Spacing type that represents the bottom direction. E.g. <code>marginBottom</code>.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.EdgeSpacing.Start">
            <summary>
            Spacing type that represents start direction e.g. left in left-to-right, right in right-to-left.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.EdgeSpacing.End">
            <summary>
            Spacing type that represents end direction e.g. right in left-to-right, left in right-to-left.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.EdgeSpacing.Horizontal">
            <summary>
            Spacing type that represents horizontal direction (left and right). E.g.
            <code>marginHorizontal</code>.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.EdgeSpacing.Vertical">
            <summary>
            Spacing type that represents vertical direction (top and bottom). E.g. <code>marginVertical</code>.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.EdgeSpacing.All">
            <summary>
            Spacing type that represents all directions (left, top, right, bottom). E.g. <code>margin</code>.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.EdgeSpacing.#ctor">
            <summary>
            Instantiates a <see cref="T:ReactNative.UIManager.EdgeSpacing"/>
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.EdgeSpacing.#ctor(Facebook.Yoga.YogaValue)">
            <summary>
            Instantiates a <see cref="T:ReactNative.UIManager.EdgeSpacing"/>.
            </summary>
            <param name="defaultValue">The default spacing value.</param>
        </member>
        <member name="M:ReactNative.UIManager.EdgeSpacing.Set(System.Int32,Facebook.Yoga.YogaValue)">
            <summary>
            Set a spacing value.
            </summary>
            <param name="spacingType">
            One of <see cref="F:ReactNative.UIManager.EdgeSpacing.Left" />, <see cref="F:ReactNative.UIManager.EdgeSpacing.Top" />, <see cref="F:ReactNative.UIManager.EdgeSpacing.Right" />, <see cref="F:ReactNative.UIManager.EdgeSpacing.Bottom" />,
            <see cref="F:ReactNative.UIManager.EdgeSpacing.Vertical" />, <see cref="F:ReactNative.UIManager.EdgeSpacing.Horizontal" />, <see cref="F:ReactNative.UIManager.EdgeSpacing.All" />.
            </param>
            <param name="value">the value for this direction.</param>
            <returns>
            <code>true</code> if the spacing has changed, or <code>false</code>
            if the same value was already set.
            </returns>
        </member>
        <member name="M:ReactNative.UIManager.EdgeSpacing.Get(System.Int32)">
            <summary>
            Get the spacing for a direction. This takes into account any default values that have been Set.
            </summary>
            <param name="spacingType">
            One of <see cref="F:ReactNative.UIManager.EdgeSpacing.Left"/>, <see cref="F:ReactNative.UIManager.EdgeSpacing.Top" />, <see cref="F:ReactNative.UIManager.EdgeSpacing.Right" />, <see cref="F:ReactNative.UIManager.EdgeSpacing.Bottom" />.
            </param>
            <returns>The spacing value.</returns>
        </member>
        <member name="M:ReactNative.UIManager.EdgeSpacing.GetRaw(System.Int32)">
            <summary>
            Get the raw value (that was Set using <see cref="M:ReactNative.UIManager.EdgeSpacing.Set(System.Int32,Facebook.Yoga.YogaValue)" />), without taking into account
            any default values.
            </summary>
            <param name="spacingType">
            One of <see cref="F:ReactNative.UIManager.EdgeSpacing.Left" />, <see cref="F:ReactNative.UIManager.EdgeSpacing.Top" />, <see cref="F:ReactNative.UIManager.EdgeSpacing.Right" />,
            <see cref="F:ReactNative.UIManager.EdgeSpacing.Bottom" />, <see cref="F:ReactNative.UIManager.EdgeSpacing.Vertical" />, <see cref="F:ReactNative.UIManager.EdgeSpacing.Horizontal" />, 
            <see cref="F:ReactNative.UIManager.EdgeSpacing.All" />.
            </param>
            <returns>The raw spacing value.</returns>
        </member>
        <member name="M:ReactNative.UIManager.EdgeSpacing.Reset">
            <summary>
            Resets the spacing instance to its default state. This method is meant to be used when
            recycling <see cref="T:ReactNative.UIManager.EdgeSpacing" /> instances.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.EdgeSpacing.GetWithFallback(System.Int32,System.Int32)">
            <summary>
            Try to get start value and fallback to given type if not defined. This is used privately
            by the layout engine as a more efficient way to fetch direction-aware values by
            avoid extra method invocations.
            </summary>
            <param name="spacingType">The preferred spacing type.</param>
            <param name="fallbackType">The fallback spacing type.</param>
            <returns>The spacing value.</returns>
        </member>
        <member name="T:ReactNative.UIManager.Events.Event">
            <summary>
            A UI event that can be dispatched to JavaScript.
            </summary>
            <remarks>
            For dispatching events, <see cref="M:ReactNative.UIManager.Events.EventDispatcher.DispatchEvent(ReactNative.UIManager.Events.Event)"/>
            should be used. Once the object is passed to the <see cref="T:ReactNative.UIManager.Events.EventDispatcher"/>
            it should no longer be used, as <see cref="T:ReactNative.UIManager.Events.EventDispatcher"/> may
            decide to recycle that object (by calling <see cref="M:ReactNative.UIManager.Events.Event.Dispose"/>.
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.Events.Event.#ctor(System.Int32)">
            <summary>
            Base constructor for <see cref="T:ReactNative.UIManager.Events.Event"/>.
            </summary>
            <param name="viewTag">The view tag.</param>
        </member>
        <member name="P:ReactNative.UIManager.Events.Event.EventName">
            <summary>
            The name of the event as registered in JavaScript.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Events.Event.ViewTag">
            <summary>
            The ID of the view that generated this event.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Events.Event.Timestamp">
            <summary>
            The time at which the event happened in the 
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Events.Event.CanCoalesce">
            <summary>
            Signals if the event can be coalesced.
            </summary>
            <remarks>
            Return false if the event can never be coalesced.
            </remarks>
        </member>
        <member name="P:ReactNative.UIManager.Events.Event.IsInitialized">
            <summary>
            Signals if the event has been initialized.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Events.Event.CoalescingKey">
            <summary>
            A key used to determine which other events of this type this event
            can be coalesced with. For example, touch move events should only
            be coalesced within a single gesture, so a coalescing key there
            would be the unique gesture identifier.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Events.Event.SortingKey">
            <summary>
            A key used to guarantee that two events with relative sequencing
            requirements are dispatched in order.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.Events.Event.Coalesce(ReactNative.UIManager.Events.Event)">
            <summary>
            Given two events, coalesce them into a single event that will be
            sent to JavaScript instead of two separate events.
            </summary>
            <param name="otherEvent">The other event.</param>
            <returns>The coalesced event.</returns>
            <remarks>
            By default, just chooses the one that is more recent. Two events
            will only ever try to be coalesced if they have the same event
            name, view ID, and coalescing key.
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.Events.Event.Dispatch(ReactNative.UIManager.Events.RCTEventEmitter)">
            <summary>
            Dispatch this event to JavaScript using the given event emitter.
            </summary>
            <param name="eventEmitter">The event emitter.</param>
        </member>
        <member name="M:ReactNative.UIManager.Events.Event.Dispose">
            <summary>
            Disposes the event.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.Events.Event.Init(System.Int32,System.Int64)">
            <summary>
            Initializes the event.
            </summary>
            <param name="viewTag">The view tag.</param>
            <param name="timestamp">The timestamp.</param>
            <remarks>
            This method must be called before the event is sent to the event
            dispatcher.
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.Events.Event.OnDispose">
            <summary>
            Called when the <see cref="T:ReactNative.UIManager.Events.EventDispatcher"/> is done with an 
            event, either because it was dispatched or because it was coalesced
            with another <see cref="T:ReactNative.UIManager.Events.Event"/>.
            </summary>
            <remarks>
            The derived class does not need to call this base method.
            </remarks>
        </member>
        <member name="T:ReactNative.UIManager.Events.EventDispatcher">
            <summary>
            Class responsible for dispatching UI events to JavaScript. The main
            purpose of this class is to act as an intermediary between UI code
            generating events and JavaScript, making sure we don't send more events
            than JavaScript can process.
            
            To use it, create a subclass of <see cref="T:ReactNative.UIManager.Events.Event"/> and call
            <see cref="M:ReactNative.UIManager.Events.EventDispatcher.DispatchEvent(ReactNative.UIManager.Events.Event)"/> whenever there is a UI event to
            dispatch.
            
            This class differs from the Android implementation of React as there is
            no analogy to the choreographer in UWP. Instead, there is a self-managed
            callback that coalesces events on the JavaScript thread.
            
            If JavaScript is taking a long time processing events, then the UI
            events generated on the dispatcher thread can be coalesced into fewer
            events so that, when the dispatch occurs, we do not overload JavaScript
            with a ton of events and cause it to get even farther behind.
            
            Ideally, this is unnecessary and JavaScript is fast enough to process
            all the events each frame, but this is a reasonable precautionary 
            measure.
            </summary>
            <remarks>
            Event cookies are used to coalesce events. They are made up of the
            event type ID, view tag, and a custom coalescing key.
            
            Event Cookie Composition:
            VIEW_TAG_MASK =       0x00000000ffffffff
            EVENT_TYPE_ID_MASK =  0x0000ffff00000000
            COALESCING_KEY_MASK = 0xffff000000000000
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.Events.EventDispatcher.#ctor(ReactNative.Bridge.ReactContext)">
            <summary>
            Instantiates the <see cref="T:ReactNative.UIManager.Events.EventDispatcher"/>.
            </summary>
            <param name="reactContext">The context.</param>
        </member>
        <member name="M:ReactNative.UIManager.Events.EventDispatcher.DispatchEvent(ReactNative.UIManager.Events.Event)">
            <summary>
            Sends the given <see cref="T:ReactNative.UIManager.Events.Event"/> to JavaScript, coalescing
            events if JavaScript is backed up.
            </summary>
            <param name="event">The event.</param>
        </member>
        <member name="M:ReactNative.UIManager.Events.EventDispatcher.AddListener(ReactNative.UIManager.Events.IEventDispatcherListener)">
            <summary>
            Adds a listener to this <see cref="T:ReactNative.UIManager.Events.EventDispatcher"/>. 
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:ReactNative.UIManager.Events.EventDispatcher.RemoveListener(ReactNative.UIManager.Events.IEventDispatcherListener)">
            <summary>
            Removes a listener from this <see cref="T:ReactNative.UIManager.Events.EventDispatcher"/>. 
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:ReactNative.UIManager.Events.EventDispatcher.OnResume">
            <summary>
            Called when the host receives the resume event.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.Events.EventDispatcher.OnDestroy">
            <summary>
            Called when the host is shutting down.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.Events.EventDispatcher.OnSuspend">
            <summary>
            Called when the host receives the suspend event.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.Events.EventDispatcher.OnReactInstanceDispose">
            <summary>
            Called before the React instance is disposed.
            </summary>
        </member>
        <member name="T:ReactNative.UIManager.Events.IEventDispatcherListener">
            <summary>
            Interface used to intercept events dispatched by <see cref="T:ReactNative.UIManager.Events.EventDispatcher"/>.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.Events.IEventDispatcherListener.OnEventDispatch(ReactNative.UIManager.Events.Event)">
            <summary>
            Called on every time an event is dispatched using <see cref="M:ReactNative.UIManager.Events.EventDispatcher.DispatchEvent(ReactNative.UIManager.Events.Event)"/>. 
            Will be called from the same thread that the event is being 
            dispatched from.
            </summary>
            <param name="event">Event that was dispatched.</param>
        </member>
        <member name="T:ReactNative.UIManager.Events.RCTEventEmitter">
            <summary>
            JavaScript event emitter.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.Events.RCTEventEmitter.receiveEvent(System.Int32,System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Receive an event.
            </summary>
            <param name="targetTag">The target tag.</param>
            <param name="eventName">The event name.</param>
            <param name="event">The event data.</param>
        </member>
        <member name="M:ReactNative.UIManager.Events.RCTEventEmitter.receiveTouches(System.String,Newtonsoft.Json.Linq.JArray,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Receives touches.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="touches">The touches.</param>
            <param name="changedIndexes">The changed indices.</param>
        </member>
        <member name="T:ReactNative.UIManager.Events.TouchEventType">
            <summary>
            Touch event types that the JavaScript module <see cref="T:ReactNative.UIManager.Events.RCTEventEmitter"/>
            understands.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.Events.TouchEventType.Start">
            <summary>
            Touch start event type.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.Events.TouchEventType.End">
            <summary>
            Touch end event type.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.Events.TouchEventType.Move">
            <summary>
            Touch move event type.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.Events.TouchEventType.Cancel">
            <summary>
            Touch cancel event type.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.Events.TouchEventType.Entered">
            <summary>
            Pointer entered event type.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.Events.TouchEventType.Exited">
            <summary>
            Pointer exited event type.
            </summary>
        </member>
        <member name="T:ReactNative.UIManager.IReactCompoundView">
            <summary>
            Interface consisting of methods which are relevant to views which contain
            visuals that have react tags but are not rendered using UIElements.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.IReactCompoundView.GetReactTagAtPoint(Windows.UI.Xaml.UIElement,Windows.Foundation.Point)">
            <summary>
            Returns the react tag rendered at point in reactView. The view
            is not expected to do hit testing on its UIElement descendants. Rather,
            this is useful for views which are composed of visuals that are associated
            with react tags but the visuals are not UIElements.
            </summary>
            <param name="reactView">The react view to do hit testing within.</param>
            <param name="point">The point to hit test in coordinates that are relative to the view.</param>
            <returns>The react tag rendered at point in reactView.</returns>
        </member>
        <member name="T:ReactNative.UIManager.IViewManager">
            <summary>
            Interface responsible for knowing how to create and update views of a given
            type. It is also responsible for creating and updating
            <see cref="T:ReactNative.UIManager.ReactShadowNode"/> subclasses used for calculating position
            and size for the corresponding native view.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.IViewManager.Name">
            <summary>
            The name of this view manager. This will be the name used to 
            reference this view manager from JavaScript.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.IViewManager.ShadowNodeType">
            <summary>
            The <see cref="T:System.Type"/> instance that represents the type of shadow
            node that this manager will return from
            <see cref="M:ReactNative.UIManager.IViewManager.CreateShadowNodeInstance"/>.
            
            This method will be used in the bridge initialization phase to
            collect properties exposed using the <see cref="T:ReactNative.UIManager.Annotations.ReactPropAttribute"/>
            annotation from the <see cref="T:ReactNative.UIManager.ReactShadowNode"/> subclass.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.IViewManager.CommandsMap">
            <summary>
            The commands map for the view manager.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.IViewManager.ExportedCustomBubblingEventTypeConstants">
            <summary>
            The exported custom bubbling event types.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.IViewManager.ExportedCustomDirectEventTypeConstants">
            <summary>
            The exported custom direct event types.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.IViewManager.ExportedViewConstants">
            <summary>
            The exported view constants.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.IViewManager.NativeProperties">
            <summary>
            Creates a shadow node for the view manager.
            </summary>
            <returns>The shadow node instance.</returns>
        </member>
        <member name="M:ReactNative.UIManager.IViewManager.UpdateProperties(Windows.UI.Xaml.DependencyObject,ReactNative.UIManager.ReactStylesDiffMap)">
            <summary>
            Update the properties of the given view.
            </summary>
            <param name="viewToUpdate">The view to update.</param>
            <param name="props">The properties.</param>
        </member>
        <member name="M:ReactNative.UIManager.IViewManager.CreateView(ReactNative.UIManager.ThemedReactContext,ReactNative.Touch.JavaScriptResponderHandler)">
            <summary>
            Creates a view and installs event emitters on it.
            </summary>
            <param name="reactContext">The context.</param>
            <param name="responderHandler">The responder handler.</param>
            <returns>The view.</returns>
        </member>
        <member name="M:ReactNative.UIManager.IViewManager.OnDropViewInstance(ReactNative.UIManager.ThemedReactContext,Windows.UI.Xaml.DependencyObject)">
            <summary>
            Called when view is detached from view hierarchy and allows for 
            additional cleanup by the <see cref="T:ReactNative.UIManager.IViewManager"/>
            subclass.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The view.</param>
            <remarks>
            Derived classes do not need to call this base method.
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.IViewManager.CreateShadowNodeInstance">
            <summary>
            This method should return the subclass of <see cref="T:ReactNative.UIManager.ReactShadowNode"/>
            which will be then used for measuring the position and size of the
            view. 
            </summary>
            <remarks>
            In most cases, this will just return an instance of
            <see cref="T:ReactNative.UIManager.ReactShadowNode"/>.
            </remarks>
            <returns>The shadow node instance.</returns>
        </member>
        <member name="M:ReactNative.UIManager.IViewManager.UpdateExtraData(Windows.UI.Xaml.DependencyObject,System.Object)">
            <summary>
            Implement this method to receive optional extra data enqueued from
            the corresponding instance of <see cref="T:ReactNative.UIManager.ReactShadowNode"/> in
            <see cref="M:ReactNative.UIManager.ReactShadowNode.OnCollectExtraUpdates(ReactNative.UIManager.UIViewOperationQueue)"/>.
            </summary>
            <param name="root">The root view.</param>
            <param name="extraData">The extra data.</param>
        </member>
        <member name="M:ReactNative.UIManager.IViewManager.ReceiveCommand(Windows.UI.Xaml.DependencyObject,System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Implement this method to receive events/commands directly from
            JavaScript through the <see cref="N:ReactNative.UIManager"/>.
            </summary>
            <param name="view">
            The view instance that should receive the command.
            </param>
            <param name="commandId">Identifer for the command.</param>
            <param name="args">Optional arguments for the command.</param>
        </member>
        <member name="M:ReactNative.UIManager.IViewManager.GetDimensions(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the dimensions of the view.
            </summary>
            <param name="view">The view.</param>
            <returns>The view dimensions.</returns>
        </member>
        <member name="M:ReactNative.UIManager.IViewManager.SetDimensions(Windows.UI.Xaml.DependencyObject,ReactNative.UIManager.Dimensions)">
            <summary>
            Sets the dimensions of the view.
            </summary>
            <param name="view">The view.</param>
            <param name="dimensions">The dimensions.</param>
        </member>
        <member name="T:ReactNative.UIManager.IViewParentManager">
            <summary>
            Interface providing child management API for view managers.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.IViewParentManager.NeedsCustomLayoutForChildren">
            <summary>
            Signals whether the view type needs to handle laying out its own
            children instead of deferring to the standard CSS layout algorithm.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.IViewParentManager.AddView(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyObject,System.Int32)">
            <summary>
            Adds a child at the given index.
            </summary>
            <param name="parent">The parent view.</param>
            <param name="child">The child view.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:ReactNative.UIManager.IViewParentManager.GetChildCount(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the number of children in the view parent.
            </summary>
            <param name="parent">The view parent.</param>
            <returns>The number of children.</returns>
        </member>
        <member name="M:ReactNative.UIManager.IViewParentManager.GetChildAt(Windows.UI.Xaml.DependencyObject,System.Int32)">
            <summary>
            Gets the child at the given index.
            </summary>
            <param name="parent">The parent view.</param>
            <param name="index">The index.</param>
            <returns>The child view.</returns>
        </member>
        <member name="M:ReactNative.UIManager.IViewParentManager.RemoveChildAt(Windows.UI.Xaml.DependencyObject,System.Int32)">
            <summary>
            Removes the child at the given index.
            </summary>
            <param name="parent">The view parent.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:ReactNative.UIManager.IViewParentManager.RemoveAllChildren(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Removes all children from the view parent.
            </summary>
            <param name="parent">The view parent.</param>
        </member>
        <member name="T:ReactNative.UIManager.LayoutAnimation.AnimatedPropertyType">
            <summary>
            The enum types to indicate the type of animation that needs to be 
            invoked for the LayoutAnimation API. 
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.LayoutAnimation.AnimatedPropertyType.Opacity">
            <summary>
            The opacity property.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.LayoutAnimation.AnimatedPropertyType.ScaleXY">
            <summary>
            The X,Y scale property.
            </summary>
        </member>
        <member name="T:ReactNative.UIManager.LayoutAnimation.BaseLayoutAnimation">
            <summary>
            Class responsible for default layout animation.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.LayoutAnimation.BaseLayoutAnimation.IsReverse">
            <summary>
            Signals if the animation should be performed in reverse.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.LayoutAnimation.BaseLayoutAnimation.IsValid">
            <summary>
            Signals if the animation configuration is valid.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.LayoutAnimation.BaseLayoutAnimation.CreateAnimationCore(ReactNative.UIManager.IViewManager,Windows.UI.Xaml.FrameworkElement,ReactNative.UIManager.Dimensions)">
            <summary>
            Create a <see cref="T:Windows.UI.Xaml.Media.Animation.Storyboard"/> to be used to animate the view, 
            based on the animation configuration supplied at initialization
            time and the new view position and size.
            </summary>
            <param name="viewManager">The view manager for the view.</param>
            <param name="view">The view to create the animation for.</param>
            <param name="dimensions">The view dimensions.</param>
        </member>
        <member name="T:ReactNative.UIManager.LayoutAnimation.InterpolationType">
            <summary>
            An enum signaling the interpolation type.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.LayoutAnimation.InterpolationType.Linear">
            <summary>
            Linear interpolation type.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.LayoutAnimation.InterpolationType.EaseIn">
            <summary>
            Ease-in interpolation type.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.LayoutAnimation.InterpolationType.EaseOut">
            <summary>
            Ease-out interpolation type.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.LayoutAnimation.InterpolationType.EaseInEaseOut">
            <summary>
            Ease-in, ease-out interpolation type.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.LayoutAnimation.InterpolationType.Spring">
            <summary>
            Spring interpolation type.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.LayoutAnimation.InterpolationTypeExtensions.s_spring">
            <remarks>
            We're currently using bounce ease because of an exception thrown by
            XAML if the width or height property shrinks below zero.
            TODO: implement proper spring interpolation function.
            </remarks>
        </member>
        <member name="T:ReactNative.UIManager.LayoutAnimation.LayoutAnimation">
            <summary>
            Class responsible for parsing and converting layout animation data into
            a native <see cref="T:Windows.UI.Xaml.Media.Animation.Storyboard"/> in order to animate layout when a
            value configuration has been supplied by the application.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.LayoutAnimation.LayoutAnimation.IsValid">
            <summary>
            Signals if the animation configuration is valid.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.LayoutAnimation.LayoutAnimation.Interpolator">
            <summary>
            The easing function for the animation.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.LayoutAnimation.LayoutAnimation.AnimatedProperty">
            <summary>
            The animated property type.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.LayoutAnimation.LayoutAnimation.Duration">
            <summary>
            The layout animation duration.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.LayoutAnimation.LayoutAnimation.Delay">
            <summary>
            The layout animation delay.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.LayoutAnimation.LayoutAnimation.CreateAnimation(ReactNative.UIManager.IViewManager,Windows.UI.Xaml.FrameworkElement,ReactNative.UIManager.Dimensions)">
            <summary>
            Create a <see cref="T:Windows.UI.Xaml.Media.Animation.Storyboard"/> to be used to animate the view, 
            based on the animation configuration supplied at initialization
            time and the new view position and size.
            </summary>
            <param name="viewManager">The view manager for the view.</param>
            <param name="view">The view to create the animation for.</param>
            <param name="dimensions">The view dimensions.</param>
            <returns>The storyboard.</returns>
        </member>
        <member name="M:ReactNative.UIManager.LayoutAnimation.LayoutAnimation.InitializeFromConfig(Newtonsoft.Json.Linq.JObject,System.Int32)">
            <summary>
            Initializes the layout animation from configuration.
            </summary>
            <param name="data">The configuration.</param>
            <param name="globalDuration">The duration.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutAnimation.LayoutAnimation.Reset">
            <summary>
            Resets the layout animation.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.LayoutAnimation.LayoutAnimation.CreateAnimationCore(ReactNative.UIManager.IViewManager,Windows.UI.Xaml.FrameworkElement,ReactNative.UIManager.Dimensions)">
            <summary>
            Create a <see cref="T:Windows.UI.Xaml.Media.Animation.Storyboard"/> to be used to animate the view, 
            based on the animation configuration supplied at initialization
            time and the new view position and size.
            </summary>
            <param name="viewManager">The view manager for the view.</param>
            <param name="view">The view to create the animation for.</param>
            <param name="dimensions">The view dimensions.</param>
            <returns>The storyboard.</returns>
        </member>
        <member name="T:ReactNative.UIManager.LayoutAnimation.LayoutAnimationController">
            <summary>
            Class responsible for animation layout changes, if a valid animation
            configuration has been supplied. If animation is not available, the
            layout change is applied immediately instead of animating.
            </summary>
            <remarks>
            TODO: Invoke success callback at the end of the animation.
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.LayoutAnimation.LayoutAnimationController.InitializeFromConfig(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes the layout animation.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutAnimation.LayoutAnimationController.ShouldAnimateLayout(Windows.UI.Xaml.FrameworkElement)">
            <summary>
            Determines if <see cref="T:Windows.UI.Xaml.FrameworkElement"/> should apply layout animation.
            </summary>
            <param name="view">The view to animate.</param>
            <returns>
            <code>true</code> if the layout operation should be animated, 
            otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:ReactNative.UIManager.LayoutAnimation.LayoutAnimationController.ApplyLayoutUpdate(ReactNative.UIManager.IViewManager,Windows.UI.Xaml.FrameworkElement,ReactNative.UIManager.Dimensions)">
            <summary>
            Applies a layout animation for the given view on the transition to
            the given coordinates and dimensions.
            </summary>
            <param name="viewManager">The view manager for the native view.</param>
            <param name="view">The native view to animate.</param>
            <param name="dimensions">The new view dimensions to animate to.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutAnimation.LayoutAnimationController.DeleteView(ReactNative.UIManager.IViewManager,Windows.UI.Xaml.FrameworkElement,System.Action)">
            <summary>
            Animate a view deletion using the layout animation configuration
            supplied during initialization.
            </summary>
            <param name="viewManager">The view manager for the native view.</param>
            <param name="view">The view to animate.</param>
            <param name="finally">
            Called once the animation is finished, should be used to completely
            remove the view.
            </param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutAnimation.LayoutAnimationController.Reset">
            <summary>
            Reset the animation manager.
            </summary>
        </member>
        <member name="T:ReactNative.UIManager.LayoutAnimation.LayoutCreateAnimation">
            <summary>
            Layout animation manager for newly created views.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.LayoutAnimation.LayoutCreateAnimation.IsReverse">
            <summary>
            Signals if the animation should be performed in reverse.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.LayoutAnimation.LayoutCreateAnimation.CreateAnimationCore(ReactNative.UIManager.IViewManager,Windows.UI.Xaml.FrameworkElement,ReactNative.UIManager.Dimensions)">
            <summary>
            Create an observable animation to be used to animate the view, 
            based on the animation configuration supplied at initialization
            time and the new view position and size.
            </summary>
            <param name="viewManager">The view manager for the view.</param>
            <param name="view">The view to create the animation for.</param>
            <param name="dimensions">The view dimensions</param>
            <returns>
            An observable sequence that starts an animation when subscribed to,
            stops the animation when disposed, and that completes 
            simultaneously with the underlying animation.
            </returns>
        </member>
        <member name="T:ReactNative.UIManager.LayoutAnimation.LayoutDeleteAnimation">
            <summary>
            Layout animation for deleted views.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.LayoutAnimation.LayoutDeleteAnimation.IsReverse">
            <summary>
            Signals if the animation should be performed in reverse.
            </summary>
        </member>
        <member name="T:ReactNative.UIManager.LayoutAnimation.LayoutUpdateAnimation">
            <summary>
            Defines which <see cref="T:Windows.UI.Xaml.Media.Animation.Storyboard"/> should be used for animating
            layout updates for <see cref="T:Windows.UI.Xaml.FrameworkElement"/>.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.LayoutAnimation.LayoutUpdateAnimation.IsValid">
            <summary>
            Signals if the animation configuration is valid.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.LayoutAnimation.LayoutUpdateAnimation.CreateAnimationCore(ReactNative.UIManager.IViewManager,Windows.UI.Xaml.FrameworkElement,ReactNative.UIManager.Dimensions)">
            <summary>
            Create a <see cref="T:Windows.UI.Xaml.Media.Animation.Storyboard"/> to be used to animate the view, 
            based on the animation configuration supplied at initialization
            time and the new view position and size.
            </summary>
            <param name="viewManager">The view manager for the view.</param>
            <param name="view">The view to create the animation for.</param>
            <param name="dimensions">The view dimensions.</param>
            <returns>The storyboard.</returns>
        </member>
        <member name="T:ReactNative.UIManager.LayoutShadowNode">
            <summary>
            Shadow node subclass that supplies setters for base view layout
            properties such as width, height, flex properties, borders, etc.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.#ctor">
            <summary>
            Instantiates a <see cref="T:ReactNative.UIManager.LayoutShadowNode"/>.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.#ctor(System.Boolean)">
            <summary>
            Instantiates a <see cref="T:ReactNative.UIManager.LayoutShadowNode"/>. 
            </summary>
            <param name="isVirtual">
            <code>true</code> if the node is virtual, otherwise <code>false</code>.
            </param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetWidth(Newtonsoft.Json.Linq.JValue)">
            <summary>
            Set the width of the shadow node.
            </summary>
            <param name="width">The width.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetMinWidth(Newtonsoft.Json.Linq.JValue)">
            <summary>
            Sets the minimum width of the shadow node.
            </summary>
            <param name="minWidth">The minimum width.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetMaxWidth(Newtonsoft.Json.Linq.JValue)">
            <summary>
            Sets the maximum width of the shadow node.
            </summary>
            <param name="maxWidth">The maximum width.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetHeight(Newtonsoft.Json.Linq.JValue)">
            <summary>
            Set the heigth of the shadow node.
            </summary>
            <param name="height">The height.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetMinHeight(Newtonsoft.Json.Linq.JValue)">
            <summary>
            Sets the minimum height of the shadow node.
            </summary>
            <param name="minHeight">The minimum height.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetMaxHeight(Newtonsoft.Json.Linq.JValue)">
            <summary>
            Sets the maximum height of the shadow node.
            </summary>
            <param name="maxHeight">The maximum height.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetFlex(System.Single)">
            <summary>
            Sets the flex of the shadow node.
            </summary>
            <param name="flex">The flex value.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetFlexGrow(System.Single)">
            <summary>
            Sets the flex grow of the shadow node.
            </summary>
            <param name="flexGrow">The flex grow value.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetFlexShrink(System.Single)">
            <summary>
            Sets the flex shrink of the shadow node.
            </summary>
            <param name="flexShrink">The flex shrink value.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetFlexBasis(System.Single)">
            <summary>
            Sets the flex basis of the shadow node.
            </summary>
            <param name="flexBasis">The flex basis value.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetAspectRatio(System.Single)">
            <summary>
            Sets the aspect ratio of the shadow node.
            </summary>
            <param name="aspectRatio">The aspect ratio.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetFlexDirection(System.String)">
            <summary>
            Sets the flex direction of the shadow node.
            </summary>
            <param name="flexDirection">The flex direction.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetFlexWrap(System.String)">
            <summary>
            Sets the wrap property on the shadow node.
            </summary>
            <param name="flexWrap">The wrap.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetAlignSelf(System.String)">
            <summary>
            Sets the self alignment of the shadow node.
            </summary>
            <param name="alignSelf">The align self property.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetAlignItems(System.String)">
            <summary>
            Sets the item alignment for the shadow node.
            </summary>
            <param name="alignItems">The item alignment.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetAlignContent(System.String)">
            <summary>
            Sets the content alignment.
            </summary>
            <param name="alignContent">The content alignment.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetJustifyContent(System.String)">
            <summary>
            Sets the content justification.
            </summary>
            <param name="justifyContent">The content justification.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetOverflow(System.String)">
            <summary>
            Sets the overflow of the shadow node.
            </summary>
            <param name="overflow">The overflow</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetDisplay(System.String)">
            <summary>
            Sets the display mode.
            </summary>
            <param name="display">The display mode.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetMargins(System.Int32,Newtonsoft.Json.Linq.JValue)">
            <summary>
            Sets the margins of the shadow node.
            </summary>
            <param name="index">The spacing type index.</param>
            <param name="margin">The margin value.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetPaddings(System.Int32,Newtonsoft.Json.Linq.JValue)">
            <summary>
            Sets the paddings of the shadow node.
            </summary>
            <param name="index">The spacing type index.</param>
            <param name="padding">The padding value.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetBorderWidth(System.Int32,System.Single)">
            <summary>
            Sets the border width properties for the shadow node.
            </summary>
            <param name="index">The border spacing type index.</param>
            <param name="borderWidth">The border width.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetPositionValues(System.Int32,Newtonsoft.Json.Linq.JValue)">
            <summary>
            Sets the position of the shadow node.
            </summary>
            <param name="index">The spacing type index.</param>
            <param name="position">The position value.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetPosition(System.String)">
            <summary>
            Sets the position of the shadow node.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:ReactNative.UIManager.LayoutShadowNode.SetShouldNotifyOnLayout(System.Boolean)">
            <summary>
            Sets if the view should send an event on layout.
            </summary>
            <param name="shouldNotifyOnLayout">
            The flag signaling if the view should sent an event on layout.
            </param>
        </member>
        <member name="T:ReactNative.UIManager.NativeViewHierarchyManager">
            <summary>
            Delegate of <see cref="T:ReactNative.UIManager.UIManagerModule"/> that owns the native view
            hierarchy and mapping between native view names used in JavaScript and
            corresponding instances of <see cref="T:ReactNative.UIManager.IViewManager"/>. The 
            <see cref="T:ReactNative.UIManager.UIManagerModule"/> communicates with this class by it's
            public interface methods:
            - <see cref="M:ReactNative.UIManager.NativeViewHierarchyManager.UpdateProperties(System.Int32,ReactNative.UIManager.ReactStylesDiffMap)"/>
            - <see cref="M:ReactNative.UIManager.NativeViewHierarchyManager.UpdateLayout(System.Int32,System.Int32,ReactNative.UIManager.Dimensions)"/>
            - <see cref="M:ReactNative.UIManager.NativeViewHierarchyManager.CreateView(ReactNative.UIManager.ThemedReactContext,System.Int32,System.String,ReactNative.UIManager.ReactStylesDiffMap)"/>
            - <see cref="M:ReactNative.UIManager.NativeViewHierarchyManager.ManageChildren(System.Int32,System.Int32[],ReactNative.UIManager.ViewAtIndex[],System.Int32[])"/>
            executing all the scheduled operations at the end of the JavaScript batch.
            </summary>
            <remarks>
            All native view management methods listed above must be called from the
            dispatcher thread.
            
            The <see cref="T:ReactNative.Bridge.ReactContext"/> instance that is passed to views that
            this manager creates differs from the one that we pass to the
            constructor. Instead we wrap the provided instance of 
            <see cref="T:ReactNative.Bridge.ReactContext"/> in an instance of <see cref="T:ReactNative.UIManager.ThemedReactContext"/>
            that additionally provides a correct theme based on the root view for
            a view tree that we attach newly created views to. Therefore this view
            manager will create a copy of <see cref="T:ReactNative.UIManager.ThemedReactContext"/> that
            wraps the instance of <see cref="T:ReactNative.Bridge.ReactContext"/> for each root view
            added to the manager (see
            <see cref="M:ReactNative.UIManager.NativeViewHierarchyManager.AddRootView(System.Int32,ReactNative.UIManager.SizeMonitoringCanvas,ReactNative.UIManager.ThemedReactContext)"/>).
            
            TODO: 
            1) AnimationRegistry
            2) ShowPopupMenu
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyManager.#ctor(ReactNative.UIManager.ViewManagerRegistry)">
            <summary>
            Instantiates the <see cref="T:ReactNative.UIManager.NativeViewHierarchyManager"/>.
            </summary>
            <param name="viewManagers">The view manager registry.</param>
        </member>
        <member name="P:ReactNative.UIManager.NativeViewHierarchyManager.LayoutAnimationEnabled">
            <summary>
            Signals if layout animation is enabled.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyManager.UpdateProperties(System.Int32,ReactNative.UIManager.ReactStylesDiffMap)">
            <summary>
            Updates the properties of the view with the given tag.
            </summary>
            <param name="tag">The view tag.</param>
            <param name="props">The properties.</param>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyManager.UpdateViewExtraData(System.Int32,System.Object)">
            <summary>
            Updates the extra data for the view with the given tag.
            </summary>
            <param name="tag">The view tag.</param>
            <param name="extraData">The extra data.</param>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyManager.UpdateLayout(System.Int32,System.Int32,ReactNative.UIManager.Dimensions)">
            <summary>
            Updates the layout of a view.
            </summary>
            <param name="parentTag">The parent view tag.</param>
            <param name="tag">The view tag.</param>
            <param name="dimensions">The dimensions.</param>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyManager.CreateView(ReactNative.UIManager.ThemedReactContext,System.Int32,System.String,ReactNative.UIManager.ReactStylesDiffMap)">
            <summary>
            Creates a view with the given tag and class name.
            </summary>
            <param name="themedContext">The context.</param>
            <param name="tag">The tag.</param>
            <param name="className">The class name.</param>
            <param name="initialProperties">The properties.</param>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyManager.ConfigureLayoutAnimation(Newtonsoft.Json.Linq.JObject,ReactNative.Bridge.ICallback,ReactNative.Bridge.ICallback)">
            <summary>
            Sets up the Layout Animation Manager.
            </summary>
            <param name="config"></param>
            <param name="success"></param>
            <param name="error"></param>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyManager.ClearLayoutAnimation">
            <summary>
            Clears out the <see cref="T:ReactNative.UIManager.LayoutAnimation.LayoutAnimationController"/>.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyManager.ManageChildren(System.Int32,System.Int32[],ReactNative.UIManager.ViewAtIndex[],System.Int32[])">
            <summary>
            Manages the children of a React view.
            </summary>
            <param name="tag">The tag of the view to manager.</param>
            <param name="indexesToRemove">Child indices to remove.</param>
            <param name="viewsToAdd">Views to add.</param>
            <param name="tagsToDelete">Tags to delete.</param>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyManager.SetChildren(System.Int32,System.Int32[])">
            <summary>
            Simplified version of <see cref="M:ReactNative.UIManager.UIManagerModule.manageChildren(System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])"/>
            that only deals with adding children views.
            </summary>
            <param name="tag">The view tag to manage.</param>
            <param name="childrenTags">The children tags.</param>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyManager.RemoveRootView(System.Int32)">
            <summary>
            Remove the root view with the given tag.
            </summary>
            <param name="rootViewTag">The root view tag.</param>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyManager.Measure(System.Int32,System.Double[])">
            <summary>
            Measures a view and sets the output buffer to (x, y, width, height).
            Measurements are relative to the RootView.
            </summary>
            <param name="tag">The view tag.</param>
            <param name="outputBuffer">The output buffer.</param>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyManager.MeasureInWindow(System.Int32,System.Double[])">
            <summary>
            Measures a view and sets the output buffer to (x, y, width, height).
            Measurements are relative to the window.
            </summary>
            <param name="tag">The view tag.</param>
            <param name="outputBuffer">The output buffer.</param>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyManager.AddRootView(System.Int32,ReactNative.UIManager.SizeMonitoringCanvas,ReactNative.UIManager.ThemedReactContext)">
            <summary>
            Adds a root view with the given tag.
            </summary>
            <param name="tag">The tag.</param>
            <param name="view">The root view.</param>
            <param name="themedContext">The themed context.</param>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyManager.FindTargetForTouch(System.Int32,System.Double,System.Double)">
            <summary>
            Find the view target for touch coordinates.
            </summary>
            <param name="reactTag">The view tag.</param>
            <param name="touchX">The x-coordinate of the touch event.</param>
            <param name="touchY">The y-coordinate of the touch event.</param>
            <returns>The view target.</returns>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyManager.SetJavaScriptResponder(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the JavaScript responder handler for a view.
            </summary>
            <param name="reactTag">The view tag.</param>
            <param name="initialReactTag">The initial tag.</param>
            <param name="blockNativeResponder">
            Flag to block the native responder.
            </param>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyManager.ClearJavaScriptResponder">
            <summary>
            Clears the JavaScript responder.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyManager.DispatchCommand(System.Int32,System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Dispatches a command to a view.
            </summary>
            <param name="reactTag">The view tag.</param>
            <param name="commandId">The command identifier.</param>
            <param name="args">The command arguments.</param>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyManager.ShowPopupMenu(System.Int32,System.String[],ReactNative.Bridge.ICallback)">
            <summary>
            Shows a popup menu.
            </summary>
            <param name="tag">
            The tag of the anchor view (the popup menu is
            displayed next to this view); this needs to be the tag of a native
            view (shadow views cannot be anchors).
            </param>
            <param name="items">The menu items as an array of strings.</param>
            <param name="success">
            A callback used with the position of the selected item as the first
            argument, or no arguments if the menu is dismissed.
            </param>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyManager.ViewExists(System.Int32)">
            <summary>
            Checks whether a view exists.
            </summary>
            <param name="tag">The tag of the view.</param>
            <returns>
            <code>true</code> if the view still exists, otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyManager.ResolveView(System.Int32)">
            <summary>
            Resolves a view.
            </summary>
            <param name="tag">The tag of the view.</param>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyManager.ResolveViewManager(System.Int32)">
            <summary>
            Resolves a view's view manager.
            </summary>
            <param name="tag">The tag of the view.</param>
        </member>
        <member name="T:ReactNative.UIManager.NativeViewHierarchyOptimizer">
            <summary>
            Class responsible for optimizing the native view hierarchy while still
            respecting the final UI product specified by JavaScript. Basically,
            JavaScript sends a hierarchy of nodes that, while easy to reason about
            in JavaScript, are very inefficient to translate directly to native
            views. This class sits between <see cref="T:ReactNative.UIManager.UIManagerModule"/>, which
            received view commands from JavaScript, and <see cref="T:ReactNative.UIManager.UIViewOperationQueue"/>,
            which enqueues actual operations on the native view hierarchy. It is
            able to take instructions from <see cref="T:ReactNative.UIManager.UIManagerModule"/> and
            output instructions to the native view hierarchy that achieve the same
            displayed UI but with fewer views.
            
            Currently, this class is only used to remove layout-only views, that
            is to say views that only affect the positions of their children but do
            not draw anything themselves. These views are faily common because
            1) containers are used to do layouting via flexbox and 2) the return of
            each render call in JavaScript must be exactly one view, which means
            views are often wrapped in an unnecessary layer of hierarchy.
            
            This optimization is implemented by keeping track of both the
            unoptimized JavaScript hierarchy and the optimized native hierarchy in
            <see cref="T:ReactNative.UIManager.ReactShadowNode"/>.
            
            This optimization is important for view hierarchy depth (which can 
            cause stack overflows during view traversal for complex apps), memory
            usage, amount of time spent in GC, and time-to-display.
            
            Some examples of the optimizations this class will do based on commands
            from JavaScript:
            - Create a view with only layout properties: a description of that view
              is created as a <see cref="T:ReactNative.UIManager.ReactShadowNode"/> in <see cref="T:ReactNative.UIManager.UIManagerModule"/>,
              but this class will not output any commands to create the view in the
              native view hierarchy.
            - Update a layout-only view to have non-layout properties: before
              issuing the call to update the shadow node, issue commands to create
              the view we optimized away and move it into the view hierarchy.
            - Manage the children of a view: multiple calls to manage children for
              various parent views may be issued to the native view hierarchy
              depending on where the views being added/removed are attached in the
              optimized hierarchy.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyOptimizer.#ctor(ReactNative.UIManager.UIViewOperationQueue,ReactNative.UIManager.ShadowNodeRegistry)">
            <summary>
            Instantiates a <see cref="T:ReactNative.UIManager.NativeViewHierarchyOptimizer"/>.
            </summary>
            <param name="uiViewOperationQueue">The UI view operation queue.</param>
            <param name="shadowNodeRegistry">The shadow node registry.</param>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyOptimizer.HandleCreateView(ReactNative.UIManager.ReactShadowNode,ReactNative.UIManager.ThemedReactContext,ReactNative.UIManager.ReactStylesDiffMap)">
            <summary>
            Handles the creation of a view.
            </summary>
            <param name="node">The shadow node for the view.</param>
            <param name="themedContext">The themed context.</param>
            <param name="initialProperties">
            The initial properties for the view.
            </param>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyOptimizer.HandleUpdateView(ReactNative.UIManager.ReactShadowNode,System.String,ReactNative.UIManager.ReactStylesDiffMap)">
            <summary>
            Handles a call to <see cref="M:ReactNative.UIManager.UIManagerModule.updateView(System.Int32,System.String,Newtonsoft.Json.Linq.JObject)"/>.
            If a view transitions from being layout-only to not (or vice versa)
            this could result in some number of additional create view or
            manage children calls. If the view is layout only, no update view
            call will be dispatched to the native hierarchy.
            </summary>
            <param name="node">The node.</param>
            <param name="className">The class name.</param>
            <param name="props">The properties.</param>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyOptimizer.HandleManageChildren(ReactNative.UIManager.ReactShadowNode,System.Int32[],System.Int32[],ReactNative.UIManager.ViewAtIndex[],System.Int32[])">
            <summary>
            Handles a manage children call. This may translate into multiple
            manage children calls for multiple other views.
            </summary>
            <param name="nodeToManage">The node to manage.</param>
            <param name="indexesToRemove">The indices to remove.</param>
            <param name="tagsToRemove">The tags to remove.</param>
            <param name="viewsToAdd">The views to add.</param>
            <param name="tagsToDelete">The tags to delete.</param>
            <remarks>
            The assumption for calling this method is that all corresponding
            <see cref="T:ReactNative.UIManager.ReactShadowNode"/>s have been updated, but
            <paramref name="tagsToDelete"/> have not been deleted yet. This is
            because we need to use the metadata from those nodes to figure out
            the correct commands to dispatch. This is unlike other calls on
            this class where we assume all operations on the shadow hierarchy
            have already completed by the time a corresponding method here is
            called.
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyOptimizer.HandleSetChildren(ReactNative.UIManager.ReactShadowNode,System.Int32[])">
            <summary>
            Handles a setChildren call. This is a simplification of <see cref="M:ReactNative.UIManager.NativeViewHierarchyOptimizer.HandleManageChildren(ReactNative.UIManager.ReactShadowNode,System.Int32[],System.Int32[],ReactNative.UIManager.ViewAtIndex[],System.Int32[])"/>
            that only adds children in index order of the <paramref name="childrenTags"/>
            array.
            </summary>
            <param name="nodeToManage">The node to manage.</param>
            <param name="childrenTags">The children tags.</param>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyOptimizer.HandleUpdateLayout(ReactNative.UIManager.ReactShadowNode)">
            <summary>
            Handles an update layout call. All update layout calls are 
            collected and dispatched at the end of a batch because update
            layout calls to layout-only nodes can necessitate multiple update
            layout calls for all its children.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyOptimizer.OnBatchComplete">
            <summary>
            Processes the shadow hierarchy to dispatch all necessary update
            layout calls to the native hierarcy. Should be called after all
            update layout calls for a batch have been handled.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.NativeViewHierarchyOptimizer.HandleRemoveNode(ReactNative.UIManager.ReactShadowNode)">
            <summary>
            Handles native children cleanup when the shadow node is removed
            from the hierarchy.
            </summary>
            <param name="node">The node to cleanup.</param>
        </member>
        <member name="T:ReactNative.UIManager.PanelViewParentManager`1">
            <summary>
            Class providing child management API for view managers of classes
            extending <see cref="T:Windows.UI.Xaml.Controls.Panel"/>.
            </summary>
            <typeparam name="TPanel">Type of panel.</typeparam>
        </member>
        <member name="M:ReactNative.UIManager.PanelViewParentManager`1.GetChildCount(`0)">
            <summary>
            Gets the number of children for the view parent.
            </summary>
            <param name="parent">The view parent.</param>
            <returns>The number of children.</returns>
        </member>
        <member name="M:ReactNative.UIManager.PanelViewParentManager`1.GetChildAt(`0,System.Int32)">
            <summary>
            Gets the child at the given index.
            </summary>
            <param name="parent">The parent view.</param>
            <param name="index">The index.</param>
            <returns>The child view.</returns>
        </member>
        <member name="M:ReactNative.UIManager.PanelViewParentManager`1.AddView(`0,Windows.UI.Xaml.DependencyObject,System.Int32)">
            <summary>
            Adds a child at the given index.
            </summary>
            <param name="parent">The parent view.</param>
            <param name="child">The child view.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:ReactNative.UIManager.PanelViewParentManager`1.RemoveChildAt(`0,System.Int32)">
            <summary>
            Removes the child at the given index.
            </summary>
            <param name="parent">The view parent.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:ReactNative.UIManager.PanelViewParentManager`1.RemoveAllChildren(`0)">
            <summary>
            Removes all children from the view parent.
            </summary>
            <param name="parent">The view parent.</param>
        </member>
        <member name="T:ReactNative.UIManager.PointerEvents">
            <summary>
            Possible values for pointer events that a view and its descendants should
            receive. See https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events
            for more information.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.PointerEvents.Auto">
            <summary>
            Container and all of its children receive touch events.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.PointerEvents.None">
            <summary>
            Neither the container nor its children receive events.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.PointerEvents.BoxNone">
            <summary>
            Container does not get events but all its children do.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.PointerEvents.BoxOnly">
            <summary>
            Container gets events but none of its children do.
            </summary>
        </member>
        <member name="T:ReactNative.UIManager.ReactShadowNode">
            <summary>
            Base node class for representing the virtual tree of React nodes.
            Shadow nodes are used primarily for layout, therefore it encapsulates
            <see cref="T:Facebook.Yoga.YogaNode"/> to allow that. Instances of this class receive 
            property updates from JavaScript via the <see cref="T:ReactNative.UIManager.UIManagerModule"/>.
            
            This class allows for the native view hierarchy not to be an exact copy
            of the hierarchy received from JavaScript by keeping track of both
            JavaScript children (e.g., <see cref="P:ReactNative.UIManager.ReactShadowNode.ChildCount"/>) and
            separately native children (e.g., <see cref="P:ReactNative.UIManager.ReactShadowNode.NativeChildCount"/>). See
            <see cref="T:ReactNative.UIManager.NativeViewHierarchyOptimizer"/> for more information.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.#ctor">
            <summary>
            Instantiates a <see cref="T:ReactNative.UIManager.ReactShadowNode"/>. 
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.#ctor(System.Boolean)">
            <summary>
            Instantiates a <see cref="T:ReactNative.UIManager.ReactShadowNode"/>.
            </summary>
            <param name="isVirtual">Signals if the shadow node is virtual.</param>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.LayoutDirection">
            <summary>
            The layout direction.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.StyleWidth">
            <summary>
            The width.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.StyleMinWidth">
            <summary>
            The minimum width.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.StyleMaxWidth">
            <summary>
            The maximum width.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.StyleHeight">
            <summary>
            The height.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.StyleMinHeight">
            <summary>
            The minimum height.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.StyleMaxHeight">
            <summary>
            The maximum height.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.Flex">
            <summary>
            The flex value.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.FlexGrow">
            <summary>
            The flex grow value.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.FlexShrink">
            <summary>
            The flex shrink value.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.FlexBasis">
            <summary>
            The flex basis.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.StyleAspectRatio">
            <summary>
            The aspect ratio.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.FlexDirection">
            <summary>
            The flex direction.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.FlexWrap">
            <summary>
            The flex wrap value.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.AlignSelf">
            <summary>
            The self alignment.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.AlignItems">
            <summary>
            The item alignment.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.AlignContent">
            <summary>
            The content alignment.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.JustifyContent">
            <summary>
            The justify content value.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.Overflow">
            <summary>
            The overflow value.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.Display">
            <summary>
            The display mode.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.PositionType">
            <summary>
            The position type.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.IsVirtual">
            <summary>
            Nodes that return <code>true</code> will be treated as "virtual"
            nodes. That is, nodes that are not mapped into native views (e.g.,
            nested text node).
            </summary>
            <remarks>
            By default this method returns <code>false</code>.
            </remarks>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.IsVirtualAnchor">
            <summary>
            Nodes that return <code>true</code> will be treated as a root view
            for the virtual nodes tree. It means that 
            <see cref="T:ReactNative.UIManager.NativeViewHierarchyManager"/> will not try to perform
            manage children operations on such views.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.HasUpdates">
            <summary>
            Signals that the node has updates.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.HasUnseenUpdates">
            <summary>
            Signals that the node has unseen updates.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.IsDirty">
            <summary>
            Signals if the node is dirty.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.ChildCount">
            <summary>
            The number of children.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.ReactTag">
            <summary>
            The tag for the node.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.RootNode">
            <summary>
            The root node.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.ViewClass">
            <summary>
            The view class.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.Parent">
            <summary>
            The node parent.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.ThemedContext">
            <summary>
            The themed context.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.ShouldNotifyOnLayout">
            <summary>
            Sets whether the node should notify on layout.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.HasNewLayout">
            <summary>
            Signals if a new layout is available.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.NativeChildCount">
            <summary>
            The number of native children.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.NativeParent">
            <summary>
            The native parent.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.IsLayoutOnly">
            <summary>
            Signals whether the node is layout-only.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.TotalNativeChildren">
            <summary>
            Gets the total number of native children in the node hierarchy.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.LayoutX">
            <summary>
            The layout horizontal position.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.LayoutY">
            <summary>
            The layout vertical position.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.LayoutWidth">
            <summary>
            The layout width.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.LayoutHeight">
            <summary>
            The layout height.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.ScreenX">
            <summary>
            The screen horizontal position.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.ScreenY">
            <summary>
            The screen vertical position.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.ScreenWidth">
            <summary>
            The screen width.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.ScreenHeight">
            <summary>
            The screen height.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ReactShadowNode.MeasureFunction">
            <summary>
            The measure function.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.SetMargin(System.Int32,Facebook.Yoga.YogaValue)">
            <summary>
            Sets the margin for the node.
            </summary>
            <param name="spacingType">The spacing type.</param>
            <param name="margin">The margin.</param>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.GetPadding(Facebook.Yoga.YogaEdge)">
            <summary>
            Sets the padding for the node.
            </summary>
            <param name="spacingType">The spacing type.</param>
            <returns>The padding.</returns>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.SetDefaultPadding(System.Int32,Facebook.Yoga.YogaValue)">
            <summary>
            Sets the default padding for the node.
            </summary>
            <param name="spacingType">The spacing type.</param>
            <param name="padding">The padding.</param>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.SetPadding(System.Int32,Facebook.Yoga.YogaValue)">
            <summary>
            Sets the padding for the node.
            </summary>
            <param name="spacingType">The spacing type.</param>
            <param name="padding">The padding.</param>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.GetBorder(Facebook.Yoga.YogaEdge)">
            <summary>
            Gets the border for the node.
            </summary>
            <param name="spacingType">The spacing type.</param>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.SetBorder(System.Int32,System.Single)">
            <summary>
            Sets the border for the node.
            </summary>
            <param name="spacingType">The spacing type.</param>
            <param name="borderWidth">The border width.</param>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.SetPosition(System.Int32,Facebook.Yoga.YogaValue)">
            <summary>
            Sets the position for the node.
            </summary>
            <param name="spacingType">The spacing type.</param>
            <param name="position">The position.</param>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.CalculateLayout">
            <summary>
            Calculate layout for the node.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.MarkUpdateSeen">
            <summary>
            Marks that an update has been seen.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.MarkLayoutSeen">
            <summary>
            Marks layout seen.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.AddChildAt(ReactNative.UIManager.ReactShadowNode,System.Int32)">
            <summary>
            Insert a child at the given index.
            </summary>
            <param name="child">The child.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.RemoveChildAt(System.Int32)">
            <summary>
            Removes the child at the given index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.OnBeforeLayout">
            <summary>
            This method will be called by <see cref="T:ReactNative.UIManager.UIManagerModule"/> once
            per batch, before calculating layout. This will only be called for
            nodes that are marked as updated with <see cref="M:ReactNative.UIManager.ReactShadowNode.MarkUpdated"/> or
            require layout (i.e., marked with <see cref="M:ReactNative.UIManager.ReactShadowNode.dirty"/>).
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.UpdateProperties(ReactNative.UIManager.ReactStylesDiffMap)">
            <summary>
            Updates the properties of the node.
            </summary>
            <param name="props">The properties.</param>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.OnAfterUpdateTransaction">
            <summary>
            Called following property updates for node.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.OnCollectExtraUpdates(ReactNative.UIManager.UIViewOperationQueue)">
            <summary>
            Called after a layout step at the end of a UI batch from
            <see cref="T:ReactNative.UIManager.UIManagerModule"/>. May be used to enqueue additional UI
            operations for the native view. Will only be called on nodes marked
            as updated.
            </summary>
            <param name="uiViewOperationQueue">
            Interface for enqueueing UI operations.
            </param>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.GetChildAt(System.Int32)">
            <summary>
            Gets the child node at the given index.
            </summary>
            <param name="index">The index.</param>
            <returns>The child node.</returns>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.IndexOf(ReactNative.UIManager.ReactShadowNode)">
            <summary>
            Gets the index of the given child node.
            </summary>
            <param name="child">The child node.</param>
            <returns>The index.</returns>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.RemoveAndDisposeAllChildren">
            <summary>
            Removes and disposes all children.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.AddNativeChildAt(ReactNative.UIManager.ReactShadowNode,System.Int32)">
            <summary>
            Adds a child that the native view hierarchy will have at this index
            in the native view corresponding to this node.
            </summary>
            <param name="child"></param>
            <param name="nativeIndex"></param>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.RemoveNativeChildAt(System.Int32)">
            <summary>
            Removes the native child at the given index.
            </summary>
            <param name="index">The index.</param>
            <returns>The child removed.</returns>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.RemoveAllNativeChildren">
            <summary>
            Remove all native children.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.IndexOfNativeChild(ReactNative.UIManager.ReactShadowNode)">
            <summary>
            Gets the index of a native child.
            </summary>
            <param name="nativeChild">The native child.</param>
            <returns>The index, or -1 if none is found.</returns>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.GetNativeOffsetForChild(ReactNative.UIManager.ReactShadowNode)">
            <summary>
            Returns the offset within the native children owned by all layout-
            only nodes in the subtree rooted at this node for the given child.
            Put another way, this returns the number of native nodes (nodes not
            optimized out of the native tree) that are a) to the left (visited
            before by a depth-first search) of the given child in the subtree
            rooted at this node and b) do not have a native parent in this
            subtree (which means that the given child will be a sibling of
            theirs in the final native hierarchy since they'll get attached to
            the same native parent).
            
            Basically, a view might have children that have been optimized away
            by <see cref="T:ReactNative.UIManager.NativeViewHierarchyOptimizer"/>. Since those children
            will then add their native children to this view, we now have
            ranges of native children that correspond to single unoptimized
            children. The purpose of this method is to return the index within
            the native children that corresponds to the start of the native 
            children that belong to the given child. Also, note that all of the
            children of a view might be optimized away, so this could return
            the same value for multiple different children.
            </summary>
            <param name="child">The child.</param>
            <returns>The native offset.</returns>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.Dispose">
            <summary>
            Disposes the shadow node.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.DispatchUpdates(System.Single,System.Single,ReactNative.UIManager.UIViewOperationQueue,ReactNative.UIManager.NativeViewHierarchyOptimizer)">
            <summary>
            Dispatches a batch of updates.
            </summary>
            <param name="absoluteX">
            The absolute X-position of the node.
            </param>
            <param name="absoluteY">
            The 
            </param>
            <param name="uiViewOperationQueue">
            Interface for enqueueing UI operations.
            </param>
            <param name="nativeViewHierarchyOptimizer">
            Interface for optimizing native hierarchy calls.
            </param>
            <returns>
            <code>true</code> if updates were dispatched, otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.dirty">
            <summary>
            Marks that the node is dirty.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.ReactShadowNode.MarkUpdated">
            <summary>
            Marks a node as updated.
            </summary>
        </member>
        <member name="T:ReactNative.UIManager.ReactStylesDiffMap">
            <summary>
            A simple container for React properties for views.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.ReactStylesDiffMap.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Instantiates the <see cref="T:ReactNative.UIManager.ReactStylesDiffMap"/>.
            </summary>
            <param name="props">The property map.</param>
        </member>
        <member name="P:ReactNative.UIManager.ReactStylesDiffMap.Keys">
            <summary>
            The set of property keys.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.ReactStylesDiffMap.ContainsKey(System.String)">
            <summary>
            Checks if the property set contains the given key.
            </summary>
            <param name="name">The key.</param>
            <returns>
            <code>true</code> if the property set contains the key, 
            <code>false</code> otherwise.
            </returns>
        </member>
        <member name="M:ReactNative.UIManager.ReactStylesDiffMap.GetProperty(System.String)">
            <summary>
            Gets and deserializes the property using the given name and type.
            </summary>
            <param name="name">The property name.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:ReactNative.UIManager.ReactStylesDiffMap.IsNull(System.String)">
            <summary>
            Checks if the given property is null.
            </summary>
            <param name="name">The property name.</param>
            <returns>
            <code>true</code> if the property value is null, otherwise
            <code>false</code>.
            </returns>
        </member>
        <member name="T:ReactNative.UIManager.RootViewHelper">
            <summary>
            Helper methods for root view management.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.RootViewHelper.GetRootView(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Returns the root view of a givenview in a React application.
            </summary>
            <param name="view">The view instance.</param>
            <returns>The root view instance.</returns>
        </member>
        <member name="M:ReactNative.UIManager.RootViewHelper.GetReactViewHierarchy(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the hierarchy of React views from the given view.
            </summary>
            <param name="view">The view.</param>
            <returns>The view hierarchy.</returns>
        </member>
        <member name="M:ReactNative.UIManager.RootViewHelper.IsReactSubview(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Checks if the view is part of the React hierarchy.
            </summary>
            <param name="view">The view instance.</param>
            <returns>
            <code>true</code> if the view is part of the hierarchy, otherwise
            <code>false</code>.
            </returns>
        </member>
        <member name="T:ReactNative.UIManager.RootViewManager">
            <summary>
            View manager for React root view components.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.RootViewManager.Name">
            <summary>
            The name of the React root view.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.RootViewManager.OnDropViewInstance(ReactNative.UIManager.ThemedReactContext,ReactNative.UIManager.SizeMonitoringCanvas)">
            <summary>
            Called when view is detached from view hierarchy and allows for 
            additional cleanup by the <see cref="T:ReactNative.UIManager.RootViewManager"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The view.</param>
        </member>
        <member name="M:ReactNative.UIManager.RootViewManager.AddEventEmitters(ReactNative.UIManager.ThemedReactContext,ReactNative.UIManager.SizeMonitoringCanvas)">
            <summary>
            Used to install custom event emitters on the given view.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The view.</param>
            <remarks>
            Intentionally skipping call to base method because we don't care
            about pointer enter/leave events on the root view.
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.RootViewManager.CreateViewInstance(ReactNative.UIManager.ThemedReactContext)">
            <summary>
            Creates a new view instance of type <see cref="T:ReactNative.UIManager.SizeMonitoringCanvas"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <returns>The view instance.</returns>
        </member>
        <member name="T:ReactNative.UIManager.ShadowNodeRegistry">
            <summary>
            Simple container class to keep track of <see cref="T:ReactNative.UIManager.ReactShadowNode"/>s
            associated with a particular <see cref="T:ReactNative.UIManager.UIManagerModule"/> instance.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ShadowNodeRegistry.RootNodeTags">
            <summary>
            The collection of root node tags.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.ShadowNodeRegistry.AddRootNode(ReactNative.UIManager.ReactShadowNode)">
            <summary>
            Add a root shadow node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:ReactNative.UIManager.ShadowNodeRegistry.RemoveRootNode(System.Int32)">
            <summary>
            Remove a root shadow node.
            </summary>
            <param name="tag">The tag of the node to remove.</param>
        </member>
        <member name="M:ReactNative.UIManager.ShadowNodeRegistry.AddNode(ReactNative.UIManager.ReactShadowNode)">
            <summary>
            Add a React shadow node.
            </summary>
            <param name="node">The node to add.</param>
        </member>
        <member name="M:ReactNative.UIManager.ShadowNodeRegistry.RemoveNode(System.Int32)">
            <summary>
            Remove a React shadow node.
            </summary>
            <param name="tag">The tag of the node to remove.</param>
        </member>
        <member name="M:ReactNative.UIManager.ShadowNodeRegistry.GetNode(System.Int32)">
            <summary>
            Retrieve a React shadow node.
            </summary>
            <param name="tag">The tag of the node to retrieve.</param>
            <returns>The React shadow node.</returns>
        </member>
        <member name="M:ReactNative.UIManager.ShadowNodeRegistry.IsRootNode(System.Int32)">
            <summary>
            Checks if a node with the given tag is a root node.
            </summary>
            <param name="tag">The tag.</param>
            <returns>
            <b>true</b> if the node with the given tag is a root node,
            <b>false</b> otherwise.
            </returns>
        </member>
        <member name="T:ReactNative.UIManager.SimpleViewManager`1">
            <summary>
            Common base class for most of the <see cref="T:ReactNative.UIManager.IViewManager"/> instances. 
            It provides support for most common properties through extending 
            <see cref="T:ReactNative.UIManager.BaseViewManager`2"/>.
            </summary>
            <typeparam name="TFrameworkElement">Type of framework element.</typeparam>
        </member>
        <member name="M:ReactNative.UIManager.SimpleViewManager`1.CreateShadowNodeInstance">
            <summary>
            Creates a <see cref="T:ReactNative.UIManager.LayoutShadowNode"/> instance.
            </summary>
            <returns>The shadow node instance.</returns>
        </member>
        <member name="M:ReactNative.UIManager.SimpleViewManager`1.UpdateExtraData(`0,System.Object)">
            <summary>
            Implement this method to receive optional extra data enqueued from
            the corresponding instance of <see cref="T:ReactNative.UIManager.ReactShadowNode"/> in
            <see cref="M:ReactNative.UIManager.ReactShadowNode.OnCollectExtraUpdates(ReactNative.UIManager.UIViewOperationQueue)"/>.
            </summary>
            <param name="root">The root view.</param>
            <param name="extraData">The extra data.</param>
        </member>
        <member name="T:ReactNative.UIManager.SizeMonitoringCanvas">
            <summary>
            allows registering for size change events. The main purpose for this class is to hide complexity of ReactRootView
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.SizeMonitoringCanvas.SetOnSizeChangedListener(Windows.UI.Xaml.SizeChangedEventHandler)">
            <summary>
            Sets and registers the event handler responsible for monitoring
            size change events.
            </summary>
            <param name="sizeChangedEventHandler">The event handler.</param>
        </member>
        <member name="M:ReactNative.UIManager.SizeMonitoringCanvas.RemoveSizeChanged">
            <summary>
            Unsets the size changed event handler.
            </summary>
        </member>
        <member name="T:ReactNative.UIManager.ThemedReactContext">
            <summary>
            A wrapper <see cref="T:ReactNative.Bridge.ReactContext"/> that delegates lifecycle events to
            the original instance of <see cref="T:ReactNative.Bridge.ReactContext"/>.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.ThemedReactContext.#ctor(ReactNative.Bridge.ReactContext)">
            <summary>
            Instantiates the <see cref="T:ReactNative.UIManager.ThemedReactContext"/>.
            </summary>
            <param name="reactContext">The inner context.</param>
        </member>
        <member name="M:ReactNative.UIManager.ThemedReactContext.GetNativeModule``1">
            <summary>
            Gets the instance of the <see cref="T:ReactNative.Bridge.INativeModule"/> associated
            with the <see cref="T:ReactNative.Bridge.IReactInstance"/>.
            </summary>
            <typeparam name="T">Type of native module.</typeparam>
            <returns>The native module instance.</returns>
        </member>
        <member name="M:ReactNative.UIManager.ThemedReactContext.GetJavaScriptModule``1">
            <summary>
            Gets the instance of the <see cref="T:ReactNative.Bridge.IJavaScriptModule"/> associated
            with the <see cref="T:ReactNative.Bridge.IReactInstance"/>.
            </summary>
            <typeparam name="T">Type of JavaScript module.</typeparam>
            <returns>The JavaScript module instance.</returns>
        </member>
        <member name="M:ReactNative.UIManager.ThemedReactContext.AddLifecycleEventListener(ReactNative.Bridge.ILifecycleEventListener)">
            <summary>
            Adds a lifecycle event listener to the context.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:ReactNative.UIManager.ThemedReactContext.RemoveLifecycleEventListener(ReactNative.Bridge.ILifecycleEventListener)">
            <summary>
            Removes a lifecycle event listener from the context.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="T:ReactNative.UIManager.UIImplementation">
            <summary>
            An class that is used to receive React commands from JavaScript and
            translate them into a shadow node hierarchy that is then mapped to a
            native view hierarchy.
            </summary>
            <remarks>
            TODO: Animation support
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.#ctor(ReactNative.Bridge.ReactContext,System.Collections.Generic.IReadOnlyList{ReactNative.UIManager.IViewManager},ReactNative.UIManager.Events.EventDispatcher)">
            <summary>
            Instantiates the <see cref="T:ReactNative.UIManager.UIImplementation"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="viewManagers">The view managers.</param>
            <param name="eventDispatcher">The event dispatcher.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.#ctor(ReactNative.Bridge.ReactContext,ReactNative.UIManager.ViewManagerRegistry,ReactNative.UIManager.UIViewOperationQueue,ReactNative.UIManager.Events.EventDispatcher)">
            <summary>
            Instantiates the <see cref="T:ReactNative.UIManager.UIImplementation"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="viewManagers">The view managers.</param>
            <param name="operationsQueue">The operations queue.</param>
            <param name="eventDispatcher">The event dispatcher.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.RegisterRootView(ReactNative.UIManager.SizeMonitoringCanvas,System.Int32,System.Double,System.Double,ReactNative.UIManager.ThemedReactContext)">
            <summary>
            Register the root view.
            </summary>
            <param name="rootView">The root view.</param>
            <param name="tag">The view tag.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.RemoveRootView(System.Int32)">
            <summary>
            Unregisters a root view with the given tag.
            </summary>
            <param name="rootViewTag">The root view tag.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.UpdateRootNodeSize(System.Int32,System.Double,System.Double)">
            <summary>
            Invoked when the native view that corresponds to a root node has
            its size changed.
            </summary>
            <param name="rootViewTag">The root view tag.</param>
            <param name="newWidth">The new width.</param>
            <param name="newHeight">The new height.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.CreateView(System.Int32,System.String,System.Int32,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Invoked by React to create a new node with the given tag, class
            name, and properties.
            </summary>
            <param name="tag">The view tag.</param>
            <param name="className">The class name.</param>
            <param name="rootViewTag">The root view tag.</param>
            <param name="props">The properties.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.ConfigureNextLayoutAnimation(Newtonsoft.Json.Linq.JObject,ReactNative.Bridge.ICallback,ReactNative.Bridge.ICallback)">
            <summary>
            Invoked by React to create a new node with a given tag, class name and properties.
            </summary>
            <param name="config">the animation configuration properties.</param>
            <param name="success">Success callback.</param>
            <param name="error">Error callback.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.UpdateView(System.Int32,System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Invoked by React when the properties change for a node with the
            given tag.
            </summary>
            <param name="tag">The view tag.</param>
            <param name="className">The view class name.</param>
            <param name="props">The properties.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.SynchronouslyUpdateViewOnDispatcherThread(System.Int32,ReactNative.UIManager.ReactStylesDiffMap)">
            <summary>
            Used by the native animated module to bypass the process of
            updating the values through the shadow view hierarchy. This method
            will directly update the native views, which means that updates for
            layout-related properties won't be handled properly.
            </summary>
            <param name="tag">The view tag.</param>
            <param name="props">The properties</param>
            <remarks>
            Make sure you know what you're doing before calling this method :)
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.ManageChildren(System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Manage the children of a view.
            </summary>
            <param name="viewTag">The view tag of the parent view.</param>
            <param name="moveFrom">
            A list of indices in the parent view to move views from.
            </param>
            <param name="moveTo">
            A list of indices in the parent view to move views to.
            </param>
            <param name="addChildTags">
            A list of tags of views to add to the parent.
            </param>
            <param name="addAtIndexes">
            A list of indices to insert the child tags at.
            </param>
            <param name="removeFrom">
            A list of indices to permanently remove. The memory for the
            corresponding views and data structures should be reclaimed.
            </param>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.SetChildren(System.Int32,System.Int32[])">
            <summary>
            An optimized version of manageChildren that is used for initial
            setting of child views. The children are assumed to be in index
            order.
            </summary>
            <param name="viewTag">Tag of the parent.</param>
            <param name="childrenTags">Tags of the children.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.ReplaceExistingNonRootView(System.Int32,System.Int32)">
            <summary>
            Replaces the view specified by <paramref name="oldTag"/> with the
            view specified by <paramref name="newTag"/> within
            <paramref name="oldTag"/>'s parent.
            </summary>
            <param name="oldTag">The old tag.</param>
            <param name="newTag">The new tag.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.RemoveSubViewsFromContainerWithId(System.Int32)">
            <summary>
            Method which takes a container tag and then releases all subviews
            for that container upon receipt.
            </summary>
            <param name="containerTag">The container tag.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.FindSubViewIn(System.Int32,System.Double,System.Double,ReactNative.Bridge.ICallback)">
            <summary>
            Find the touch target child native view in the supplied root view
            hierarchy, given a React target location.
            </summary>
            <param name="reactTag">The root tag to traverse.</param>
            <param name="targetX">The target X-coordinate.</param>
            <param name="targetY">The target Y-coordinate.</param>
            <param name="callback">
            Callback invoked with the identified child view React ID and
            measurement information. If no view was found, callback will be
            invoked with no data.
            </param>
            <remarks>
            This method is currently used only by the Element Inspector dev tool.
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.Measure(System.Int32,ReactNative.Bridge.ICallback)">
            <summary>
            Determines the location on screen, width, and height of the given
            view and returns the values via an asynchronous callback.
            </summary>
            <param name="reactTag">The view tag to measure.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.MeasureInWindow(System.Int32,ReactNative.Bridge.ICallback)">
            <summary>
            Determines the width, height, and location relative to the window
            of the given view and returns the values via an asynchronous callback.
            </summary>
            <param name="reactTag">The view tag to measure.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.MeasureLayout(System.Int32,System.Int32,ReactNative.Bridge.ICallback,ReactNative.Bridge.ICallback)">
            <summary>
            Measures the view specified by <paramref name="tag"/> relative to
            the given <paramref name="ancestorTag"/>. This means that the
            returned x, y are relative to the origin x, y of the ancestor view.
            </summary>
            <param name="tag">The view tag.</param>
            <param name="ancestorTag">The ancestor tag.</param>
            <param name="errorCallback">Called in case of error.</param>
            <param name="successCallback">Called with the measurements.</param>
            <remarks>
            The measure view and ancestor view may be the same, in which case
            the x,y result would be 0,0 and the method will return the view
            dimensions.
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.MeasureLayoutRelativeToParent(System.Int32,ReactNative.Bridge.ICallback,ReactNative.Bridge.ICallback)">
            <summary>
            Similar to <see cref="M:ReactNative.UIManager.UIImplementation.Measure(System.Int32,ReactNative.Bridge.ICallback)"/> and
            <see cref="M:ReactNative.UIManager.UIImplementation.MeasureLayout(System.Int32,System.Int32,ReactNative.Bridge.ICallback,ReactNative.Bridge.ICallback)"/>,
            measures relative to the immediate parent.
            </summary>
            <param name="tag">The view tag.</param>
            <param name="errorCallback">Called in case of error.</param>
            <param name="successCallback">Called with the measurements.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.DispatchViewUpdates(System.Int32)">
            <summary>
            Invoked at the end of a transaction to commit any updates to the
            node hierarchy.
            </summary>
            <param name="batchId">The batch identifier.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.SetJavaScriptResponder(System.Int32,System.Boolean)">
            <summary>
            Sets a JavaScript responder for a view.
            </summary>
            <param name="reactTag">The view ID.</param>
            <param name="blockNativeResponder">
            Flag to signal if the native responder should be blocked.
            </param>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.ClearJavaScriptResponder">
            <summary>
            Clears the JavaScript responder.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.DispatchViewManagerCommand(System.Int32,System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Dispatches a command to the view manager.
            </summary>
            <param name="reactTag">The tag of the view manager.</param>
            <param name="commandId">The command ID.</param>
            <param name="commandArgs">The command arguments.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.ShowPopupMenu(System.Int32,System.String[],ReactNative.Bridge.ICallback,ReactNative.Bridge.ICallback)">
            <summary>
            Show a pop-up menu.
            </summary>
            <param name="reactTag">
            The tag of the anchor view (the pop-up menu is displayed next to
            this view); this needs to be the tag of a native view (shadow views
            cannot be anchors).
            </param>
            <param name="items">The menu items as an array of strings.</param>
            <param name="error">
            Callback used if there is an error displaying the menu.
            </param>
            <param name="success">
            Callback used with the position of the selected item as the first
            argument, or no arguments if the menu is dismissed.
            </param>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.AddUIBlock(ReactNative.UIManager.IUIBlock)">
            <summary>
            Enqueues UIBlock to be executed.
            </summary>
            <param name="block">The UI block.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.OnSuspend">
            <summary>
            Called when the host receives the suspend event.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.OnResume">
            <summary>
            Called when the host receives the resume event.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementation.OnDestroy">
            <summary>
            Called when the host is shutting down.
            </summary>
        </member>
        <member name="T:ReactNative.UIManager.UIImplementationProvider">
            <summary>
            Provides <see cref="T:ReactNative.UIManager.UIImplementation"/> to use in the 
            <see cref="T:ReactNative.UIManager.UIManagerModule"/>.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.UIImplementationProvider.Create(ReactNative.Bridge.ReactContext,System.Collections.Generic.IReadOnlyList{ReactNative.UIManager.IViewManager},ReactNative.UIManager.Events.EventDispatcher)">
            <summary>
            Creates the <see cref="T:ReactNative.UIManager.UIImplementation"/> instance.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="viewManagers">The view managers.</param>
            <param name="eventDispatcher">The event dispatcher.</param>
            <returns></returns>
        </member>
        <member name="T:ReactNative.UIManager.UIManagerModule">
            <summary>
            Native module to allow JavaScript to create and update native views.
            </summary>
            <summary>
            Native module to allow JavaScript to create and update native views.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.CreateConstants(System.Collections.Generic.IReadOnlyList{ReactNative.UIManager.IViewManager})">
            <summary>
            Create the declared constants for the module.
            </summary>
            <param name="viewManagers">
            The view managers exported by the module.
            </param>
            <returns>The constants map.</returns>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.#ctor(ReactNative.Bridge.ReactContext,System.Collections.Generic.IReadOnlyList{ReactNative.UIManager.IViewManager},ReactNative.UIManager.UIImplementationProvider,ReactNative.Bridge.Queue.IActionQueue)">
            <summary>
            Instantiates a <see cref="T:ReactNative.UIManager.UIManagerModule"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="viewManagers">The view managers.</param>
            <param name="uiImplementationProvider">The UI implementation provider.</param>
            <param name="layoutActionQueue">The layout action queue.</param>
        </member>
        <member name="P:ReactNative.UIManager.UIManagerModule.Name">
            <summary>
            The name of the module.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.UIManagerModule.Constants">
            <summary>
            The constants exported by this module.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.UIManagerModule.EventDispatcher">
            <summary>
            The event dispatcher for the module.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.UIManagerModule.UIImplementation">
            <summary>
            The UI implementation.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.AddMeasuredRootView(ReactNative.UIManager.SizeMonitoringCanvas)">
            <summary>
            Registers a new root view.
            </summary>
            <param name="rootView">The root view instance.</param>
            <returns>The root view tag.</returns>
            <remarks>
            JavaScript can use the returned tag with to add or remove children 
            to this view through <see cref="M:ReactNative.UIManager.UIManagerModule.manageChildren(System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])"/>.
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.AddUIBlock(ReactNative.UIManager.IUIBlock)">
            <summary>
            Schedule a block to be executed on the UI thread. Useful if you need to execute
            view logic after all currently queued view updates have completed.
            </summary>
            <param name="block">The UI block.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.removeRootView(System.Int32)">
            <summary>
            Removes the root view.
            </summary>
            <param name="rootViewTag">The root view tag.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.createView(System.Int32,System.String,System.Int32,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Creates a view.
            </summary>
            <param name="tag">The view tag.</param>
            <param name="className">The class name.</param>
            <param name="rootViewTag">The root view tag.</param>
            <param name="props">The properties.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.updateView(System.Int32,System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Updates a view.
            </summary>
            <param name="tag">The view tag.</param>
            <param name="className">The class name.</param>
            <param name="props">The properties.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.manageChildren(System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Manage the children of a view.
            </summary>
            <param name="viewTag">The view tag of the parent view.</param>
            <param name="moveFrom">
            A list of indices in the parent view to move views from.
            </param>
            <param name="moveTo">
            A list of indices in the parent view to move views to.
            </param>
            <param name="addChildTags">
            A list of tags of views to add to the parent.
            </param>
            <param name="addAtIndexes">
            A list of indices to insert the child tags at.
            </param>
            <param name="removeFrom">
            A list of indices to permanently remove. The memory for the
            corresponding views and data structures should be reclaimed.
            </param>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.setChildren(System.Int32,System.Int32[])">
            <summary>
            Interface for fast tracking the initial adding of views.Children 
            view tags are assumed to be in order.
            </summary>
            <param name="viewTag">The view tag of the parent view.</param>
            <param name="childrenTags">
            An array of tags to add to the parent in order.
            </param>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.replaceExistingNonRootView(System.Int32,System.Int32)">
            <summary>
            Replaces the view specified by the <paramref name="oldTag"/> with
            the view specified by <paramref name="newTag"/> within
            <paramref name="oldTag"/>'s parent. This resolves to a simple 
            <see cref="M:ReactNative.UIManager.UIManagerModule.manageChildren(System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])"/>
            call, but React does not have enough information in JavaScript to
            formulate it itself.
            </summary>
            <param name="oldTag">The old view tag.</param>
            <param name="newTag">The new view tag.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.removeSubviewsFromContainerWithID(System.Int32)">
            <summary>
            Method which takes a container tag and then releases all subviews
            for that container upon receipt.
            </summary>
            <param name="containerTag">The container tag.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.measure(System.Int32,ReactNative.Bridge.ICallback)">
            <summary>
            Determines the location on screen, width, and height of the given
            view and returns the values via an asynchronous callback.
            </summary>
            <param name="reactTag">The view tag to measure.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.measureInWindow(System.Int32,ReactNative.Bridge.ICallback)">
            <summary>
            Determines the width, height, and location relative to the window
            of the given view and returns the values via an asynchronous callback.
            </summary>
            <param name="reactTag">The view tag to measure.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.measureLayout(System.Int32,System.Int32,ReactNative.Bridge.ICallback,ReactNative.Bridge.ICallback)">
            <summary>
            Measure the view specified by <paramref name="tag"/> to the given
            <paramref name="ancestorTag"/>. This means that the returned x, y
            are relative to the origin x, y of the ancestor view.
            </summary>
            <param name="tag">The view tag.</param>
            <param name="ancestorTag">The ancestor tag.</param>
            <param name="errorCallback">The error callback.</param>
            <param name="successCallback">The success callback.</param>
            <remarks>
            NB: Unlike <see cref="M:ReactNative.UIManager.UIManagerModule.measure(System.Int32,ReactNative.Bridge.ICallback)"/>, this will measure
            relative to the view layout, not the visible window which can cause
            unexpected results when measuring relative to things like scroll
            views that can have offset content on the screen.
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.measureLayoutRelativeToParent(System.Int32,ReactNative.Bridge.ICallback,ReactNative.Bridge.ICallback)">
            <summary>
            Like <see cref="M:ReactNative.UIManager.UIManagerModule.measure(System.Int32,ReactNative.Bridge.ICallback)"/> and
            <see cref="M:ReactNative.UIManager.UIManagerModule.measureLayout(System.Int32,System.Int32,ReactNative.Bridge.ICallback,ReactNative.Bridge.ICallback)"/> but
            measures relative to the immediate parent.
            </summary>
            <param name="tag">The view tag to measure.</param>
            <param name="errorCallback">The error callback.</param>
            <param name="successCallback">The success callback.</param>
            <remarks>
            NB: Unlike <see cref="M:ReactNative.UIManager.UIManagerModule.measure(System.Int32,ReactNative.Bridge.ICallback)"/>, this will measure
            relative to the view layout, not the visible window which can cause
            unexpected results when measuring relative to things like scroll
            views that can have offset content on the screen.
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.findSubviewIn(System.Int32,Newtonsoft.Json.Linq.JArray,ReactNative.Bridge.ICallback)">
            <summary>
            Find the touch target child native view in the supplied root view
            hierarchy, given a React target location.
            </summary>
            <param name="reactTag">The root tag to traverse.</param>
            <param name="point">An array containing target coordinates.</param>
            <param name="callback">
            Callback invoked with the identified child view React tag and
            measurement information. If no view was found, callback will be
            invoked with no data.
            </param>
            <remarks>
            This method is currently used only by the Element Inspector dev tool.
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.setJSResponder(System.Int32,System.Boolean)">
            <summary>
            Sets a JavaScript responder for a view.
            </summary>
            <param name="reactTag">The view ID.</param>
            <param name="blockNativeResponder">
            Flag to signal if the native responder should be blocked.
            </param>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.clearJSResponder">
            <summary>
            Clears the JavaScript responder.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.dispatchViewManagerCommand(System.Int32,System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Dispatches a command to the view manager.
            </summary>
            <param name="reactTag">The tag of the view manager.</param>
            <param name="commandId">The command ID.</param>
            <param name="commandArgs">The command arguments.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.showPopupMenu(System.Int32,System.String[],ReactNative.Bridge.ICallback,ReactNative.Bridge.ICallback)">
            <summary>
            Show a pop-up menu.
            </summary>
            <param name="reactTag">
            The tag of the anchor view (the pop-up menu is displayed next to
            this view); this needs to be the tag of a native view (shadow views
            cannot be anchors).
            </param>
            <param name="items">The menu items as an array of strings.</param>
            <param name="error">
            Callback used if there is an error displaying the menu.
            </param>
            <param name="success">
            Callback used with the position of the selected item as the first
            argument, or no arguments if the menu is dismissed.
            </param>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.configureNextLayoutAnimation(Newtonsoft.Json.Linq.JObject,ReactNative.Bridge.ICallback,ReactNative.Bridge.ICallback)">
            <summary>
            Configure an animation to be used for the native layout changes,
            and native views creation. The animation will only apply during the
            current batch operations.
            </summary>
            <param name="config">
            The configuration of the animation for view addition/removal/update.
            </param>
            <param name="success">
            Callback used when the animation completes, or when the animation
            gets interrupted. In this case, the callback parameter will be false.
            </param>
            <param name="error">
            Callback used if there was an error processing the animation.
            </param>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.OnSuspend">
            <summary>
            Called when the host receives the suspend event.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.OnResume">
            <summary>
            Called when the host receives the resume event.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.OnDestroy">
            <summary>
            Called when the host is shutting down.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.OnBatchComplete">
            <summary>
            To implement the transactional requirement, UI changes are only
            committed to the actual view hierarchy once a batch of JavaScript
            to native calls have been completed.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.UIManagerModule.OnReactInstanceDispose">
            <summary>
            Called before a <see cref="T:ReactNative.Bridge.IReactInstance"/> is disposed.
            </summary>
        </member>
        <member name="T:ReactNative.UIManager.UIViewOperationQueue">
            <summary>
            This class acts as a buffer for command executed on
            <see cref="P:ReactNative.UIManager.UIViewOperationQueue.NativeViewHierarchyManager"/>. It exposes similar methods as
            mentioned classes but instead of executing commands immediately, it 
            enqueues those operations in a queue that is then flushed from 
            <see cref="T:ReactNative.UIManager.UIManagerModule"/> once a JavaScript batch of UI operations
            is finished.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.UIViewOperationQueue.#ctor(ReactNative.Bridge.ReactContext,ReactNative.UIManager.NativeViewHierarchyManager)">
            <summary>
            Instantiates the <see cref="T:ReactNative.UIManager.UIViewOperationQueue"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="nativeViewHierarchyManager">
            The native view hierarchy manager.
            </param>
        </member>
        <member name="P:ReactNative.UIManager.UIViewOperationQueue.NativeViewHierarchyManager">
            <summary>
            The native view hierarchy manager.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.UIViewOperationQueue.IsEmpty">
            <summary>
            Checks if the operation queue is empty.
            </summary>
            <returns>
            <b>true</b> if the queue is empty, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:ReactNative.UIManager.UIViewOperationQueue.AddRootView(System.Int32,ReactNative.UIManager.SizeMonitoringCanvas,ReactNative.UIManager.ThemedReactContext)">
            <summary>
            Adds a root view to the hierarchy.
            </summary>
            <param name="tag">The root view tag.</param>
            <param name="rootView">The root view.</param>
            <param name="themedRootContext">The React context.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIViewOperationQueue.EnqueueRemoveRootView(System.Int32)">
            <summary>
            Enqueues an operation to remove the root view.
            </summary>
            <param name="rootViewTag">The root view tag.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIViewOperationQueue.EnqueueSetJavaScriptResponder(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Enqueues an operation to set the JavaScript responder.
            </summary>
            <param name="tag">The view tag.</param>
            <param name="initialTag">The initial tag.</param>
            <param name="blockNativeResponder">
            Signal to block the native responder.
            </param>
        </member>
        <member name="M:ReactNative.UIManager.UIViewOperationQueue.EnqueueClearJavaScriptResponder">
            <summary>
            Enqueues an operation to clear the JavaScript responder.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.UIViewOperationQueue.EnqueueDispatchCommand(System.Int32,System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Enqueues an operation to dispatch a command.
            </summary>
            <param name="tag">The view tag.</param>
            <param name="commandId">The command identifier.</param>
            <param name="commandArgs">The command arguments.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIViewOperationQueue.EnqueueUpdateExtraData(System.Int32,System.Object)">
            <summary>
            Enqueues an operation to update the extra data for a view.
            </summary>
            <param name="reactTag">The view tag.</param>
            <param name="extraData">The extra data.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIViewOperationQueue.EnqueueShowPopupMenu(System.Int32,System.String[],ReactNative.Bridge.ICallback,ReactNative.Bridge.ICallback)">
            <summary>
            Enqueues an operation to show a popup menu.
            </summary>
            <param name="tag">The view tag.</param>
            <param name="items">The menu items.</param>
            <param name="error">Called on error.</param>
            <param name="success">Called on success.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIViewOperationQueue.EnqueueUIBlock(ReactNative.UIManager.IUIBlock)">
            <summary>
            Enqueues a operation to execute a UIBlock.
            </summary>
            <param name="block">The UI block.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIViewOperationQueue.EnqueueCreateView(ReactNative.UIManager.ThemedReactContext,System.Int32,System.String,ReactNative.UIManager.ReactStylesDiffMap)">
            <summary>
            Enqueues an operation to create a view.
            </summary>
            <param name="themedContext">The React context.</param>
            <param name="viewReactTag">The view React tag.</param>
            <param name="viewClassName">The view class name.</param>
            <param name="initialProps">The initial properties.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIViewOperationQueue.EnqueueConfigureLayoutAnimation(Newtonsoft.Json.Linq.JObject,ReactNative.Bridge.ICallback,ReactNative.Bridge.ICallback)">
            <summary>
            Enqueue a configure layout animation operation.
            </summary>
            <param name="config">The configuration.</param>
            <param name="success">The success callback.</param>
            <param name="error">The error callback.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIViewOperationQueue.EnqueueUpdateProperties(System.Int32,System.String,ReactNative.UIManager.ReactStylesDiffMap)">
            <summary>
            Enqueues an operation to update the properties of a view.
            </summary>
            <param name="tag">The view tag.</param>
            <param name="className">The class name.</param>
            <param name="props">The properties.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIViewOperationQueue.EnqueueUpdateLayout(System.Int32,System.Int32,ReactNative.UIManager.Dimensions)">
            <summary>
            Enqueues an operation to update the layout of a view.
            </summary>
            <param name="parentTag">The parent tag.</param>
            <param name="tag">The view tag.</param>
            <param name="dimensions">The dimensions.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIViewOperationQueue.EnqueueManageChildren(System.Int32,System.Int32[],ReactNative.UIManager.ViewAtIndex[],System.Int32[])">
            <summary>
            Enqueues an operation to manage the children of a view.
            </summary>
            <param name="tag">The view to manage.</param>
            <param name="indexesToRemove">The indices to remove.</param>
            <param name="viewsToAdd">The views to add.</param>
            <param name="tagsToDelete">The tags to delete.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIViewOperationQueue.EnqueueSetChildren(System.Int32,System.Int32[])">
            <summary>
            Enqueues an operation to set the children of a view.
            </summary>
            <param name="reactTag">The view to manage.</param>
            <param name="childrenTags">The children tags.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIViewOperationQueue.EnqueueMeasure(System.Int32,ReactNative.Bridge.ICallback)">
            <summary>
            Enqueues an operation to measure the view.
            </summary>
            <param name="reactTag">The tag of the view to measure.</param>
            <param name="callback">The measurement result callback.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIViewOperationQueue.EnqueueMeasureInWindow(System.Int32,ReactNative.Bridge.ICallback)">
            <summary>
            Enqueues an operation to measure the view relative to the window.
            </summary>
            <param name="reactTag">The tag of the view to measure.</param>
            <param name="callback">The measurement result callback.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIViewOperationQueue.EnqueueFindTargetForTouch(System.Int32,System.Double,System.Double,ReactNative.Bridge.ICallback)">
            <summary>
            Enqueues an operation to find a touch target.
            </summary>
            <param name="reactTag">The parent view to search from.</param>
            <param name="targetX">The x-coordinate of the touch event.</param>
            <param name="targetY">The y-coordinate of the touch event.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:ReactNative.UIManager.UIViewOperationQueue.OnSuspend">
            <summary>
            Called when the host receives the suspend event.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.UIViewOperationQueue.OnResume">
            <summary>
            Called when the host receives the resume event.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.UIViewOperationQueue.OnDestroy">
            <summary>
            Called when the host is shutting down.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.UIViewOperationQueue.DispatchViewUpdates(System.Int32)">
            <summary>
            Dispatches the view updates.
            </summary>
            <param name="batchId">The batch identifier.</param>
        </member>
        <member name="T:ReactNative.UIManager.ViewAtIndex">
            <summary>
            A data structure for holding tags and indices.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.ViewAtIndex.#ctor(System.Int32,System.Int32)">
            <summary>
            Instantiates the <see cref="T:ReactNative.UIManager.ViewAtIndex"/>.
            </summary>
            <param name="tag">The tag.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:ReactNative.UIManager.ViewAtIndex.IndexComparer">
            <summary>
            A comparer for <see cref="T:ReactNative.UIManager.ViewAtIndex"/> instances to sort by index.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ViewAtIndex.Index">
            <summary>
            The index of the view.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ViewAtIndex.Tag">
            <summary>
            The tag of the view.
            </summary>
        </member>
        <member name="T:ReactNative.UIManager.ViewManager`2">
            <summary>
            Class responsible for knowing how to create and update views of a given
            type. It is also responsible for creating and updating
            <see cref="T:ReactNative.UIManager.ReactShadowNode"/> subclasses used for calculating position
            and size for the corresponding native view.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ViewManager`2.Name">
            <summary>
            The name of this view manager. This will be the name used to 
            reference this view manager from JavaScript.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ViewManager`2.ShadowNodeType">
            <summary>
            The <see cref="T:System.Type"/> instance that represents the type of shadow
            node that this manager will return from
            <see cref="M:ReactNative.UIManager.ViewManager`2.CreateShadowNodeInstance"/>.
            
            This method will be used in the bridge initialization phase to
            collect properties exposed using the <see cref="T:ReactNative.UIManager.Annotations.ReactPropAttribute"/>
            annotation from the <see cref="T:ReactNative.UIManager.ReactShadowNode"/> subclass.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ViewManager`2.CommandsMap">
            <summary>
            The commands map for the view manager.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ViewManager`2.ExportedCustomBubblingEventTypeConstants">
            <summary>
            The exported custom bubbling event types.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ViewManager`2.ExportedCustomDirectEventTypeConstants">
            <summary>
            The exported custom direct event types.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ViewManager`2.ExportedViewConstants">
            <summary>
            The exported view constants.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ViewManager`2.NativeProperties">
            <summary>
            Creates a shadow node for the view manager.
            </summary>
            <returns>The shadow node instance.</returns>
        </member>
        <member name="M:ReactNative.UIManager.ViewManager`2.UpdateProperties(`0,ReactNative.UIManager.ReactStylesDiffMap)">
            <summary>
            Update the properties of the given view.
            </summary>
            <param name="viewToUpdate">The view to update.</param>
            <param name="props">The properties.</param>
        </member>
        <member name="M:ReactNative.UIManager.ViewManager`2.CreateView(ReactNative.UIManager.ThemedReactContext,ReactNative.Touch.JavaScriptResponderHandler)">
            <summary>
            Creates a view and installs event emitters on it.
            </summary>
            <param name="reactContext">The context.</param>
            <param name="responderHandler">The responder handler.</param>
            <returns>The view.</returns>
        </member>
        <member name="M:ReactNative.UIManager.ViewManager`2.OnDropViewInstance(ReactNative.UIManager.ThemedReactContext,`0)">
            <summary>
            Called when view is detached from view hierarchy and allows for 
            additional cleanup by the <see cref="T:ReactNative.UIManager.IViewManager"/> subclass.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The view.</param>
        </member>
        <member name="M:ReactNative.UIManager.ViewManager`2.CreateShadowNodeInstance">
            <summary>
            This method should return the subclass of <see cref="T:ReactNative.UIManager.ReactShadowNode"/>
            which will be then used for measuring the position and size of the
            view. 
            </summary>
            <remarks>
            In most cases, this will just return an instance of
            <see cref="T:ReactNative.UIManager.ReactShadowNode"/>.
            </remarks>
            <returns>The shadow node instance.</returns>
        </member>
        <member name="M:ReactNative.UIManager.ViewManager`2.UpdateExtraData(`0,System.Object)">
            <summary>
            Implement this method to receive optional extra data enqueued from
            the corresponding instance of <see cref="T:ReactNative.UIManager.ReactShadowNode"/> in
            <see cref="M:ReactNative.UIManager.ReactShadowNode.OnCollectExtraUpdates(ReactNative.UIManager.UIViewOperationQueue)"/>.
            </summary>
            <param name="root">The root view.</param>
            <param name="extraData">The extra data.</param>
        </member>
        <member name="M:ReactNative.UIManager.ViewManager`2.ReceiveCommand(`0,System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Implement this method to receive events/commands directly from
            JavaScript through the <see cref="T:ReactNative.UIManager.UIManagerModule"/>.
            </summary>
            <param name="view">
            The view instance that should receive the command.
            </param>
            <param name="commandId">Identifer for the command.</param>
            <param name="args">Optional arguments for the command.</param>
        </member>
        <member name="M:ReactNative.UIManager.ViewManager`2.GetDimensions(`0)">
            <summary>
            Gets the dimensions of the view.
            </summary>
            <param name="view">The view.</param>
            <returns>The view dimensions.</returns>
        </member>
        <member name="M:ReactNative.UIManager.ViewManager`2.SetDimensions(`0,ReactNative.UIManager.Dimensions)">
            <summary>
            Sets the dimensions of the view.
            </summary>
            <param name="view">The view.</param>
            <param name="dimensions">The output buffer.</param>
        </member>
        <member name="M:ReactNative.UIManager.ViewManager`2.CreateViewInstance(ReactNative.UIManager.ThemedReactContext)">
            <summary>
            Creates a new view instance of type <typeparamref name="TFrameworkElement"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <returns>The view instance.</returns>
        </member>
        <member name="M:ReactNative.UIManager.ViewManager`2.AddEventEmitters(ReactNative.UIManager.ThemedReactContext,`0)">
            <summary>
            Subclasses can override this method to install custom event 
            emitters on the given view.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The view instance.</param>
            <remarks>
            Consider overriding this method if your view needs to emit events
            besides basic touch events to JavaScript (e.g., scroll events).
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.ViewManager`2.OnAfterUpdateTransaction(`0)">
            <summary>
            Callback that will be triggered after all properties are updated in
            the current update transation (all <see cref="T:ReactNative.UIManager.Annotations.ReactPropAttribute"/> handlers
            for properties updated in the current transaction have been called).
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="T:ReactNative.UIManager.ViewManagerRegistry">
            <summary>
            Class that stores the mapping between the native view name used in
            JavaScript and the instance of <see cref="T:ReactNative.UIManager.IViewManager"/>.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.ViewManagerRegistry.#ctor(System.Collections.Generic.IReadOnlyList{ReactNative.UIManager.IViewManager})">
            <summary>
            Instantiates the <see cref="T:ReactNative.UIManager.ViewManagerRegistry"/>.
            </summary>
            <param name="viewManagers">
            The view managers to include in the registry.
            </param>
        </member>
        <member name="M:ReactNative.UIManager.ViewManagerRegistry.Get(System.String)">
            <summary>
            Gets the view manager for the given class name.
            </summary>
            <param name="className">The view manager class name.</param>
            <returns>The view manager.</returns>
        </member>
        <member name="T:ReactNative.UIManager.ViewParentManager`2">
            <summary>
            Class providing child management API for view managers.
            </summary>
            <typeparam name="TFrameworkElement">
            The view type this class manages.
            </typeparam>
            <typeparam name="TLayoutShadowNode">
            The shadow node type used by this manager class.
            </typeparam>
        </member>
        <member name="P:ReactNative.UIManager.ViewParentManager`2.ShadowNodeType">
            <summary>
            The <see cref="T:System.Type"/> instance that represents the type of shadow
            node that this manager will return from
            <see cref="M:ReactNative.UIManager.ViewParentManager`2.CreateShadowNodeInstance"/>.
            
            This method will be used in the bridge initialization phase to
            collect properties exposed using the <see cref="T:ReactNative.UIManager.Annotations.ReactPropAttribute"/>
            annotation from the <see cref="T:ReactNative.UIManager.ReactShadowNode"/> subclass.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.ViewParentManager`2.NeedsCustomLayoutForChildren">
            <summary>
            Signals whether the view type needs to handle laying out its own
            children instead of deferring to the standard CSS layout algorithm.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.ViewParentManager`2.CreateShadowNodeInstance">
            <summary>
            Creates a shadow node instance for the view manager.
            </summary>
            <returns>The shadow node instance.</returns>
        </member>
        <member name="M:ReactNative.UIManager.ViewParentManager`2.UpdateExtraData(`0,System.Object)">
            <summary>
            Implement this method to receive optional extra data enqueued from
            the corresponding instance of <see cref="T:ReactNative.UIManager.ReactShadowNode"/> in
            <see cref="M:ReactNative.UIManager.ReactShadowNode.OnCollectExtraUpdates(ReactNative.UIManager.UIViewOperationQueue)"/>.
            </summary>
            <param name="root">The root view.</param>
            <param name="extraData">The extra data.</param>
        </member>
        <member name="M:ReactNative.UIManager.ViewParentManager`2.AddView(`0,Windows.UI.Xaml.DependencyObject,System.Int32)">
            <summary>
            Adds a child at the given index.
            </summary>
            <param name="parent">The parent view.</param>
            <param name="child">The child view.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:ReactNative.UIManager.ViewParentManager`2.GetChildCount(`0)">
            <summary>
            Gets the number of children in the view parent.
            </summary>
            <param name="parent">The view parent.</param>
            <returns>The number of children.</returns>
        </member>
        <member name="M:ReactNative.UIManager.ViewParentManager`2.GetChildAt(`0,System.Int32)">
            <summary>
            Gets the child at the given index.
            </summary>
            <param name="parent">The parent view.</param>
            <param name="index">The index.</param>
            <returns>The child view.</returns>
        </member>
        <member name="M:ReactNative.UIManager.ViewParentManager`2.RemoveChildAt(`0,System.Int32)">
            <summary>
            Removes the child at the given index.
            </summary>
            <param name="parent">The view parent.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:ReactNative.UIManager.ViewParentManager`2.RemoveAllChildren(`0)">
            <summary>
            Removes all children from the view parent.
            </summary>
            <param name="parent">The view parent.</param>
        </member>
        <member name="T:ReactNative.UIManager.ViewParentManager`1">
            <summary>
            Class providing child management API for view managers.
            </summary>
            <typeparam name="TFrameworkElement">
            The view type this class manages.
            </typeparam>
        </member>
        <member name="M:ReactNative.UIManager.ViewParentManager`1.CreateShadowNodeInstance">
            <summary>
            Creates a shadow node instance for the view manager.
            </summary>
            <returns>The shadow node instance.</returns>
        </member>
        <member name="T:ReactNative.UIManager.ViewParentManagerExtensions">
            <summary>
            Extension methods for <see cref="T:ReactNative.UIManager.IViewParentManager"/>. 
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.ViewParentManagerExtensions.TryRemoveView(ReactNative.UIManager.IViewParentManager,Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyObject)">
            <summary>
            Tries to remove a view from a <see cref="T:ReactNative.UIManager.IViewParentManager"/>. 
            </summary>
            <param name="viewManager">The view manager.</param>
            <param name="parent">The parent view.</param>
            <param name="view">The view to remove.</param>
            <returns>
            <code>true</code> if a view is removed, <code>false</code> otherwise.
            </returns>
        </member>
        <member name="T:ReactNative.UIManager.ViewProps">
            <summary>
            Property keys for React views.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.ViewProps.PaddingMarginSpacingTypes">
            <summary>
            Ordered list of margin spacing types.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.ViewProps.BorderSpacingTypes">
            <summary>
            Ordered list of border spacing types.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.ViewProps.PositionSpacingTypes">
            <summary>
            Ordered list of position spacing types.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.ViewProps.IsLayoutOnly(ReactNative.UIManager.ReactStylesDiffMap,System.String)">
            <summary>
            Checks if the property key is layout-only.
            </summary>
            <param name="props">The prop collection.</param>
            <param name="prop">The prop name.</param>
            <returns>
            <b>true</b> if the property is layout-only, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="T:ReactNative.Views.Image.ReactImageManager">
            <summary>
            The view manager responsible for rendering native images.
            </summary>
        </member>
        <member name="P:ReactNative.Views.Image.ReactImageManager.Name">
            <summary>
            The view manager name.
            </summary>
        </member>
        <member name="P:ReactNative.Views.Image.ReactImageManager.ExportedCustomDirectEventTypeConstants">
            <summary>
            The view manager event constants.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Image.ReactImageManager.SetResizeMode(Windows.UI.Xaml.Controls.Border,System.String)">
            <summary>
            Set the scaling mode of the image.
            </summary>
            <param name="view">The image view instance.</param>
            <param name="resizeMode">The scaling mode.</param>
        </member>
        <member name="M:ReactNative.Views.Image.ReactImageManager.SetSource(Windows.UI.Xaml.Controls.Border,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Set the source URI of the image.
            </summary>
            <param name="view">The image view instance.</param>
            <param name="sources">The source URI.</param>
        </member>
        <member name="M:ReactNative.Views.Image.ReactImageManager.SetBorderRadius(Windows.UI.Xaml.Controls.Border,System.Double)">
            <summary>
            The border radius of the <see cref="T:ReactNative.ReactRootView"/>.
            </summary>
            <param name="view">The image view instance.</param>
            <param name="radius">The border radius value.</param>
        </member>
        <member name="M:ReactNative.Views.Image.ReactImageManager.SetBorderColor(Windows.UI.Xaml.Controls.Border,System.Nullable{System.UInt32})">
            <summary>
            Set the border color of the image view.
            </summary>
            <param name="view">The image view instance.</param>
            <param name="color">The masked color value.</param>
        </member>
        <member name="M:ReactNative.Views.Image.ReactImageManager.SetBorderWidth(Windows.UI.Xaml.Controls.Border,System.Int32,System.Double)">
            <summary>
            Sets the border thickness of the image view.
            </summary>
            <param name="view">The image view instance.</param>
            <param name="index">The property index.</param>
            <param name="width">The border width in pixels.</param>
        </member>
        <member name="M:ReactNative.Views.Image.ReactImageManager.OnDropViewInstance(ReactNative.UIManager.ThemedReactContext,Windows.UI.Xaml.Controls.Border)">
            <summary>
            Called when view is detached from view hierarchy and allows for 
            additional cleanup.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The view.</param>
        </member>
        <member name="M:ReactNative.Views.Image.ReactImageManager.CreateViewInstance(ReactNative.UIManager.ThemedReactContext)">
            <summary>
            Creates the image view instance.
            </summary>
            <param name="reactContext">The React context.</param>
            <returns>The image view instance.</returns>
        </member>
        <member name="M:ReactNative.Views.Image.ReactImageManager.SetDimensions(Windows.UI.Xaml.Controls.Border,ReactNative.UIManager.Dimensions)">
            <summary>
            Sets the dimensions of the view.
            </summary>
            <param name="view">The view.</param>
            <param name="dimensions">The output buffer.</param>
        </member>
        <member name="M:ReactNative.Views.Image.ReactImageManager.SetUriFromSingleSource(Windows.UI.Xaml.Controls.Border,System.String)">
            <summary>
            Set the source URI of the image.
            </summary>
            <param name="view">The image view instance.</param>
            <param name="source">The source URI.</param>
        </member>
        <member name="M:ReactNative.Views.Image.ReactImageManager.SetUriFromMultipleSources(Windows.UI.Xaml.Controls.Border)">
            <summary>
            Chooses the uri with the size closest to the target image size. Must be called only after the
            layout pass when the sizes of the target image have been computed, and when there are at least
            two sources to choose from.
            </summary>
            <param name="view">The image view instance.</param>
        </member>
        <member name="T:ReactNative.Views.Image.ReactImageLoadEvent">
            <summary>
            Event class for all image loading related events.
            </summary>
        </member>
        <member name="F:ReactNative.Views.Image.ReactImageLoadEvent.OnLoadStart">
            <summary>
            The event identifier for image load start.
            </summary>
        </member>
        <member name="F:ReactNative.Views.Image.ReactImageLoadEvent.OnLoad">
            <summary>
            The event identifier for image load.
            </summary>
        </member>
        <member name="F:ReactNative.Views.Image.ReactImageLoadEvent.OnLoadEnd">
            <summary>
            The event identifier for image load end.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Image.ReactImageLoadEvent.#ctor(System.Int32,System.Int32)">
            <summary>
            Instantiates a <see cref="T:ReactNative.Views.Image.ReactImageLoadEvent"/>.
            </summary>
            <param name="viewId">The view identifier.</param>
            <param name="eventType">The event identifier.</param>
        </member>
        <member name="M:ReactNative.Views.Image.ReactImageLoadEvent.#ctor(System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Instantiates a <see cref="T:ReactNative.Views.Image.ReactImageLoadEvent"/>.
            </summary>
            <param name="viewId">The view identifier.</param>
            <param name="eventType">The event identifier.</param>
            <param name="imageUri">The image URI.</param>
            <param name="width">The image width.</param>
            <param name="height">The image height.</param>
        </member>
        <member name="P:ReactNative.Views.Image.ReactImageLoadEvent.EventName">
            <summary>
            The name of the event.
            </summary>
        </member>
        <member name="P:ReactNative.Views.Image.ReactImageLoadEvent.CoalescingKey">
            <summary>
            The coalescing key for the event.
            </summary>
        </member>
        <member name="P:ReactNative.Views.Image.ReactImageLoadEvent.SortingKey">
            <summary>
            The sorting key for the event.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Image.ReactImageLoadEvent.Dispatch(ReactNative.UIManager.Events.RCTEventEmitter)">
            <summary>
            Dispatches the event.
            </summary>
            <param name="eventEmitter">The event emitter.</param>
        </member>
        <member name="T:ReactNative.Views.Progress.ReactProgressRingViewManager">
            <summary>
            Represents a native <see cref="T:Windows.UI.Xaml.Controls.ProgressRing"/> component.
            </summary>
        </member>
        <member name="P:ReactNative.Views.Progress.ReactProgressRingViewManager.Name">
            <summary>
            The name of this view manager. This will be the name used to 
            reference this view manager from JavaScript.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Progress.ReactProgressRingViewManager.SetColor(Windows.UI.Xaml.Controls.ProgressRing,System.Nullable{System.UInt32})">
            <summary>
            Sets the font color for the node.
            </summary>
            <param name="view">The view instance.</param>
            <param name="color">The masked color value.</param>
        </member>
        <member name="M:ReactNative.Views.Progress.ReactProgressRingViewManager.SetAnimating(Windows.UI.Xaml.Controls.ProgressRing,System.Boolean)">
            <summary>
            Determines the activity of a <see cref="T:Windows.UI.Xaml.Controls.ProgressRing"/> component.
            </summary>
            <param name="view">The native <see cref="T:Windows.UI.Xaml.Controls.ProgressRing"/>.</param>
            <param name="value">Whether the <see cref="T:Windows.UI.Xaml.Controls.ProgressRing"/> is active or not.</param>
        </member>
        <member name="M:ReactNative.Views.Progress.ReactProgressRingViewManager.CreateShadowNodeInstance">
            <summary>
            This method should return the <see cref="T:ReactNative.Views.Progress.ReactProgressRingShadowNode"/>
            which will be then used for measuring the position and size of the
            view. 
            </summary>
            <returns>The shadow node instance.</returns>
        </member>
        <member name="M:ReactNative.Views.Progress.ReactProgressRingViewManager.UpdateExtraData(Windows.UI.Xaml.Controls.ProgressRing,System.Object)">
            <summary>
            Implement this method to receive optional extra data enqueued from
            the corresponding instance of <see cref="T:ReactNative.UIManager.ReactShadowNode"/> in
            <see cref="M:ReactNative.UIManager.ReactShadowNode.OnCollectExtraUpdates(ReactNative.UIManager.UIViewOperationQueue)"/>.
            </summary>
            <param name="root">The root view.</param>
            <param name="extraData">The extra data.</param>
        </member>
        <member name="M:ReactNative.Views.Progress.ReactProgressRingViewManager.CreateViewInstance(ReactNative.UIManager.ThemedReactContext)">
            <summary>
            Creates a new view instance of a native <see cref="T:Windows.UI.Xaml.Controls.ProgressRing"/> component.
            </summary>
            <param name="reactContext">The <see cref="T:ReactNative.UIManager.ThemedReactContext"/> of the components view context.</param>
            <returns>Returns a native <see cref="T:Windows.UI.Xaml.Controls.ProgressRing"/> component.</returns>
        </member>
        <member name="T:ReactNative.Views.Progress.ReactProgressRingShadowNode">
            <summary>
            Represents a native <see cref="T:Windows.UI.Xaml.Controls.ProgressRing"/> component.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Progress.ReactProgressRingShadowNode.#ctor">
            <summary>
            Initializes an instance of a <see cref="T:ReactNative.Views.Progress.ReactProgressRingShadowNode"/>
            </summary>
        </member>
        <member name="M:ReactNative.Views.Progress.ReactProgressRingShadowNode.MeasureProgressRing(Facebook.Yoga.YogaNode,System.Single,Facebook.Yoga.YogaMeasureMode,System.Single,Facebook.Yoga.YogaMeasureMode)">
            <summary>
            Measures the width and height of a <see cref="T:Windows.UI.Xaml.Controls.ProgressRing"/>.
            </summary>
            <param name="node">The css style of the rendered <see cref="T:Windows.UI.Xaml.Controls.ProgressRing"/>.</param>
            <param name="width">The parameterized native width of the control.</param>
            <param name="widthMode">The width measurement mode.</param>
            <param name="height">The parameterized native height of the control.</param>
            <param name="heightMode">The height measurement mode.</param>
            <returns>The measurement <see cref="T:Facebook.Yoga.MeasureOutput"/> for the <see cref="T:Windows.UI.Xaml.Controls.ProgressRing"/> component.</returns>
        </member>
        <member name="T:ReactNative.Views.Slider.ReactSliderManager">
            <summary>
            A view manager responsible for rendering Slider.
            </summary>
        </member>
        <member name="P:ReactNative.Views.Slider.ReactSliderManager.Name">
            <summary>
            The name of the view manager.
            </summary>
        </member>
        <member name="P:ReactNative.Views.Slider.ReactSliderManager.ExportedCustomDirectEventTypeConstants">
            <summary>
            The exported custom direct event types.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Slider.ReactSliderManager.SetDisabled(Windows.UI.Xaml.Controls.Slider,System.Boolean)">
            <summary>
            Sets whether a slider is disabled.
            </summary>
            <param name="view">a slider view.</param>
            <param name="disabled">
            Set to <code>true</code> if the picker should be disabled,
            otherwise, set to <code>false</code>.
            </param>
        </member>
        <member name="M:ReactNative.Views.Slider.ReactSliderManager.SetMinimumValue(Windows.UI.Xaml.Controls.Slider,System.Double)">
            <summary>
            Sets to change slider minimum value.
            </summary>
            <param name="view">a slider view.</param>
            <param name="minimum">The minimum slider value.</param>
        </member>
        <member name="M:ReactNative.Views.Slider.ReactSliderManager.SetMaximumValue(Windows.UI.Xaml.Controls.Slider,System.Double)">
            <summary>
            Sets to change slider maximum value.
            </summary>
            <param name="view">a slider view.</param>
            <param name="maximum">The maximum slider value.</param>
        </member>
        <member name="M:ReactNative.Views.Slider.ReactSliderManager.SetValue(Windows.UI.Xaml.Controls.Slider,System.Double)">
            <summary>
            Sets slider value.
            </summary>
            <param name="view">The slider view.</param>
            <param name="value">Slider value.</param>
        </member>
        <member name="M:ReactNative.Views.Slider.ReactSliderManager.SetStep(Windows.UI.Xaml.Controls.Slider,System.Double)">
            <summary>
            Sets slider step.
            </summary>
            <param name="view">The slider view.</param>
            <param name="step">Slider step.</param>
        </member>
        <member name="M:ReactNative.Views.Slider.ReactSliderManager.CreateShadowNodeInstance">
            <summary>
            This method should return the <see cref="T:ReactNative.Views.Slider.ReactSliderShadowNode"/>
            which will be then used for measuring the position and size of the
            view. 
            </summary>
            <returns>The shadow node instance.</returns>
        </member>
        <member name="M:ReactNative.Views.Slider.ReactSliderManager.OnDropViewInstance(ReactNative.UIManager.ThemedReactContext,Windows.UI.Xaml.Controls.Slider)">
            <summary>
            Called when view is detached from view hierarchy and allows for 
            additional cleanup by the <see cref="T:ReactNative.UIManager.IViewManager"/> subclass.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The view.</param>
        </member>
        <member name="M:ReactNative.Views.Slider.ReactSliderManager.UpdateExtraData(Windows.UI.Xaml.Controls.Slider,System.Object)">
            <summary>
            Implement this method to receive optional extra data enqueued from
            the corresponding instance of <see cref="T:ReactNative.UIManager.ReactShadowNode"/> in
            <see cref="M:ReactNative.UIManager.ReactShadowNode.OnCollectExtraUpdates(ReactNative.UIManager.UIViewOperationQueue)"/>.
            </summary>
            <param name="root">The root view.</param>
            <param name="extraData">The extra data.</param>
        </member>
        <member name="M:ReactNative.Views.Slider.ReactSliderManager.CreateViewInstance(ReactNative.UIManager.ThemedReactContext)">
            <summary>
            Returns the view instance for <see cref="N:ReactNative.Views.Slider"/>.
            </summary>
            <param name="reactContext"></param>
            <returns></returns>
        </member>
        <member name="M:ReactNative.Views.Slider.ReactSliderManager.AddEventEmitters(ReactNative.UIManager.ThemedReactContext,Windows.UI.Xaml.Controls.Slider)">
            <summary>
            Subclasses can override this method to install custom event 
            emitters on the given view.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The view instance.</param>
        </member>
        <member name="T:ReactNative.Views.Slider.ReactSliderChangeEvent">
            <summary>
            Event emitted by <see cref="T:ReactNative.Views.Slider.ReactSliderManager"/> native view after 
            value change.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Slider.ReactSliderChangeEvent.#ctor(System.Int32,System.Double)">
            <summary>
            Instantiates a <see cref="T:ReactNative.Views.Slider.ReactSliderChangeEvent"/>.
            </summary>
            <param name="viewTag">The view tag.</param>
            <param name="value">Slider value.</param>
        </member>
        <member name="P:ReactNative.Views.Slider.ReactSliderChangeEvent.EventName">
            <summary>
            The event name.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Slider.ReactSliderChangeEvent.Dispatch(ReactNative.UIManager.Events.RCTEventEmitter)">
            <summary>
            Dispatch this event to JavaScript using the given event emitter.
            </summary>
            <param name="eventEmitter">The event emitter.</param>
        </member>
        <member name="T:ReactNative.Views.Slider.ReactSliderCompleteEvent">
            <summary>
            Event emitted by <see cref="T:ReactNative.Views.Slider.ReactSliderManager"/> native view after 
            last value change.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Slider.ReactSliderCompleteEvent.#ctor(System.Int32,System.Double)">
            <summary>
            Instantiates a <see cref="T:ReactNative.Views.Slider.ReactSliderCompleteEvent"/>.
            </summary>
            <param name="viewTag">The view tag.</param>
            <param name="value">Slider value.</param>
        </member>
        <member name="P:ReactNative.Views.Slider.ReactSliderCompleteEvent.EventName">
            <summary>
            The event name.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Slider.ReactSliderCompleteEvent.Dispatch(ReactNative.UIManager.Events.RCTEventEmitter)">
            <summary>
            Dispatch this event to JavaScript using the given event emitter.
            </summary>
            <param name="eventEmitter">The event emitter.</param>
        </member>
        <member name="T:ReactNative.Views.Slider.ReactSliderShadowNode">
            <summary>
            The shadow node implementation for Slider views.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Slider.ReactSliderShadowNode.#ctor">
            <summary>
            Instantiates the <see cref="T:ReactNative.Views.Slider.ReactSliderShadowNode"/>.
            </summary>
        </member>
        <member name="T:ReactNative.Views.Picker.ReactPickerManager">
            <summary>
            A view manager responsible for rendering picker.
            </summary>
        </member>
        <member name="P:ReactNative.Views.Picker.ReactPickerManager.Name">
            <summary>
            The name of the view manager.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Picker.ReactPickerManager.SetEnabled(Windows.UI.Xaml.Controls.ComboBox,System.Boolean)">
            <summary>
            Sets whether a picker is enabled.
            </summary>
            <param name="view">a combobox view.</param>
            <param name="enabled">
            Set to <code>true</code> if the picker should be enabled,
            otherwise, set to <code>false</code>.
            </param>
        </member>
        <member name="M:ReactNative.Views.Picker.ReactPickerManager.SetSelected(Windows.UI.Xaml.Controls.ComboBox,System.Int32)">
            <summary>
            Sets the selected item.
            </summary>
            <param name="view">a combobox instance.</param>
            <param name="selected">The selected item.</param>
        </member>
        <member name="M:ReactNative.Views.Picker.ReactPickerManager.SetItems(Windows.UI.Xaml.Controls.ComboBox,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Populates a <see cref="T:Windows.UI.Xaml.Controls.ComboBox"/>
            </summary>
            <param name="view">a combobox instance.</param>
            <param name="items">The picker items.</param>
        </member>
        <member name="M:ReactNative.Views.Picker.ReactPickerManager.CreateShadowNodeInstance">
            <summary>
            This method should return the <see cref="T:ReactNative.Views.Picker.ReactPickerShadowNode"/>
            which will be then used for measuring the position and size of the
            view. 
            </summary>
            <returns>The shadow node instance.</returns>
        </member>
        <member name="M:ReactNative.Views.Picker.ReactPickerManager.UpdateExtraData(Windows.UI.Xaml.Controls.ComboBox,System.Object)">
            <summary>
            Implement this method to receive optional extra data enqueued from
            the corresponding instance of <see cref="T:ReactNative.UIManager.ReactShadowNode"/> in
            <see cref="M:ReactNative.UIManager.ReactShadowNode.OnCollectExtraUpdates(ReactNative.UIManager.UIViewOperationQueue)"/>.
            </summary>
            <param name="root">The root view.</param>
            <param name="extraData">The extra data.</param>
        </member>
        <member name="M:ReactNative.Views.Picker.ReactPickerManager.OnDropViewInstance(ReactNative.UIManager.ThemedReactContext,Windows.UI.Xaml.Controls.ComboBox)">
            <summary>
            Called when view is detached from view hierarchy and allows for 
            additional cleanup by the <see cref="T:ReactNative.Views.Picker.ReactPickerManager"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The view.</param>
        </member>
        <member name="M:ReactNative.Views.Picker.ReactPickerManager.CreateViewInstance(ReactNative.UIManager.ThemedReactContext)">
            <summary>
            Creates a new view instance of type <see cref="T:Windows.UI.Xaml.Controls.ComboBox"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <returns>The view instance.</returns>
        </member>
        <member name="M:ReactNative.Views.Picker.ReactPickerManager.AddEventEmitters(ReactNative.UIManager.ThemedReactContext,Windows.UI.Xaml.Controls.ComboBox)">
            <summary>
            Subclasses can override this method to install custom event 
            emitters on the given view.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The view instance.</param>
        </member>
        <member name="M:ReactNative.Views.Picker.ReactPickerManager.OnSelectionChanged(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
            Selection changed event handler.
            </summary>
            <param name="sender">an event sender.</param>
            <param name="e">the event.</param>
        </member>
        <member name="T:ReactNative.Views.Picker.ReactPickerManager.ReactPickerEvent">
            <summary>
            A picker specific event.
            </summary>
        </member>
        <member name="T:ReactNative.Views.Picker.ReactPickerShadowNode">
            <summary>
            The shadow node implementation for Picker views.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Picker.ReactPickerShadowNode.#ctor">
            <summary>
            Instantiates the <see cref="T:ReactNative.Views.Picker.ReactPickerShadowNode"/>.
            </summary>
        </member>
        <member name="T:ReactNative.Views.Scroll.ReactScrollViewManager">
            <summary>
            The view manager for scrolling views.
            </summary>
        </member>
        <member name="P:ReactNative.Views.Scroll.ReactScrollViewManager.Name">
            <summary>
            The name of the view manager.
            </summary>
        </member>
        <member name="P:ReactNative.Views.Scroll.ReactScrollViewManager.CommandsMap">
            <summary>
            The commands map for the view manager.
            </summary>
        </member>
        <member name="P:ReactNative.Views.Scroll.ReactScrollViewManager.ExportedCustomDirectEventTypeConstants">
            <summary>
            The exported custom direct event types.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Scroll.ReactScrollViewManager.SetBackgroundColor(Windows.UI.Xaml.Controls.ScrollViewer,System.UInt32)">
            <summary>
            Sets the background color of the view.
            </summary>
            <param name="view">The view instance.</param>
            <param name="color">The masked color value.</param>
        </member>
        <member name="M:ReactNative.Views.Scroll.ReactScrollViewManager.SetEnabled(Windows.UI.Xaml.Controls.ScrollViewer,System.Boolean)">
            <summary>
            Sets whether scroll is enabled on the view.
            </summary>
            <param name="view">The view instance.</param>
            <param name="enabled">The enabled value.</param>
        </member>
        <member name="M:ReactNative.Views.Scroll.ReactScrollViewManager.SetHorizontal(Windows.UI.Xaml.Controls.ScrollViewer,System.Boolean)">
            <summary>
            Sets whether horizontal scroll is enabled on the view.
            </summary>
            <param name="view">The view instance.</param>
            <param name="horizontal">
            The flag signaling whether horizontal scrolling is enabled.
            </param>
        </member>
        <member name="M:ReactNative.Views.Scroll.ReactScrollViewManager.SetShowsHorizontalScrollIndicator(Windows.UI.Xaml.Controls.ScrollViewer,System.Boolean)">
            <summary>
            Sets whether the horizontal scroll indicator is shown.
            </summary>
            <param name="view">The view instance.</param>
            <param name="showIndicator">
            The value to show the indicator or not.
            </param>
        </member>
        <member name="M:ReactNative.Views.Scroll.ReactScrollViewManager.SetShowsVerticalScrollIndicator(Windows.UI.Xaml.Controls.ScrollViewer,System.Boolean)">
            <summary>
            Sets whether the vertical scroll indicator is shown.
            </summary>
            <param name="view">The view instance.</param>
            <param name="showIndicator">
            The value to show the indicator or not.
            </param>
        </member>
        <member name="M:ReactNative.Views.Scroll.ReactScrollViewManager.SetContentOffset(Windows.UI.Xaml.Controls.ScrollViewer,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Sets the content offset of the scroll view.
            </summary>
            <param name="view">The view instance.</param>
            <param name="contentOffset">The content offset.</param>
        </member>
        <member name="M:ReactNative.Views.Scroll.ReactScrollViewManager.SetMinimumZoomScale(Windows.UI.Xaml.Controls.ScrollViewer,System.Nullable{System.Single})">
            <summary>
            Sets the minimum zoom scale for the view.
            </summary>
            <param name="view">The view instance.</param>
            <param name="zoomScale">The zoom scale.</param>
        </member>
        <member name="M:ReactNative.Views.Scroll.ReactScrollViewManager.SetMaximumZoomScale(Windows.UI.Xaml.Controls.ScrollViewer,System.Nullable{System.Single})">
            <summary>
            Sets the maximum zoom scale for the view.
            </summary>
            <param name="view">The view instance.</param>
            <param name="zoomScale">The zoom scale.</param>
        </member>
        <member name="M:ReactNative.Views.Scroll.ReactScrollViewManager.SetZoomScale(Windows.UI.Xaml.Controls.ScrollViewer,System.Nullable{System.Single})">
            <summary>
            Sets the zoom scale for the view.
            </summary>
            <param name="view">The view instance.</param>
            <param name="zoomScale">The zoom scale.</param>
        </member>
        <member name="M:ReactNative.Views.Scroll.ReactScrollViewManager.SetZoomScale(Windows.UI.Xaml.Controls.ScrollViewer,System.Nullable{System.Boolean})">
            <summary>
            Enables or disables scroll view zoom.
            </summary>
            <param name="view">The view instance.</param>
            <param name="enabled">Signals whether zoom is enabled.</param>
        </member>
        <member name="M:ReactNative.Views.Scroll.ReactScrollViewManager.AddView(Windows.UI.Xaml.Controls.ScrollViewer,Windows.UI.Xaml.DependencyObject,System.Int32)">
            <summary>
            Adds a child at the given index.
            </summary>
            <param name="parent">The parent view.</param>
            <param name="child">The child view.</param>
            <param name="index">The index.</param>
            <remarks>
            <see cref="T:ReactNative.Views.Scroll.ReactScrollViewManager"/> only supports one child.
            </remarks>
        </member>
        <member name="M:ReactNative.Views.Scroll.ReactScrollViewManager.GetChildAt(Windows.UI.Xaml.Controls.ScrollViewer,System.Int32)">
            <summary>
            Gets the child at the given index.
            </summary>
            <param name="parent">The parent view.</param>
            <param name="index">The index.</param>
            <returns>The child view.</returns>
            <remarks>
            <see cref="T:ReactNative.Views.Scroll.ReactScrollViewManager"/> only supports one child.
            </remarks>
        </member>
        <member name="M:ReactNative.Views.Scroll.ReactScrollViewManager.GetChildCount(Windows.UI.Xaml.Controls.ScrollViewer)">
            <summary>
            Gets the number of children in the view parent.
            </summary>
            <param name="parent">The view parent.</param>
            <returns>The number of children.</returns>
        </member>
        <member name="M:ReactNative.Views.Scroll.ReactScrollViewManager.RemoveAllChildren(Windows.UI.Xaml.Controls.ScrollViewer)">
            <summary>
            Removes all children from the view parent.
            </summary>
            <param name="parent">The view parent.</param>
        </member>
        <member name="M:ReactNative.Views.Scroll.ReactScrollViewManager.RemoveChildAt(Windows.UI.Xaml.Controls.ScrollViewer,System.Int32)">
            <summary>
            Removes the child at the given index.
            </summary>
            <param name="parent">The view parent.</param>
            <param name="index">The index.</param>
            <remarks>
            <see cref="T:ReactNative.Views.Scroll.ReactScrollViewManager"/> only supports one child.
            </remarks>
        </member>
        <member name="M:ReactNative.Views.Scroll.ReactScrollViewManager.OnDropViewInstance(ReactNative.UIManager.ThemedReactContext,Windows.UI.Xaml.Controls.ScrollViewer)">
            <summary>
            Called when view is detached from view hierarchy and allows for 
            additional cleanup by the <see cref="T:ReactNative.Views.Scroll.ReactScrollViewManager"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The view.</param>
        </member>
        <member name="M:ReactNative.Views.Scroll.ReactScrollViewManager.ReceiveCommand(Windows.UI.Xaml.Controls.ScrollViewer,System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Receive events/commands directly from JavaScript through the 
            <see cref="T:ReactNative.UIManager.UIManagerModule"/>.
            </summary>
            <param name="view">
            The view instance that should receive the command.
            </param>
            <param name="commandId">Identifer for the command.</param>
            <param name="args">Optional arguments for the command.</param>
        </member>
        <member name="M:ReactNative.Views.Scroll.ReactScrollViewManager.CreateViewInstance(ReactNative.UIManager.ThemedReactContext)">
            <summary>
            Creates a new view instance.
            </summary>
            <param name="reactContext">The React context.</param>
            <returns>The view instance.</returns>
        </member>
        <member name="M:ReactNative.Views.Scroll.ReactScrollViewManager.AddEventEmitters(ReactNative.UIManager.ThemedReactContext,Windows.UI.Xaml.Controls.ScrollViewer)">
            <summary>
            Adds event emitters for drag and scroll events.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The view instance.</param>
        </member>
        <member name="T:ReactNative.Views.Scroll.ScrollEventType">
            <summary>
            Scroll event types.
            </summary>
        </member>
        <member name="F:ReactNative.Views.Scroll.ScrollEventType.BeginDrag">
            <summary>
            The begin drag event.
            </summary>
        </member>
        <member name="F:ReactNative.Views.Scroll.ScrollEventType.EndDrag">
            <summary>
            The end drag event.
            </summary>
        </member>
        <member name="F:ReactNative.Views.Scroll.ScrollEventType.Scroll">
            <summary>
            The scroll event.
            </summary>
        </member>
        <member name="T:ReactNative.Views.Switch.ReactSwitchManager">
            <summary>
            A view manager for the <see cref="T:Windows.UI.Xaml.Controls.ToggleSwitch"/> element.
            </summary>
        </member>
        <member name="P:ReactNative.Views.Switch.ReactSwitchManager.Name">
            <summary>
            The name of this view manager. This will be the name used to 
            reference this view manager from JavaScript.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Switch.ReactSwitchManager.SetDisabled(Windows.UI.Xaml.Controls.ToggleSwitch,System.Boolean)">
            <summary>
            Sets whether a toggle switch is enabled.
            </summary>
            <param name="view">The toggle switch view.</param>
            <param name="disabled">
            Set to <code>true</code> if the toggle switch should be enabled,
            otherwise, set to <code>false</code>.
            </param>
        </member>
        <member name="M:ReactNative.Views.Switch.ReactSwitchManager.SetValue(Windows.UI.Xaml.Controls.ToggleSwitch,System.Boolean)">
            <summary>
            Sets whether a toggle switch is currently toggled.
            </summary>
            <param name="view">The toggle switch view.</param>
            <param name="on">
            Set to <code>true</code> if the toggle switch is toggled on,
            otherwise, set to <code>false</code>.
            </param>
        </member>
        <member name="M:ReactNative.Views.Switch.ReactSwitchManager.CreateShadowNodeInstance">
            <summary>
            This method should return the <see cref="T:ReactNative.Views.Switch.ReactSwitchShadowNode"/>
            which will be then used for measuring the position and size of the
            view. 
            </summary>
            <returns>The shadow node instance.</returns>
        </member>
        <member name="M:ReactNative.Views.Switch.ReactSwitchManager.UpdateExtraData(Windows.UI.Xaml.Controls.ToggleSwitch,System.Object)">
            <summary>
            Implement this method to receive optional extra data enqueued from
            the corresponding instance of <see cref="T:ReactNative.UIManager.ReactShadowNode"/> in
            <see cref="M:ReactNative.UIManager.ReactShadowNode.OnCollectExtraUpdates(ReactNative.UIManager.UIViewOperationQueue)"/>.
            </summary>
            <param name="root">The root view.</param>
            <param name="extraData">The extra data.</param>
        </member>
        <member name="M:ReactNative.Views.Switch.ReactSwitchManager.OnDropViewInstance(ReactNative.UIManager.ThemedReactContext,Windows.UI.Xaml.Controls.ToggleSwitch)">
            <summary>
            Called when view is detached from view hierarchy and allows for 
            additional cleanup by the <see cref="T:ReactNative.Views.Switch.ReactSwitchManager"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The view.</param>
        </member>
        <member name="M:ReactNative.Views.Switch.ReactSwitchManager.CreateViewInstance(ReactNative.UIManager.ThemedReactContext)">
            <summary>
            Creates a new view instance of type <see cref="T:Windows.UI.Xaml.Controls.ToggleSwitch"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <returns>The view instance.</returns>
        </member>
        <member name="M:ReactNative.Views.Switch.ReactSwitchManager.AddEventEmitters(ReactNative.UIManager.ThemedReactContext,Windows.UI.Xaml.Controls.ToggleSwitch)">
            <summary>
            Subclasses can override this method to install custom event 
            emitters on the given view.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The view instance.</param>
        </member>
        <member name="T:ReactNative.Views.Switch.ReactSwitchShadowNode">
            <summary>
            Shadow node class for measuring <see cref="T:Windows.UI.Xaml.Controls.ToggleSwitch"/> instances.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Switch.ReactSwitchShadowNode.#ctor">
            <summary>
            Instantiates the <see cref="T:ReactNative.Views.Switch.ReactSwitchShadowNode"/>.
            </summary>
        </member>
        <member name="T:ReactNative.Views.TextInput.ReactPasswordBoxManager">
            <summary>
            View manager for <see cref="T:Windows.UI.Xaml.Controls.PasswordBox"/>.
            </summary>
        </member>
        <member name="P:ReactNative.Views.TextInput.ReactPasswordBoxManager.Name">
            <summary>
            The name of the view manager.
            </summary>
        </member>
        <member name="P:ReactNative.Views.TextInput.ReactPasswordBoxManager.ExportedCustomBubblingEventTypeConstants">
            <summary>
            The exported custom bubbling event types.
            </summary>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxManager.SetPasswordChar(Windows.UI.Xaml.Controls.PasswordBox,System.String)">
            <summary>
            Sets the password character on the <see cref="T:Windows.UI.Xaml.Controls.PasswordBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="passwordCharString">The password masking character to set.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxManager.SetPasswordRevealMode(Windows.UI.Xaml.Controls.PasswordBox,System.String)">
            <summary>
            Sets the password reveal mode on the <see cref="T:Windows.UI.Xaml.Controls.PasswordBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="revealModeString">The reveal mode, either Hidden, Peek, or Visibile.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxManager.SetFontSize(Windows.UI.Xaml.Controls.PasswordBox,System.Double)">
            <summary>
            Sets the font size on the <see cref="T:Windows.UI.Xaml.Controls.PasswordBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="fontSize">The font size.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxManager.SetColor(Windows.UI.Xaml.Controls.PasswordBox,System.Nullable{System.UInt32})">
            <summary>
            Sets the font color for the node.
            </summary>
            <param name="view">The view instance.</param>
            <param name="color">The masked color value.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxManager.SetFontFamily(Windows.UI.Xaml.Controls.PasswordBox,System.String)">
            <summary>
            Sets the font family for the node.
            </summary>
            <param name="view">The view instance.</param>
            <param name="familyName">The font family.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxManager.SetFontWeight(Windows.UI.Xaml.Controls.PasswordBox,System.String)">
            <summary>
            Sets the font weight for the node.
            </summary>
            <param name="view">The view instance.</param>
            <param name="fontWeightString">The font weight string.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxManager.SetFontStyle(Windows.UI.Xaml.Controls.PasswordBox,System.String)">
            <summary>
            Sets the font style for the node.
            </summary>
            <param name="view">The view instance.</param>
            <param name="fontStyleString">The font style string.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxManager.SetPlaceholder(Windows.UI.Xaml.Controls.PasswordBox,System.String)">
            <summary>
            Sets the default text placeholder property on the <see cref="T:Windows.UI.Xaml.Controls.PasswordBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="placeholder">The placeholder text.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxManager.SetPlaceholderTextColor(Windows.UI.Xaml.Controls.PasswordBox,System.Nullable{System.UInt32})">
            <summary>
            Sets the placeholderTextColor property on the <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="color">The placeholder text color.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxManager.SetBorderColor(Windows.UI.Xaml.Controls.PasswordBox,System.Nullable{System.UInt32})">
            <summary>
            Sets the border color for the <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/>.
            </summary>
            <param name="view">The view instance</param>
            <param name="color">The masked color value.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxManager.SetBackgroundColor(Windows.UI.Xaml.Controls.PasswordBox,System.Nullable{System.UInt32})">
            <summary>
            Sets the background color for the <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="color">The masked color value.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxManager.SetSelectionColor(Windows.UI.Xaml.Controls.PasswordBox,System.UInt32)">
            <summary>
            Sets the selection color for the <see cref="T:Windows.UI.Xaml.Controls.PasswordBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="color">The masked color value.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxManager.SetTextVerticalAlign(Windows.UI.Xaml.Controls.PasswordBox,System.String)">
            <summary>
            Sets the text alignment property on the <see cref="T:Windows.UI.Xaml.Controls.PasswordBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="alignment">The text alignment.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxManager.SetEditable(Windows.UI.Xaml.Controls.PasswordBox,System.Boolean)">
            <summary>
            Sets the editablity property on the <see cref="T:Windows.UI.Xaml.Controls.PasswordBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="editable">The editable flag.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxManager.SetMaxLength(Windows.UI.Xaml.Controls.PasswordBox,System.Int32)">
            <summary>
            Sets the max character length property on the <see cref="T:Windows.UI.Xaml.Controls.PasswordBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="maxCharLength">The max length.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxManager.SetKeyboardType(Windows.UI.Xaml.Controls.PasswordBox,System.String)">
            <summary>
            Sets the keyboard type on the <see cref="T:Windows.UI.Xaml.Controls.PasswordBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="keyboardType">The keyboard type.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxManager.SetBorderWidth(Windows.UI.Xaml.Controls.PasswordBox,System.Int32)">
            <summary>
            Sets the border width for a <see cref="T:Windows.UI.Xaml.Controls.PasswordBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="width">The border width.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxManager.UpdateExtraData(Windows.UI.Xaml.Controls.PasswordBox,System.Object)">
            <summary>
            Update the view with extra data.
            </summary>
            <param name="view">The view instance.</param>
            <param name="extraData">The extra data.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxManager.CreateViewInstance(ReactNative.UIManager.ThemedReactContext)">
            <summary>
            Returns the view instance for <see cref="T:Windows.UI.Xaml.Controls.PasswordBox"/>.
            </summary>
            <param name="reactContext">The themed React Context</param>
            <returns>A new initialized <see cref="T:Windows.UI.Xaml.Controls.PasswordBox"/></returns>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxManager.ReceiveCommand(Windows.UI.Xaml.Controls.PasswordBox,System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Implement this method to receive events/commands directly from
            JavaScript through the <see cref="T:Windows.UI.Xaml.Controls.PasswordBox"/>.
            </summary>
            <param name="view">
            The view instance that should receive the command.
            </param>
            <param name="commandId">Identifer for the command.</param>
            <param name="args">Optional arguments for the command.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxManager.AddEventEmitters(ReactNative.UIManager.ThemedReactContext,Windows.UI.Xaml.Controls.PasswordBox)">
            <summary>
            Installing the textchanged event emitter on the <see cref="N:ReactNative.Views.TextInput"/> Control.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The <see cref="T:Windows.UI.Xaml.Controls.PasswordBox"/> view instance.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxManager.OnDropViewInstance(ReactNative.UIManager.ThemedReactContext,Windows.UI.Xaml.Controls.PasswordBox)">
            <summary>
            Called when view is detached from view hierarchy and allows for
            additional cleanup by the <see cref="T:ReactNative.Views.TextInput.ReactTextInputManager"/>.
            subclass. Unregister all event handlers for the <see cref="T:Windows.UI.Xaml.Controls.PasswordBox"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The <see cref="T:Windows.UI.Xaml.Controls.PasswordBox"/>.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxManager.SetDimensions(Windows.UI.Xaml.Controls.PasswordBox,ReactNative.UIManager.Dimensions)">
            <summary>
            Sets the dimensions of the view.
            </summary>
            <param name="view">The view.</param>
            <param name="dimensions">The output buffer.</param>
        </member>
        <member name="T:ReactNative.Views.TextInput.ReactTextInputManager">
            <summary>
            View manager for <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/>.
            </summary>
        </member>
        <member name="P:ReactNative.Views.TextInput.ReactTextInputManager.Name">
            <summary>
            The name of the view manager.
            </summary>
        </member>
        <member name="P:ReactNative.Views.TextInput.ReactTextInputManager.ExportedCustomBubblingEventTypeConstants">
            <summary>
            The exported custom bubbling event types.
            </summary>
        </member>
        <member name="P:ReactNative.Views.TextInput.ReactTextInputManager.CommandsMap">
            <summary>
            The commands map for the <see cref="T:ReactNative.Views.TextInput.ReactTextInputManager"/>.
            </summary>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.SetFontSize(ReactNative.Views.TextInput.ReactTextBox,System.Double)">
            <summary>
            Sets the font size on the <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="fontSize">The font size.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.SetColor(ReactNative.Views.TextInput.ReactTextBox,System.Nullable{System.UInt32})">
            <summary>
            Sets the font color for the node.
            </summary>
            <param name="view">The view instance.</param>
            <param name="color">The masked color value.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.SetFontFamily(ReactNative.Views.TextInput.ReactTextBox,System.String)">
            <summary>
            Sets the font family for the node.
            </summary>
            <param name="view">The view instance.</param>
            <param name="familyName">The font family.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.SetFontWeight(ReactNative.Views.TextInput.ReactTextBox,System.String)">
            <summary>
            Sets the font weight for the node.
            </summary>
            <param name="view">The view instance.</param>
            <param name="fontWeightString">The font weight string.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.SetFontStyle(ReactNative.Views.TextInput.ReactTextBox,System.String)">
            <summary>
            Sets the font style for the node.
            </summary>
            <param name="view">The view instance.</param>
            <param name="fontStyleString">The font style string.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.SetSelectionChange(ReactNative.Views.TextInput.ReactTextBox,System.Boolean)">
            <summary>
            Sets whether to track selection changes on the <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="onSelectionChange">The indicator.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.SetPlaceholder(ReactNative.Views.TextInput.ReactTextBox,System.String)">
            <summary>
            Sets the default text placeholder property on the <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="placeholder">The placeholder text.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.SetPlaceholderTextColor(ReactNative.Views.TextInput.ReactTextBox,System.Nullable{System.UInt32})">
            <summary>
            Sets the placeholderTextColor property on the <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="color">The placeholder text color.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.SetBorderColor(ReactNative.Views.TextInput.ReactTextBox,System.Nullable{System.UInt32})">
            <summary>
            Sets the border color for the <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/>.
            </summary>
            <param name="view">The view instance</param>
            <param name="color">The masked color value.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.SetBackgroundColor(ReactNative.Views.TextInput.ReactTextBox,System.Nullable{System.UInt32})">
            <summary>
            Sets the background color for the <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="color">The masked color value.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.SetSelectionColor(ReactNative.Views.TextInput.ReactTextBox,System.UInt32)">
            <summary>
            Sets the selection color for the <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="color">The masked color value.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.SetTextAlign(ReactNative.Views.TextInput.ReactTextBox,System.String)">
            <summary>
            Sets the text alignment property on the <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="alignment">The text alignment.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.SetTextVerticalAlign(ReactNative.Views.TextInput.ReactTextBox,System.String)">
            <summary>
            Sets the text alignment property on the <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="alignment">The text alignment.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.SetEditable(ReactNative.Views.TextInput.ReactTextBox,System.Boolean)">
            <summary>
            Sets the editablity property on the <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="editable">The editable flag.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.SetMaxLength(ReactNative.Views.TextInput.ReactTextBox,System.Int32)">
            <summary>
            Sets the max character length property on the <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="maxCharLength">The max length.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.SetAutoCorrect(ReactNative.Views.TextInput.ReactTextBox,System.Boolean)">
            <summary>
            Sets whether to enable autocorrect on the <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="autoCorrect">The autocorrect flag.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.SetMultiline(ReactNative.Views.TextInput.ReactTextBox,System.Boolean)">
            <summary>
            Sets whether to enable multiline input on the <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="multiline">The multiline flag.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.SetKeyboardType(ReactNative.Views.TextInput.ReactTextBox,System.String)">
            <summary>
            Sets the keyboard type on the <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="keyboardType">The keyboard type.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.SetBorderWidth(ReactNative.Views.TextInput.ReactTextBox,System.Int32)">
            <summary>
            Sets the border width for a <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="width">The border width.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.SetClearTextOnFocus(ReactNative.Views.TextInput.ReactTextBox,System.Boolean)">
            <summary>
            Sets whether the text should be cleared on focus.
            </summary>
            <param name="view">The view instance.</param>
            <param name="clearTextOnFocus">The indicator.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.SetSelectTextOnFocus(ReactNative.Views.TextInput.ReactTextBox,System.Boolean)">
            <summary>
            Sets whether the text should be selected on focus.
            </summary>
            <param name="view">The view instance.</param>
            <param name="selectTextOnFocus">The indicator.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.CreateShadowNodeInstance">
            <summary>
            Create the shadow node instance.
            </summary>
            <returns>The shadow node instance.</returns>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.ReceiveCommand(ReactNative.Views.TextInput.ReactTextBox,System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Implement this method to receive events/commands directly from
            JavaScript through the <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/>.
            </summary>
            <param name="view">
            The view instance that should receive the command.
            </param>
            <param name="commandId">Identifer for the command.</param>
            <param name="args">Optional arguments for the command.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.UpdateExtraData(ReactNative.Views.TextInput.ReactTextBox,System.Object)">
            <summary>
            Update the view with extra data.
            </summary>
            <param name="view">The view instance.</param>
            <param name="extraData">The extra data.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.OnDropViewInstance(ReactNative.UIManager.ThemedReactContext,ReactNative.Views.TextInput.ReactTextBox)">
            <summary>
            Called when view is detached from view hierarchy and allows for
            additional cleanup by the <see cref="T:ReactNative.Views.TextInput.ReactTextInputManager"/>.
            subclass. Unregister all event handlers for the <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/>.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.CreateViewInstance(ReactNative.UIManager.ThemedReactContext)">
            <summary>
            Returns the view instance for <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/>.
            </summary>
            <param name="reactContext"></param>
            <returns></returns>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputManager.AddEventEmitters(ReactNative.UIManager.ThemedReactContext,ReactNative.Views.TextInput.ReactTextBox)">
            <summary>
            Installing the textchanged event emitter on the <see cref="N:ReactNative.Views.TextInput"/> Control.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The <see cref="T:ReactNative.Views.TextInput.ReactTextBox"/> view instance.</param>
        </member>
        <member name="T:ReactNative.Views.TextInput.ReactPasswordBoxShadowNode">
            <summary>
            This extension of <see cref="T:ReactNative.UIManager.LayoutShadowNode"/> is responsible for
            measuring the layout for Native <see cref="T:Windows.UI.Xaml.Controls.PasswordBox"/>.
            </summary>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxShadowNode.#ctor">
            <summary>
            Instantiates the <see cref="T:ReactNative.Views.TextInput.ReactPasswordBoxShadowNode"/>.
            </summary>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxShadowNode.SetText(System.String)">
            <summary>
            Sets the text for the node.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxShadowNode.SetFontSize(System.Double)">
            <summary>
            Sets the font size for the node.
            </summary>
            <param name="fontSize">The font size.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxShadowNode.SetFontFamily(System.String)">
            <summary>
            Sets the font family for the node.
            </summary>
            <param name="fontFamily">The font family.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxShadowNode.SetFontWeight(System.String)">
            <summary>
            Sets the font weight for the node.
            </summary>
            <param name="fontWeightValue">The font weight string.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxShadowNode.SetFontStyle(System.String)">
            <summary>
            Sets the font style for the node.
            </summary>
            <param name="fontStyleSValue">The font style string.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxShadowNode.SetLetterSpacing(System.Int32)">
            <summary>
            Sets the letter spacing for the node.
            </summary>
            <param name="letterSpacing">The letter spacing.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxShadowNode.SetLineHeight(System.Double)">
            <summary>
            Sets the line height.
            </summary>
            <param name="lineHeight">The line height.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxShadowNode.OnCollectExtraUpdates(ReactNative.UIManager.UIViewOperationQueue)">
            <summary>
            Called to aggregate the current text and event counter.
            </summary>
            <param name="uiViewOperationQueue">The UI operation queue.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactPasswordBoxShadowNode.MarkUpdated">
            <summary>
            Marks a node as updated.
            </summary>
        </member>
        <member name="T:ReactNative.Views.TextInput.ReactTextChangedEvent">
            <summary>
            Event emitted by <see cref="T:ReactNative.Views.TextInput.ReactTextInputManager"/> native view when
            text changes.
            </summary>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextChangedEvent.#ctor(System.Int32,System.String,System.Double,System.Double,System.Int32)">
            <summary>
            Instantiates a <see cref="T:ReactNative.Views.TextInput.ReactTextChangedEvent"/>.
            </summary>
            <param name="viewTag">The view tag.</param>
            <param name="text">The text.</param>
            <param name="contentWidth">The content width.</param>
            <param name="contentHeight">The content height.</param>
            <param name="eventCount">The event count.</param>
        </member>
        <member name="P:ReactNative.Views.TextInput.ReactTextChangedEvent.EventName">
            <summary>
            The name of the event.
            </summary>
        </member>
        <member name="P:ReactNative.Views.TextInput.ReactTextChangedEvent.CanCoalesce">
            <summary>
            Text change events cannot be coalesced.
            </summary>
            <remarks>
            Return <code>false</code> if the event can never be coalesced.
            </remarks>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextChangedEvent.Dispatch(ReactNative.UIManager.Events.RCTEventEmitter)">
            <summary>
            Push the event up to the event emitter.
            </summary>
            <param name="rctEventEmitter">The event emitter.</param>
        </member>
        <member name="T:ReactNative.Views.TextInput.ReactTextInputBlurEvent">
            <summary>
            Event emitted by <see cref="T:ReactNative.Views.TextInput.ReactTextInputManager"/> native view when 
            focus is lost.
            </summary>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputBlurEvent.#ctor(System.Int32)">
            <summary>
            Instantiate a <see cref="T:ReactNative.Views.TextInput.ReactTextInputBlurEvent"/>.
            </summary>
            <param name="viewTag">The view tag.</param>
        </member>
        <member name="P:ReactNative.Views.TextInput.ReactTextInputBlurEvent.EventName">
            <summary>
            The event name.
            </summary>
        </member>
        <member name="P:ReactNative.Views.TextInput.ReactTextInputBlurEvent.CanCoalesce">
            <summary>
            Disabling event coalescing.
            </summary>
            <remarks>
            Return false if the event can never be coalesced.
            </remarks>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputBlurEvent.Dispatch(ReactNative.UIManager.Events.RCTEventEmitter)">
            <summary>
            Dispatch this event to JavaScript using the given event emitter.
            </summary>
            <param name="eventEmitter">The event emitter.</param>
        </member>
        <member name="T:ReactNative.Views.TextInput.ReactTextInputFocusEvent">
            <summary>
            Event emitted by <see cref="T:ReactNative.Views.TextInput.ReactTextInputManager"/> native view when 
            focus changes.
            </summary>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputFocusEvent.#ctor(System.Int32)">
            <summary>
            Instantiates a <see cref="T:ReactNative.Views.TextInput.ReactTextInputFocusEvent"/>.
            </summary>
            <param name="viewTag">The view tag.</param>
        </member>
        <member name="P:ReactNative.Views.TextInput.ReactTextInputFocusEvent.EventName">
            <summary>
            The event name.
            </summary>
        </member>
        <member name="P:ReactNative.Views.TextInput.ReactTextInputFocusEvent.CanCoalesce">
            <summary>
            Disabling event coalescing.
            </summary>
            <remarks>
            Return false if the event can never be coalesced.
            </remarks>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputFocusEvent.Dispatch(ReactNative.UIManager.Events.RCTEventEmitter)">
            <summary>
            Dispatch this event to JavaScript using the given event emitter.
            </summary>
            <param name="eventEmitter">The event emitter.</param>
        </member>
        <member name="T:ReactNative.Views.TextInput.ReactTextInputShadowNode">
            <summary>
            This extension of <see cref="T:ReactNative.UIManager.LayoutShadowNode"/> is responsible for
            measuring the layout for Native <see cref="T:Windows.UI.Xaml.Controls.TextBox"/>.
            </summary>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputShadowNode.#ctor">
            <summary>
            Instantiates the <see cref="T:ReactNative.Views.TextInput.ReactTextInputShadowNode"/>.
            </summary>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputShadowNode.SetText(System.String)">
            <summary>
            Sets the text for the node.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputShadowNode.SetFontSize(System.Double)">
            <summary>
            Sets the font size for the node.
            </summary>
            <param name="fontSize">The font size.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputShadowNode.SetFontFamily(System.String)">
            <summary>
            Sets the font family for the node.
            </summary>
            <param name="fontFamily">The font family.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputShadowNode.SetFontWeight(System.String)">
            <summary>
            Sets the font weight for the node.
            </summary>
            <param name="fontWeightValue">The font weight string.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputShadowNode.SetFontStyle(System.String)">
            <summary>
            Sets the font style for the node.
            </summary>
            <param name="fontStyleValue">The font style string.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputShadowNode.SetLetterSpacing(System.Int32)">
            <summary>
            Sets the letter spacing for the node.
            </summary>
            <param name="letterSpacing">The letter spacing.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputShadowNode.SetLineHeight(System.Double)">
            <summary>
            Sets the line height.
            </summary>
            <param name="lineHeight">The line height.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputShadowNode.SetNumberOfLines(System.Int32)">
            <summary>
            Sets the maximum number of lines.
            </summary>
            <param name="numberOfLines">Max number of lines.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputShadowNode.SetTextAlign(System.String)">
            <summary>
            Sets the text alignment.
            </summary>
            <param name="textAlign">The text alignment string.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputShadowNode.SetMostRecentEventCount(System.Int32)">
            <summary>
            Set the most recent event count in JavaScript.
            </summary>
            <param name="mostRecentEventCount">The event count.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputShadowNode.OnCollectExtraUpdates(ReactNative.UIManager.UIViewOperationQueue)">
            <summary>
            Called to aggregate the current text and event counter.
            </summary>
            <param name="uiViewOperationQueue">The UI operation queue.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputShadowNode.SetPaddings(System.Int32,Newtonsoft.Json.Linq.JValue)">
            <summary>
            Sets the paddings of the shadow node.
            </summary>
            <param name="index">The spacing type index.</param>
            <param name="padding">The padding value.</param>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputShadowNode.MarkUpdated">
            <summary>
            Marks a node as updated.
            </summary>
        </member>
        <member name="M:ReactNative.Views.TextInput.ReactTextInputShadowNode.FormatInline(ReactNative.Views.TextInput.ReactTextInputShadowNode,Windows.UI.Xaml.Documents.TextElement)">
            <summary>
            Formats an inline instance with shadow properties.
            </summary>
            <param name="textNode">The text shadow node.</param>
            <param name="inline">The inline.</param>
        </member>
        <member name="T:ReactNative.Views.Text.ReactTextShadowNode">
            <summary>
            The shadow node implementation for text views.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextShadowNode.#ctor">
            <summary>
            Instantiates a <see cref="T:ReactNative.Views.Text.ReactTextShadowNode"/>.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextShadowNode.SetFontSize(System.Nullable{System.Double})">
            <summary>
            Sets the font size for the node.
            </summary>
            <param name="fontSize">The font size.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextShadowNode.SetFontFamily(System.String)">
            <summary>
            Sets the font family for the node.
            </summary>
            <param name="fontFamily">The font family.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextShadowNode.SetFontWeight(System.String)">
            <summary>
            Sets the font weight for the node.
            </summary>
            <param name="fontWeightValue">The font weight string.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextShadowNode.SetFontStyle(System.String)">
            <summary>
            Sets the font style for the node.
            </summary>
            <param name="fontStyleValue">The font style string.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextShadowNode.SetLetterSpacing(System.Int32)">
            <summary>
            Sets the letter spacing for the node.
            </summary>
            <param name="letterSpacing">The letter spacing.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextShadowNode.SetLineHeight(System.Double)">
            <summary>
            Sets the line height.
            </summary>
            <param name="lineHeight">The line height.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextShadowNode.SetNumberOfLines(System.Int32)">
            <summary>
            Sets the maximum number of lines.
            </summary>
            <param name="numberOfLines">Max number of lines.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextShadowNode.SetTextAlign(System.String)">
            <summary>
            Sets the text alignment.
            </summary>
            <param name="textAlign">The text alignment string.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextShadowNode.SetAllowFontScaling(System.Boolean)">
            <summary>
            Set fontScaling
            </summary>
            <param name="allowFontScaling">Max number of lines.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextShadowNode.OnCollectExtraUpdates(ReactNative.UIManager.UIViewOperationQueue)">
            <summary>
            Called after a layout step at the end of a UI batch from
            <see cref="T:ReactNative.UIManager.UIManagerModule"/>. May be used to enqueue additional UI
            operations for the native view. Will only be called on nodes marked
            as updated.
            </summary>
            <param name="uiViewOperationQueue">
            Interface for enqueueing UI operations.
            </param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextShadowNode.MarkUpdated">
            <summary>
            Marks a node as updated.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextShadowNode.UpdateTextBlock(Windows.UI.Xaml.Controls.RichTextBlock)">
            <summary>
            Updates the properties of a <see cref="T:Windows.UI.Xaml.Controls.RichTextBlock"/> view.
            </summary>
            <param name="textBlock">The view.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextShadowNode.OnBeforeLayout">
            <summary>
            This method will be called by <see cref="T:ReactNative.UIManager.UIManagerModule"/> once
            per batch, before calculating layout. This will only be called for
            nodes that are marked as updated with <see cref="M:ReactNative.Views.Text.ReactTextShadowNode.MarkUpdated"/> or
            require layout (i.e., marked with <see cref="M:ReactNative.UIManager.ReactShadowNode.dirty"/>).
            </summary>
        </member>
        <member name="T:ReactNative.Views.Text.ReactTextViewManager">
            <summary>
            The view manager for text views.
            </summary>
        </member>
        <member name="P:ReactNative.Views.Text.ReactTextViewManager.Name">
            <summary>
            The name of the view manager.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextViewManager.SetColor(Windows.UI.Xaml.Controls.RichTextBlock,System.Nullable{System.UInt32})">
            <summary>
            Sets the font color for the node.
            </summary>
            <param name="view">The view.</param>
            <param name="color">The masked color value.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextViewManager.SetSelectable(Windows.UI.Xaml.Controls.RichTextBlock,System.Boolean)">
            <summary>
            Sets whether or not the text is selectable.
            </summary>
            <param name="view">The view.</param>
            <param name="selectable">A flag indicating whether or not the text is selectable.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextViewManager.AddView(Windows.UI.Xaml.Controls.RichTextBlock,Windows.UI.Xaml.DependencyObject,System.Int32)">
            <summary>
            Adds a child at the given index.
            </summary>
            <param name="parent">The parent view.</param>
            <param name="child">The child view.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextViewManager.CreateShadowNodeInstance">
            <summary>
            Creates the shadow node instance.
            </summary>
            <returns>The shadow node instance.</returns>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextViewManager.GetChildAt(Windows.UI.Xaml.Controls.RichTextBlock,System.Int32)">
            <summary>
            Gets the child at the given index.
            </summary>
            <param name="parent">The parent view.</param>
            <param name="index">The index.</param>
            <returns>The child view.</returns>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextViewManager.GetChildCount(Windows.UI.Xaml.Controls.RichTextBlock)">
            <summary>
            Gets the number of children in the view parent.
            </summary>
            <param name="parent">The view parent.</param>
            <returns>The number of children.</returns>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextViewManager.RemoveAllChildren(Windows.UI.Xaml.Controls.RichTextBlock)">
            <summary>
            Removes all children from the view parent.
            </summary>
            <param name="parent">The view parent.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextViewManager.RemoveChildAt(Windows.UI.Xaml.Controls.RichTextBlock,System.Int32)">
            <summary>
            Removes the child at the given index.
            </summary>
            <param name="parent">The view parent.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextViewManager.UpdateExtraData(Windows.UI.Xaml.Controls.RichTextBlock,System.Object)">
            <summary>
            Receive extra updates from the shadow node.
            </summary>
            <param name="root">The root view.</param>
            <param name="extraData">The extra data.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextViewManager.CreateViewInstance(ReactNative.UIManager.ThemedReactContext)">
            <summary>
            Creates the view instance.
            </summary>
            <param name="reactContext">The React context.</param>
            <returns>The view instance.</returns>
        </member>
        <member name="T:ReactNative.Views.Text.ReactInlineShadowNode">
            <summary>
            Shadow node base class for virtual text nodes.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Text.ReactInlineShadowNode.OnCollectExtraUpdates(ReactNative.UIManager.UIViewOperationQueue)">
            <summary>
            Called after a layout step at the end of a UI batch from
            <see cref="T:ReactNative.UIManager.UIManagerModule"/>. May be used to enqueue additional UI
            operations for the native view. Will only be called on nodes marked
            as updated.
            </summary>
            <param name="uiViewOperationQueue">
            Interface for enqueueing UI operations.
            </param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactInlineShadowNode.MakeInline(System.Collections.Generic.IList{Windows.UI.Xaml.Documents.Inline})">
            <summary>
            Create the <see cref="T:Windows.UI.Xaml.Documents.Inline"/> instance for the measurement calculation.
            </summary>
            <param name="children">The children.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:ReactNative.Views.Text.ReactInlineShadowNode.UpdateInline(Windows.UI.Xaml.Documents.Inline)">
            <summary>
            Update the properties on the inline instance.
            </summary>
            <param name="inline">The instance.</param>
        </member>
        <member name="T:ReactNative.Views.Text.ReactRunManager">
            <summary>
            View manager for raw text nodes, i.e., <see cref="T:Windows.UI.Xaml.Documents.Run"/> instances.
            </summary>
        </member>
        <member name="P:ReactNative.Views.Text.ReactRunManager.Name">
            <summary>
            The name of this view manager.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Text.ReactRunManager.CreateShadowNodeInstance">
            <summary>
            This method should return the subclass of <see cref="T:ReactNative.UIManager.ReactShadowNode"/>
            which will be then used for measuring the position and size of the
            view. 
            </summary>
            <remarks>
            In most cases, this will just return an instance of
            <see cref="T:ReactNative.UIManager.ReactShadowNode"/>.
            </remarks>
            <returns>The shadow node instance.</returns>
        </member>
        <member name="M:ReactNative.Views.Text.ReactRunManager.GetDimensions(Windows.UI.Xaml.Documents.Run)">
            <summary>
            Gets the dimensions of the view.
            </summary>
            <param name="view">The view.</param>
            <returns>Does not return.</returns>
            <remarks>
            Dimensions are not available for virtual text nodes.
            </remarks>
        </member>
        <member name="M:ReactNative.Views.Text.ReactRunManager.SetDimensions(Windows.UI.Xaml.Documents.Run,ReactNative.UIManager.Dimensions)">
            <summary>
            Sets the dimensions of the view.
            </summary>
            <param name="view">The view.</param>
            <param name="dimensions">The output buffer.</param>
            <remarks>
            This is a no-op as all layout is performed by the parent text block.
            </remarks>
        </member>
        <member name="M:ReactNative.Views.Text.ReactRunManager.CreateViewInstance(ReactNative.UIManager.ThemedReactContext)">
            <summary>
            Creates a new view instance of type <see cref="T:Windows.UI.Xaml.Documents.Run"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <returns>The view instance.</returns>
        </member>
        <member name="T:ReactNative.Views.Text.ReactRunShadowNode">
            <summary>
            The shadow node class for raw text.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Text.ReactRunShadowNode.SetText(System.String)">
            <summary>
            Sets the raw text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactRunShadowNode.MakeInline(System.Collections.Generic.IList{Windows.UI.Xaml.Documents.Inline})">
            <summary>
            Create the <see cref="T:Windows.UI.Xaml.Documents.Inline"/> instance for the measurement calculation.
            </summary>
            <param name="children">The children.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:ReactNative.Views.Text.ReactRunShadowNode.UpdateInline(Windows.UI.Xaml.Documents.Inline)">
            <summary>
            Update the properties on the inline instance.
            </summary>
            <param name="inline">The instance.</param>
        </member>
        <member name="T:ReactNative.Views.Text.ReactSpanShadowNode">
            <summary>
            Shadow node for virtual text nodes.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Text.ReactSpanShadowNode.SetFontSize(System.Nullable{System.Double})">
            <summary>
            Sets the font size for the node.
            </summary>
            <param name="fontSize">The font size.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactSpanShadowNode.SetFontFamily(System.String)">
            <summary>
            Sets the font family for the node.
            </summary>
            <param name="fontFamily">The font family.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactSpanShadowNode.SetFontWeight(System.String)">
            <summary>
            Sets the font weight for the node.
            </summary>
            <param name="fontWeightValue">The font weight string.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactSpanShadowNode.SetFontStyle(System.String)">
            <summary>
            Sets the font style for the node.
            </summary>
            <param name="fontStyleValue">The font style string.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactSpanShadowNode.SetLetterSpacing(System.Int32)">
            <summary>
            Sets the letter spacing for the node.
            </summary>
            <param name="letterSpacing">The letter spacing.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactSpanShadowNode.MakeInline(System.Collections.Generic.IList{Windows.UI.Xaml.Documents.Inline})">
            <summary>
            Create the <see cref="T:Windows.UI.Xaml.Documents.Span"/> instance for the measurement calculation.
            </summary>
            <param name="children">The children.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:ReactNative.Views.Text.ReactSpanShadowNode.UpdateInline(Windows.UI.Xaml.Documents.Inline)">
            <summary>
            Update the properties on the inline instance.
            </summary>
            <param name="inline">The instance.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactSpanShadowNode.OnBeforeLayout">
            <summary>
            This method will be called by <see cref="T:ReactNative.UIManager.UIManagerModule"/> once
            per batch, before calculating layout. This will only be called for
            nodes that are marked as updated with <see cref="M:ReactNative.UIManager.ReactShadowNode.MarkUpdated"/> or
            require layout (i.e., marked with <see cref="M:ReactNative.UIManager.ReactShadowNode.dirty"/> ).
            </summary>
        </member>
        <member name="T:ReactNative.Views.Text.ReactSpanViewManager">
            <summary>
            A virtual view manager for raw text nodes.
            </summary>
        </member>
        <member name="P:ReactNative.Views.Text.ReactSpanViewManager.Name">
            <summary>
            The view manager name.
            </summary>
        </member>
        <member name="P:ReactNative.Views.Text.ReactSpanViewManager.NeedsCustomLayoutForChildren">
            <summary>
            This view does not layout its children.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Text.ReactSpanViewManager.SetColor(Windows.UI.Xaml.Documents.Span,System.Nullable{System.UInt32})">
            <summary>
            Sets the font color for the node.
            </summary>
            <param name="view">The view.</param>
            <param name="color">The masked color value.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactSpanViewManager.AddView(Windows.UI.Xaml.DependencyObject,Windows.UI.Xaml.DependencyObject,System.Int32)">
            <summary>
            Adds a child at the given index.
            </summary>
            <param name="parent">The parent view.</param>
            <param name="child">The child view.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactSpanViewManager.CreateShadowNodeInstance">
            <summary>
            This method should return the subclass of <see cref="T:ReactNative.UIManager.ReactShadowNode"/>
            which will be then used for measuring the position and size of the
            view. 
            </summary>
            <remarks>
            In most cases, this will just return an instance of
            <see cref="T:ReactNative.UIManager.ReactShadowNode"/>.
            </remarks>
            <returns>The shadow node instance.</returns>
        </member>
        <member name="M:ReactNative.Views.Text.ReactSpanViewManager.GetChildAt(Windows.UI.Xaml.DependencyObject,System.Int32)">
            <summary>
            Gets the child at the given index.
            </summary>
            <param name="parent">The parent view.</param>
            <param name="index">The index.</param>
            <returns>The child view.</returns>
        </member>
        <member name="M:ReactNative.Views.Text.ReactSpanViewManager.GetChildCount(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Gets the number of children in the view parent.
            </summary>
            <param name="parent">The view parent.</param>
            <returns>The number of children.</returns>
        </member>
        <member name="M:ReactNative.Views.Text.ReactSpanViewManager.GetDimensions(Windows.UI.Xaml.Documents.Span)">
            <summary>
            Gets the dimensions of the view.
            </summary>
            <param name="view">The view.</param>
            <returns>Does not return.</returns>
            <remarks>
            Dimensions are not available for virtual text nodes.
            </remarks>
        </member>
        <member name="M:ReactNative.Views.Text.ReactSpanViewManager.RemoveAllChildren(Windows.UI.Xaml.DependencyObject)">
            <summary>
            Removes all children from the view parent.
            </summary>
            <param name="parent">The view parent.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactSpanViewManager.RemoveChildAt(Windows.UI.Xaml.DependencyObject,System.Int32)">
            <summary>
            Removes the child at the given index.
            </summary>
            <param name="parent">The view parent.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:ReactNative.Views.Text.ReactSpanViewManager.SetDimensions(Windows.UI.Xaml.Documents.Span,ReactNative.UIManager.Dimensions)">
            <summary>
            Sets the dimensions of the view.
            </summary>
            <param name="view">The view.</param>
            <param name="dimensions">The output buffer.</param>
            <remarks>
            This is a no-op as all layout is performed by the parent text block.
            </remarks>
        </member>
        <member name="M:ReactNative.Views.Text.ReactSpanViewManager.CreateViewInstance(ReactNative.UIManager.ThemedReactContext)">
            <summary>
            Creates a new view instance of type <see cref="T:Windows.UI.Xaml.Documents.Span"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <returns>The view instance.</returns>
        </member>
        <member name="T:ReactNative.Views.Text.ReactTextInlineViewManager`2">
            <summary>
            Base view manager class for text block inlines.
            </summary>
            <typeparam name="TInline">Type of inline.</typeparam>
            <typeparam name="TReactTextInlineShadowNode">Type of shadow node.</typeparam>
        </member>
        <member name="M:ReactNative.Views.Text.ReactTextInlineViewManager`2.UpdateExtraData(`0,System.Object)">
            <summary>
            Receive extra updates from the shadow node.
            </summary>
            <param name="root">The root view.</param>
            <param name="extraData">The extra data.</param>
        </member>
        <member name="T:ReactNative.Views.Text.TextDecorationLine">
            <summary>
            TextDecorationLine values.
            </summary>
        </member>
        <member name="F:ReactNative.Views.Text.TextDecorationLine.None">
            <summary>
            Text has no line decoration.
            </summary>
        </member>
        <member name="F:ReactNative.Views.Text.TextDecorationLine.Underline">
            <summary>
            Text is Underlined.
            </summary>
        </member>
        <member name="F:ReactNative.Views.Text.TextDecorationLine.LineThrough">
            <summary>
            Text is Stroke out.
            </summary>
        </member>
        <member name="F:ReactNative.Views.Text.TextDecorationLine.UnderlineLineThrough">
            <summary>
            Text is both Underlined and Stroke out.
            </summary>
        </member>
        <member name="T:ReactNative.Views.Web.ReactWebViewManager">
            <summary>
            A view manager responsible for rendering webview.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Web.ReactWebViewManager.#ctor(ReactNative.Bridge.ReactContext)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Views.Web.ReactWebViewManager"/>.
            </summary>
            <param name="context">The React context.</param>
        </member>
        <member name="P:ReactNative.Views.Web.ReactWebViewManager.Name">
            <summary>
            The name of the view manager.
            </summary>
        </member>
        <member name="P:ReactNative.Views.Web.ReactWebViewManager.CommandsMap">
            <summary>
            The commands map for the webview manager.
            </summary>
        </member>
        <member name="M:ReactNative.Views.Web.ReactWebViewManager.SetJavaScriptEnabled(Windows.UI.Xaml.Controls.WebView,System.Boolean)">
            <summary>
            Sets whether JavaScript is enabled or not.
            </summary>
            <param name="view">A webview instance.</param>
            <param name="enabled">A flag signaling whether JavaScript is enabled.</param>
        </member>
        <member name="M:ReactNative.Views.Web.ReactWebViewManager.SetIndexedDbEnabled(Windows.UI.Xaml.Controls.WebView,System.Boolean)">
            <summary>
            Sets whether Indexed DB is enabled or not.
            </summary>
            <param name="view">A webview instance.</param>
            <param name="enabled">A flag signaling whether Indexed DB is enabled.</param>
        </member>
        <member name="M:ReactNative.Views.Web.ReactWebViewManager.SetInjectedJavaScript(Windows.UI.Xaml.Controls.WebView,System.String)">
            <summary>
            Sets the JavaScript to be injected when the page loads.
            </summary>
            <param name="view">A view instance.</param>
            <param name="injectedJavaScript">The JavaScript to inject.</param>
        </member>
        <member name="M:ReactNative.Views.Web.ReactWebViewManager.SetMessagingEnabled(Windows.UI.Xaml.Controls.WebView,System.Boolean)">
            <summary>
            Toggles whether messaging is enabled for the <see cref="T:Windows.UI.Xaml.Controls.WebView"/>.
            </summary>
            <param name="view">The view instance.</param>
            <param name="messagingEnabled">
            <code>true</code> if messaging is allowed, otherwise <code>false</code>.
            </param>
        </member>
        <member name="M:ReactNative.Views.Web.ReactWebViewManager.SetSource(Windows.UI.Xaml.Controls.WebView,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Sets webview source.
            </summary>
            <param name="view">A webview instance.</param>
            <param name="source">A source for the webview (either static html or an uri).</param>
        </member>
        <member name="M:ReactNative.Views.Web.ReactWebViewManager.ReceiveCommand(Windows.UI.Xaml.Controls.WebView,System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Receive events/commands directly from JavaScript through the 
            <see cref="T:ReactNative.UIManager.UIManagerModule"/>.
            </summary>
            <param name="view">
            The view instance that should receive the command.
            </param>
            <param name="commandId">Identifer for the command.</param>
            <param name="args">Optional arguments for the command.</param>
        </member>
        <member name="M:ReactNative.Views.Web.ReactWebViewManager.OnDropViewInstance(ReactNative.UIManager.ThemedReactContext,Windows.UI.Xaml.Controls.WebView)">
            <summary>
            Called when view is detached from view hierarchy and allows for 
            additional cleanup by the <see cref="T:ReactNative.Views.Web.ReactWebViewManager"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The view.</param>
        </member>
        <member name="M:ReactNative.Views.Web.ReactWebViewManager.CreateViewInstance(ReactNative.UIManager.ThemedReactContext)">
            <summary>
            Creates a new view instance of type <see cref="T:Windows.UI.Xaml.Controls.WebView"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <returns>The view instance.</returns>
        </member>
        <member name="M:ReactNative.Views.Web.ReactWebViewManager.AddEventEmitters(ReactNative.UIManager.ThemedReactContext,Windows.UI.Xaml.Controls.WebView)">
            <summary>
            Subclasses can override this method to install custom event 
            emitters on the given view.
            </summary>
            <param name="reactContext">The React context.</param>
            <param name="view">The view instance.</param>
        </member>
        <member name="M:ReactNative.Views.Web.ReactWebViewManager.OnAfterUpdateTransaction(Windows.UI.Xaml.Controls.WebView)">
            <summary>
            Callback that will be triggered after all properties are updated         
            </summary>
            <param name="view">The view instance.</param>
        </member>
        <member name="T:ReactNative.Views.View.ReactViewManager">
            <summary>
            View manager for React view instances.
            </summary>
        </member>
        <member name="F:ReactNative.Views.View.ReactViewManager.s_defaultBorderBrush">
            <summary>
            Default brush for the view borders.
            </summary>
        </member>
        <member name="P:ReactNative.Views.View.ReactViewManager.Name">
            <summary>
            The name of this view manager. This will be the name used to 
            reference this view manager from JavaScript.
            </summary>
        </member>
        <member name="M:ReactNative.Views.View.ReactViewManager.HasBorder(ReactNative.UIManager.BorderedCanvas)">
            <summary>
            Checks if the Canvas has a Border already.
            </summary>
        </member>
        <member name="M:ReactNative.Views.View.ReactViewManager.GetOrCreateBorder(ReactNative.UIManager.BorderedCanvas)">
            <summary>
            Adds a Border to a Canvas if it hasn't been added already.
            </summary>
        </member>
        <member name="M:ReactNative.Views.View.ReactViewManager.CreateViewInstance(ReactNative.UIManager.ThemedReactContext)">
            <summary>
            Creates a new view instance of type <see cref="T:Windows.UI.Xaml.Controls.Canvas"/>.
            </summary>
            <param name="reactContext">The React context.</param>
            <returns>The view instance.</returns>
        </member>
        <member name="M:ReactNative.Views.View.ReactViewManager.SetAccessible(ReactNative.UIManager.BorderedCanvas,System.Boolean)">
            <summary>
            Sets whether or not the view is an accessibility element.
            </summary>
            <param name="view">The view.</param>
            <param name="accessible">A flag indicating whether or not the view is an accessibility element.</param>
        </member>
        <member name="M:ReactNative.Views.View.ReactViewManager.SetPointerEvents(ReactNative.UIManager.BorderedCanvas,System.String)">
            <summary>
            Set the pointer events handling mode for the view.
            </summary>
            <param name="view">The view.</param>
            <param name="pointerEventsValue">The pointerEvents mode.</param>
        </member>
        <member name="M:ReactNative.Views.View.ReactViewManager.SetBorderRadius(ReactNative.UIManager.BorderedCanvas,System.Int32,System.Double)">
            <summary>
            Sets the border radius of the view.
            </summary>
            <param name="view">The view panel.</param>
            <param name="index">The property index.</param>
            <param name="radius">The border radius value.</param>
        </member>
        <member name="M:ReactNative.Views.View.ReactViewManager.SetBackgroundColor(ReactNative.UIManager.BorderedCanvas,System.UInt32)">
            <summary>
            Sets the background color of the view.
            </summary>
            <param name="view">The view panel.</param>
            <param name="color">The masked color value.</param>
        </member>
        <member name="M:ReactNative.Views.View.ReactViewManager.SetBorderColor(ReactNative.UIManager.BorderedCanvas,System.Nullable{System.UInt32})">
            <summary>
            Set the border color of the view.
            </summary>
            <param name="view">The view panel.</param>
            <param name="color">The color hex code.</param>
        </member>
        <member name="M:ReactNative.Views.View.ReactViewManager.SetBorderWidth(ReactNative.UIManager.BorderedCanvas,System.Int32,System.Double)">
            <summary>
            Sets the border thickness of the view.
            </summary>
            <param name="view">The view panel.</param>
            <param name="index">The property index.</param>
            <param name="width">The border width in pixels.</param>
        </member>
        <member name="M:ReactNative.Views.View.ReactViewManager.SetCollapsible(ReactNative.UIManager.BorderedCanvas,System.Boolean)">
            <summary>
            Sets whether the view is collapsible.
            </summary>
            <param name="view">The view instance.</param>
            <param name="collapsible">The flag.</param>
        </member>
        <member name="M:ReactNative.Views.View.ReactViewManager.AddView(ReactNative.UIManager.BorderedCanvas,Windows.UI.Xaml.DependencyObject,System.Int32)">
            <summary>
            Adds a child at the given index.
            </summary>
            <param name="parent">The parent view.</param>
            <param name="child">The child view.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:ReactNative.Views.View.ReactViewManager.GetChildAt(ReactNative.UIManager.BorderedCanvas,System.Int32)">
            <summary>
            Gets the child at the given index.
            </summary>
            <param name="parent">The parent view.</param>
            <param name="index">The index.</param>
            <returns>The child view.</returns>
        </member>
        <member name="M:ReactNative.Views.View.ReactViewManager.GetChildCount(ReactNative.UIManager.BorderedCanvas)">
            <summary>
            Gets the number of children in the view parent.
            </summary>
            <param name="parent">The view parent.</param>
            <returns>The number of children.</returns>
        </member>
        <member name="M:ReactNative.Views.View.ReactViewManager.RemoveAllChildren(ReactNative.UIManager.BorderedCanvas)">
            <summary>
            Removes all children from the view parent.
            </summary>
            <param name="parent">The view parent.</param>
        </member>
        <member name="M:ReactNative.Views.View.ReactViewManager.RemoveChildAt(ReactNative.UIManager.BorderedCanvas,System.Int32)">
            <summary>
            Removes the child at the given index.
            </summary>
            <param name="parent">The view parent.</param>
            <param name="index">The index.</param>
        </member>
        <member name="T:ReactNative.Animated.NativeAnimatedModule">
            <summary>
            Module that exposes interface for creating and managing animated nodes 
            on the "native" side.
            </summary>
            <remarks>
            Animated.js library is based on a concept of a graph where nodes are 
            values or transform operations (such as interpolation, addition, etc.)
            and connection are used to describe how change of the value in one node
            can affect other nodes.
            
            Few examples of the nodes that can be created on the JS side:
             - Animated.Value is a simplest type of node with a numeric value which
               can be driven by an animation engine (spring, decay, etc) or by 
               calling setValue on it directly from JS
             - Animated.add is a type of node that may have two or more input nodes.
               It outputs the sum of all the input node values
             - interpolate - is actually a method you can call on any node and it 
               creates a new node that takes the parent node as an input and 
               outputs its interpolated value (e.g. if you have value that can
               animate from 0 to 1 you can create interpolated node and set output
               range to be 0 to 100 and when the input node changes the output of
               interpolated node will multiply the values by 100)
            
            You can mix and chain nodes however you like and this way create nodes
            graph with connections between them.
            
            To map animated node values to view properties there is a special type
            of a node: AnimatedProps. It is created by AnimatedImplementation 
            whenever you render Animated.View and stores a mapping from the view
            properties to the corresponding animated values (so it's actually also
            a node with connections to the value nodes).
            
            Last "special" elements of the the graph are "animation drivers". Those
            are objects (represented as a graph nodes too) that based on some
            criteria updates attached values every frame (we have few types of
            those, e.g., spring, timing, decay). Animation objects can be "started"
            and "stopped". Those are like "pulse generators" for the rest of the 
            nodes graph. Those pulses then propagate along the graph to the
            children nodes up to the special node type: AnimatedProps which then 
            can be used to calculate property update map for a view.
            
            This class acts as a proxy between the "native" API that can be called
            from JS and the main class that coordinates all the action: 
            <see cref="T:ReactNative.Animated.NativeAnimatedNodesManager"/>. Since all the methods from
            <see cref="T:ReactNative.Animated.NativeAnimatedNodesManager"/> need to be called from the UI
            thread, we create a queue of animated graph operations that is then
            enqueued to be executed on the UI Thread at the end of the batch of 
            JS->native calls (similarily to how it's handled in 
            <see cref="T:ReactNative.UIManager.UIManagerModule"/>). This isolates us from the problems that
            may be caused by concurrent updates of animated graph while UI thread 
            is "executing" the animation loop.
            </remarks>
        </member>
        <member name="M:ReactNative.Animated.NativeAnimatedModule.#ctor(ReactNative.Bridge.ReactContext)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Animated.NativeAnimatedModule"/>. 
            </summary>
            <param name="reactContext">The React context.</param>
        </member>
        <member name="P:ReactNative.Animated.NativeAnimatedModule.Name">
            <summary>
            The name of the module.
            </summary>
        </member>
        <member name="M:ReactNative.Animated.NativeAnimatedModule.Initialize">
            <summary>
            Called after the creation of a <see cref="T:ReactNative.Bridge.IReactInstance"/>, in
            order to initialize native modules that require the React or
            JavaScript modules.
            </summary>
        </member>
        <member name="M:ReactNative.Animated.NativeAnimatedModule.OnBatchComplete">
            <summary>
            Invoked when a batch of JavaScript to native calls has finished.
            </summary>
        </member>
        <member name="M:ReactNative.Animated.NativeAnimatedModule.OnDestroy">
            <summary>
            Called when the host is shutting down.
            </summary>
        </member>
        <member name="M:ReactNative.Animated.NativeAnimatedModule.OnResume">
            <summary>
            Called when the host receives the resume event.
            </summary>
        </member>
        <member name="M:ReactNative.Animated.NativeAnimatedModule.OnSuspend">
            <summary>
            Called when the host receives the suspend event.
            </summary>
        </member>
        <member name="M:ReactNative.Animated.NativeAnimatedModule.createAnimatedNode(System.Int32,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Creates an animated node.
            </summary>
            <param name="tag">Tag of the animated node.</param>
            <param name="config">Animation configuration.</param>
        </member>
        <member name="M:ReactNative.Animated.NativeAnimatedModule.startListeningToAnimatedNodeValue(System.Int32)">
            <summary>
            Creates listener for animated values on the given node.
            </summary>
            <param name="tag">Tag of the animated node.</param>
        </member>
        <member name="M:ReactNative.Animated.NativeAnimatedModule.stopListeningToAnimatedNodeValue(System.Int32)">
            <summary>
            Removes listener for animated values on the given node.
            </summary>
            <param name="tag">Tag of the animated node.</param>
        </member>
        <member name="M:ReactNative.Animated.NativeAnimatedModule.dropAnimatedNode(System.Int32)">
            <summary>
            Drops animated node with the given tag.
            </summary>
            <param name="tag">Tag of the animated node.</param>
        </member>
        <member name="M:ReactNative.Animated.NativeAnimatedModule.setAnimatedNodeValue(System.Int32,System.Double)">
            <summary>
            Sets the value of the animated node.
            </summary>
            <param name="tag">Tag of the animated node.</param>
            <param name="value">Animated node value.</param>
        </member>
        <member name="M:ReactNative.Animated.NativeAnimatedModule.setAnimatedNodeOffset(System.Int32,System.Double)">
            <summary>
            Sets the offset of the animated node.
            </summary>
            <param name="tag">Tag of the animated node.</param>
            <param name="value">Animated node offset.</param>
        </member>
        <member name="M:ReactNative.Animated.NativeAnimatedModule.flattenAnimatedNodeOffset(System.Int32)">
            <summary>
            Flattens the animated node offset.
            </summary>
            <param name="tag">Tag of the animated node.</param>
        </member>
        <member name="M:ReactNative.Animated.NativeAnimatedModule.extractAnimatedNodeOffset(System.Int32)">
            <summary>
            Extracts the animated node offset.
            </summary>
            <param name="tag">Tag of the animated node.</param>
        </member>
        <member name="M:ReactNative.Animated.NativeAnimatedModule.startAnimatingNode(System.Int32,System.Int32,Newtonsoft.Json.Linq.JObject,ReactNative.Bridge.ICallback)">
            <summary>
            Starts an animation on the given node with the given identifier.
            </summary>
            <param name="animationId">Anmation identifier.</param>
            <param name="animatedNodeTag">Animated node tag.</param>
            <param name="animationConfig">Animation configuration.</param>
            <param name="endCallback">Callback for animation completion.</param>
        </member>
        <member name="M:ReactNative.Animated.NativeAnimatedModule.stopAnimation(System.Int32)">
            <summary>
            Stops the animation with the given identifier.
            </summary>
            <param name="animationId">Animation identifier.</param>
        </member>
        <member name="M:ReactNative.Animated.NativeAnimatedModule.connectAnimatedNodes(System.Int32,System.Int32)">
            <summary>
            Connects animated nodes.
            </summary>
            <param name="parentNodeTag">Parent animated node tag.</param>
            <param name="childNodeTag">Child animated node tag.</param>
        </member>
        <member name="M:ReactNative.Animated.NativeAnimatedModule.disconnectAnimatedNodes(System.Int32,System.Int32)">
            <summary>
            Disconnects animated nodes.
            </summary>
            <param name="parentNodeTag">Parent animated node tag.</param>
            <param name="childNodeTag">Child animated node tag.</param>
        </member>
        <member name="M:ReactNative.Animated.NativeAnimatedModule.connectAnimatedNodeToView(System.Int32,System.Int32)">
            <summary>
            Connects animated node to view.
            </summary>
            <param name="animatedNodeTag">Animated node tag.</param>
            <param name="viewTag">React view tag.</param>
        </member>
        <member name="M:ReactNative.Animated.NativeAnimatedModule.disconnectAnimatedNodeFromView(System.Int32,System.Int32)">
            <summary>
            Disconnects animated node from view.
            </summary>
            <param name="animatedNodeTag">Animated node tag.</param>
            <param name="viewTag">React view tag.s</param>
        </member>
        <member name="M:ReactNative.Animated.NativeAnimatedModule.addAnimatedEventToView(System.Int32,System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Adds an animated event to view.
            </summary>
            <param name="viewTag">The view tag.</param>
            <param name="eventName">The event name.</param>
            <param name="eventMapping">The event mapping.</param>
        </member>
        <member name="M:ReactNative.Animated.NativeAnimatedModule.removeAnimatedEventFromView(System.Int32,System.String,System.Int32)">
            <summary>
            Removes an animated event from view.
            </summary>
            <param name="viewTag">The view tag.</param>
            <param name="eventName">The event name.</param>
            <param name="animatedValueTag">The value tag.</param>
        </member>
        <member name="T:ReactNative.Animated.NativeAnimatedNodesManager">
            <summary>
            This is the main class that coordinates how native animated JS
            implementation drives UI changes.
            
            It implements a management interface for animated nodes graph as well
            as implements a graph traversal algorithm that is run for each
            animation frame.
            
            For each animation frame we visit animated nodes that might've been 
            updated as well as their children that may use parent's values to
            update themselves. At the end of the traversal algorithm we expect to
            reach a special type of the node: PropsAnimatedNode that is then 
            responsible for calculating property map which can be sent to native
            view hierarchy to update the view.
            </summary>
            <remarks>
            This class should be accessed only from the dispatcher thread.
            </remarks>
        </member>
        <member name="M:ReactNative.Animated.NativeAnimatedNodesManager.RunUpdates(System.TimeSpan)">
            <summary>
            Animation loop performs BFS over the graph of animated nodes.
            </summary>
            <remarks>
            We use incremented <see cref="F:ReactNative.Animated.NativeAnimatedNodesManager._animatedGraphBFSColor"/> to mark
            nodes as visited in each of the BFS passes, which saves additional
            loops for clearing "visited" states.
            
            First BFS starts with nodes that are in <see cref="F:ReactNative.Animated.NativeAnimatedNodesManager._updatedNodes" />
            (this is, their value has been modified from JS in the last batch
            of JS operations) or directly attached to an active animation
            (thus linked to objects from <see cref="F:ReactNative.Animated.NativeAnimatedNodesManager._activeAnimations"/>). In
            that step we calculate an attribute <see cref="P:ReactNative.Animated.AnimatedNode.ActiveIncomingNodes"/>.
            The second BFS runs in topological order over the sub-graph of
            *active* nodes. This is done by adding nodes to the BFS queue only
            if all its "predecessors" have already been visited.
            </remarks>
            <param name="renderingTime">Frame rendering time.</param>
        </member>
        <member name="F:ReactNative.Animated.SpringAnimationDriver.MaxDeltaTimeSec">
            <summary>
            Maximum amount of time to simulate per physics iteration in seconds (4 frames at 60 FPS).
            </summary>
        </member>
        <member name="F:ReactNative.Animated.SpringAnimationDriver.SolverTimestepSec">
            <summary>
            Fixed timestep to use in the physics solver in seconds.
            </summary>
        </member>
        <member name="M:ReactNative.Animated.SpringAnimationDriver.GetDisplacementDistanceForState(ReactNative.Animated.SpringAnimationDriver.PhysicsState)">
            <summary>
            Gets the displacement from rest for a given physics state.
            </summary>
            <param name="state">The state to measure from.</param>
            <returns>The distance displaced by.</returns>
        </member>
        <member name="M:ReactNative.Animated.SpringAnimationDriver.IsAtRest">
            <summary>
            Check if current state is at rest.
            </summary>
            <returns>
            <code>true</code> if the spring is at rest, otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:ReactNative.Animated.SpringAnimationDriver.IsOvershooting">
            <summary>
            Check if the spring is overshooting beyond its target.
            </summary>
            <returns>
            <code>true</code> if the spring is overshooting its target,
            otherwise <code>false</code>.
            </returns>
        </member>
        <member name="M:ReactNative.Animated.SpringAnimationDriver.Interpolate(System.Double)">
            <summary>
            Linear interpolation between the previous and current physics state
            based on the amount of timestep remaining after processing the
            rendering delta time in timestep sized chunks.
            </summary>
            <param name="alpha">
            Value from 0 to 1, where 0 is the previous state, 1 is the current state.
            </param>
        </member>
        <member name="M:ReactNative.Animated.SpringAnimationDriver.Advance(System.Double)">
            <summary>
            Advance the physics simulation in <see cref="F:ReactNative.Animated.SpringAnimationDriver.SolverTimestepSec"/>
            sized chunks to fulfill the required <paramref name="realDeltaTime"/>.
            </summary>
            <param name="realDeltaTime">Clock drift.</param>
        </member>
        <member name="T:ReactNative.ReactDelegateFactoryBase">
            <summary>
            Base implementation for <see cref="T:ReactNative.Bridge.IReactDelegateFactory"/>.
            </summary>
        </member>
        <member name="F:ReactNative.ReactDelegateFactoryBase.AsyncMethodType">
            <summary>
            Discriminator for asynchronous methods.
            </summary>
        </member>
        <member name="F:ReactNative.ReactDelegateFactoryBase.SyncMethodType">
            <summary>
            Discriminator for synchronous methods.
            </summary>
        </member>
        <member name="F:ReactNative.ReactDelegateFactoryBase.PromiseMethodType">
            <summary>
            Discriminator for methods with promises.
            </summary>
        </member>
        <member name="M:ReactNative.ReactDelegateFactoryBase.#ctor">
            <summary>
            Instantiates a <see cref="T:ReactNative.ReactDelegateFactoryBase"/>.
            </summary>
        </member>
        <member name="M:ReactNative.ReactDelegateFactoryBase.Create(ReactNative.Bridge.INativeModule,System.Reflection.MethodInfo)">
            <summary>
            Create an invocation delegate from the given method.
            </summary>
            <param name="nativeModule">The native module instance.</param>
            <param name="method">The method.</param>
            <returns>The invocation delegate.</returns>
        </member>
        <member name="M:ReactNative.ReactDelegateFactoryBase.GetMethodType(System.Reflection.MethodInfo)">
            <summary>
            Extracts the native method type from the method.
            </summary>
            <param name="method">The method.</param>
            <returns>The native method type.</returns>
        </member>
        <member name="M:ReactNative.ReactDelegateFactoryBase.Validate(System.Reflection.MethodInfo)">
            <summary>
            Check that the method is valid for <see cref="T:ReactNative.Bridge.ReactMethodAttribute"/>.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:ReactNative.ReactDelegateFactoryBase.CreateCallback(Newtonsoft.Json.Linq.JToken,ReactNative.Bridge.IReactInstance)">
            <summary>
            Create a callback.
            </summary>
            <param name="callbackToken">The callback ID token.</param>
            <param name="reactInstance">The React instance.</param>
            <returns>The callback.</returns>
        </member>
        <member name="M:ReactNative.ReactDelegateFactoryBase.CreatePromise(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken,ReactNative.Bridge.IReactInstance)">
            <summary>
            Create a promise.
            </summary>
            <param name="resolveToken">The resolve callback ID token.</param>
            <param name="rejectToken">The reject callback ID token.</param>
            <param name="reactInstance">The React instance.</param>
            <returns>The promise.</returns>
        </member>
        <member name="T:ReactNative.Collections.HeapBasedPriorityQueue`1">
            <summary>
            Heap based priority queue. For precise algorithm please see wikipedia.
            Not thread safe.
            </summary>
            <typeparam name="T">Element type</typeparam>
        </member>
        <member name="F:ReactNative.Collections.HeapBasedPriorityQueue`1._count">
            <summary>
            Count for introducing priority of equal elements.
            </summary>
        </member>
        <member name="F:ReactNative.Collections.HeapBasedPriorityQueue`1._items">
            <summary>
            Array of indexed items.
            </summary>
        </member>
        <member name="F:ReactNative.Collections.HeapBasedPriorityQueue`1._size">
            <summary>
            The current size of the queue.
            </summary>
        </member>
        <member name="F:ReactNative.Collections.HeapBasedPriorityQueue`1._comparer">
            <summary>
            The comparer.
            </summary>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ReactNative.Collections.HeapBasedPriorityQueue`1"/> class.
            </summary>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ReactNative.Collections.HeapBasedPriorityQueue`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="comparer">Compared used to compare elements in the queue.</param>
        </member>
        <member name="P:ReactNative.Collections.HeapBasedPriorityQueue`1.Count">
            <summary>
            Gets the count of the queue.
            </summary>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.Peek">
            <summary>
            Peeks the element from the queue.
            </summary>
            <returns>New element.</returns>
            <exception cref="T:System.InvalidOperationException">If the method is called on an empty queue.</exception>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.Dequeue">
            <summary>
            De-queues the element with the highest priority.
            </summary>
            <returns>Highest priority element.</returns>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.Enqueue(`0)">
            <summary>
            Enqueues the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>True if the item has been deleted. False if it does not exists.</returns>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.Contains(`0)">
            <summary>
            Determines whether the queue [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.IsHigherPriority(System.Int32,System.Int32)">
            <summary>
            Determines whether [is higher priority] [the specified left].
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
              <c>true</c> if [is higher priority] [the specified left]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.Percolate(System.Int32)">
            <summary>
            Percolates the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The final index of the original element</returns>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.Heapify(System.Int32)">
            <summary>
            Heapifies the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.RemoveAt(System.Int32)">
            <summary>
            Removes element at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="T:ReactNative.Collections.HeapBasedPriorityQueue`1.IndexedItem">
            <summary>
            Indexed item.
            </summary>
        </member>
        <member name="P:ReactNative.Collections.HeapBasedPriorityQueue`1.IndexedItem.Value">
            <summary>
            Gets or sets the real user value.
            </summary>
        </member>
        <member name="P:ReactNative.Collections.HeapBasedPriorityQueue`1.IndexedItem.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:ReactNative.Collections.HeapBasedPriorityQueue`1.IndexedItem.Comparer">
            <summary>
            Gets or sets the comparer.
            </summary>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.IndexedItem.CompareTo(ReactNative.Collections.HeapBasedPriorityQueue{`0}.IndexedItem)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This object is equal to <paramref name="other" />. Greater than zero This object is greater than <paramref name="other" />.
            </returns>
        </member>
        <member name="T:ReactNative.Common.LifecycleState">
            <summary>
            An enumeration to signify the current lifecycle state for a 
            <see cref="T:ReactNative.ReactInstanceManager"/>.
            </summary>
        </member>
        <member name="F:ReactNative.Common.LifecycleState.BeforeCreate">
            <summary>
            Lifecycle state before an application is initially created.
            </summary>
        </member>
        <member name="F:ReactNative.Common.LifecycleState.BeforeResume">
            <summary>
            Lifecycle state before an application is resumed.
            </summary>
        </member>
        <member name="F:ReactNative.Common.LifecycleState.Resumed">
            <summary>
            Lifecycle state of a resumed application.
            </summary>
        </member>
        <member name="T:ReactNative.Common.ReactConstants">
            <summary>
            Set of constants used.
            </summary>
        </member>
        <member name="F:ReactNative.Common.ReactConstants.Tag">
            <summary>
            Trace tag for React components.
            </summary>
        </member>
        <member name="T:ReactNative.CoreModulesPackage">
            <summary>
            Package defining core framework modules (e.g., <see cref="T:ReactNative.UIManager.UIManagerModule"/>). 
            It should be used for modules that require special integration with
            other framework parts (e.g., with the list of packages to load view
            managers from).
            </summary>
        </member>
        <member name="T:ReactNative.Pooling.ObjectPool`1">
            <summary>
            Simple object pool.
            </summary>
            <typeparam name="T">Type of objects being pooled.</typeparam>
            <remarks>
            This object pool is not thread-safe. Please use for single-threaded access only.
            </remarks>
        </member>
        <member name="M:ReactNative.Pooling.ObjectPool`1.#ctor(System.Func{`0},System.Int32)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Pooling.ObjectPool`1"/>.
            </summary>
            <param name="factory">The instance factory.</param>
            <param name="size">The maximum size.</param>
        </member>
        <member name="M:ReactNative.Pooling.ObjectPool`1.Allocate">
            <summary>
            Get a new instance from the pool. Create one using the factory if not available.
            </summary>
            <returns>The instance.</returns>
        </member>
        <member name="M:ReactNative.Pooling.ObjectPool`1.Free(`0)">
            <summary>
            Return an instance to the pool. No-op if pool is full.
            </summary>
            <param name="obj">The instance to return to the pool.</param>
        </member>
        <member name="T:ReactNative.ReactContextInitializedEventArgs">
            <summary>
            Event arguments for the <see cref="E:ReactNative.ReactInstanceManager.ReactContextInitialized"/>
            event.
            </summary>
        </member>
        <member name="M:ReactNative.ReactContextInitializedEventArgs.#ctor(ReactNative.Bridge.ReactContext)">
            <summary>
            Instantiates the <see cref="T:ReactNative.ReactContextInitializedEventArgs"/>.
            </summary>
            <param name="context">The React context.</param>
        </member>
        <member name="P:ReactNative.ReactContextInitializedEventArgs.Context">
            <summary>
            The React context.
            </summary>
        </member>
        <member name="T:ReactNative.ReactInstanceManager">
             <summary>
             This interface manages instances of <see cref="T:ReactNative.Bridge.IReactInstance" />.
             It exposes a way to configure React instances using
             <see cref="T:ReactNative.Modules.Core.IReactPackage"/> and keeps track of the lifecycle of that
             instance. It also sets up a connection between the instance and the
             developer support functionality of the framework.
            
             An instance of this manager is required to start the JavaScript
             application in <see cref="T:ReactNative.ReactRootView"/>
             (<see cref="M:ReactNative.ReactRootView.StartReactApplication(ReactNative.ReactInstanceManager,System.String)"/>).
            
             The lifecycle of the instance of <see cref="T:ReactNative.ReactInstanceManager"/>
             should be bound to the application that owns the
             <see cref="T:ReactNative.ReactRootView"/> that is used to render the React
             application using this instance manager. It is required to pass
             lifecycle events to the instance manager (i.e., <see cref="M:ReactNative.ReactInstanceManager.OnSuspend"/>,
             <see cref="M:ReactNative.Bridge.IAsyncDisposable.DisposeAsync"/>, and <see cref="M:ReactNative.ReactInstanceManager.OnResume(System.Action)"/>).
             </summary>
        </member>
        <member name="E:ReactNative.ReactInstanceManager.ReactContextInitialized">
            <summary>
            Event triggered when a React context has been initialized.
            </summary>
        </member>
        <member name="P:ReactNative.ReactInstanceManager.DevSupportManager">
            <summary>
            The developer support manager for the instance.
            </summary>
        </member>
        <member name="P:ReactNative.ReactInstanceManager.HasStartedCreatingInitialContext">
            <summary>
            Signals whether <see cref="M:ReactNative.ReactInstanceManager.CreateReactContextInBackground"/> has
            been called. Will return <code>false</code> after 
            <see cref="M:ReactNative.Bridge.IAsyncDisposable.DisposeAsync"/>  until a new initial
            context has been created.
            </summary>
        </member>
        <member name="P:ReactNative.ReactInstanceManager.SourceUrl">
            <summary>
            The URL where the last bundle was loaded from.
            </summary>
        </member>
        <member name="P:ReactNative.ReactInstanceManager.CurrentReactContext">
            <summary>
            Gets the current React context instance.
            </summary>
        </member>
        <member name="M:ReactNative.ReactInstanceManager.CreateReactContextInBackground">
            <summary>
            Trigger the React context initialization asynchronously in a
            background task. This enables applications to pre-load the
            application JavaScript, and execute global core code before the
            <see cref="T:ReactNative.ReactRootView"/> is available and measure. This should
            only be called the first time the application is set up, which is
            enforced to keep developers from accidentally creating their
            applications multiple times.
            </summary>
        </member>
        <member name="M:ReactNative.ReactInstanceManager.CreateReactContextInBackgroundAsync">
            <summary>
            Trigger the React context initialization asynchronously in a
            background task. This enables applications to pre-load the
            application JavaScript, and execute global core code before the
            <see cref="T:ReactNative.ReactRootView"/> is available and measure. This should
            only be called the first time the application is set up, which is
            enforced to keep developers from accidentally creating their
            applications multiple times.
            </summary>
            <returns>A task to await the result.</returns>
        </member>
        <member name="M:ReactNative.ReactInstanceManager.RecreateReactContextInBackground">
            <summary>
            Recreate the React application and context. This should be called
            if configuration has changed or the developer has requested the
            application to be reloaded.
            </summary>
        </member>
        <member name="M:ReactNative.ReactInstanceManager.RecreateReactContextInBackgroundAsync">
            <summary>
            Recreate the React application and context. This should be called
            if configuration has changed or the developer has requested the
            application to be reloaded.
            </summary>
            <returns>A task to await the result.</returns>
        </member>
        <member name="M:ReactNative.ReactInstanceManager.OnBackPressed">
            <summary>
            Method that gives JavaScript the opportunity to consume the back
            button event. If JavaScript does not consume the event, the
            default back press action will be invoked at the end of the
            roundtrip to JavaScript.
            </summary>
        </member>
        <member name="M:ReactNative.ReactInstanceManager.OnSuspend">
            <summary>
            Called when the application is suspended.
            </summary>
        </member>
        <member name="M:ReactNative.ReactInstanceManager.OnResume(System.Action)">
            <summary>
            Used when the application resumes to reset the back button handling
            in JavaScript.
            </summary>
            <param name="onBackPressed">
            The action to take when back is pressed.
            </param>
        </member>
        <member name="M:ReactNative.ReactInstanceManager.DisposeAsync">
            <summary>
            Destroy the <see cref="T:ReactNative.ReactInstanceManager"/>.
            </summary>
        </member>
        <member name="M:ReactNative.ReactInstanceManager.AttachMeasuredRootView(ReactNative.ReactRootView)">
            <summary>
            Attach given <paramref name="rootView"/> to a React instance
            manager and start the JavaScript application using the JavaScript
            module provided by the <see cref="P:ReactNative.ReactRootView.JavaScriptModuleName"/>. If
            the React context is currently being (re-)created, or if the react
            context has not been created yet, the JavaScript application
            associated with the provided root view will be started
            asynchronously. This view will then be tracked by this manager and
            in case of React instance restart, it will be re-attached.
            </summary>
            <param name="rootView">The root view.</param>
        </member>
        <member name="M:ReactNative.ReactInstanceManager.DetachRootView(ReactNative.ReactRootView)">
            <summary>
            Detach given <paramref name="rootView"/> from the current react
            instance. This method is idempotent and can be called multiple
            times on the same <see cref="T:ReactNative.ReactRootView"/> instance.
            </summary>
            <param name="rootView">The root view.</param>
        </member>
        <member name="M:ReactNative.ReactInstanceManager.CreateAllViewManagers(ReactNative.Bridge.ReactContext)">
            <summary>
            Uses the configured <see cref="T:ReactNative.Modules.Core.IReactPackage"/> instances to create
            all <see cref="T:ReactNative.UIManager.IViewManager"/> instances.
            </summary>
            <param name="reactContext">
            The application context.
            </param>
            <returns>The list of view managers.</returns>
        </member>
        <member name="T:ReactNative.ReactInstanceManagerBuilder">
            <summary>
            Builder for <see cref="T:ReactNative.ReactInstanceManager"/>. 
            </summary>
        </member>
        <member name="P:ReactNative.ReactInstanceManagerBuilder.UIImplementationProvider">
            <summary>
            Sets a provider of <see cref="T:ReactNative.UIManager.UIImplementation"/>.
            </summary>
            <remarks>
            Uses default provider if null is passed.
            </remarks>
        </member>
        <member name="P:ReactNative.ReactInstanceManagerBuilder.JavaScriptBundleFile">
            <summary>
            Path to the JavaScript bundle file to be loaded from the file system.
            </summary>
        </member>
        <member name="P:ReactNative.ReactInstanceManagerBuilder.JavaScriptMainModuleName">
            <summary>
            Path to your app's main module on the packager server. This is used
            when loading JavaScript during development. All paths are
            relative to the root folder the packager is service files from.
            </summary>
            <remarks>
            Examples:
            <code>"index.windows"</code>
            <code>"subdirectory/index.windows"</code>
            </remarks>
        </member>
        <member name="P:ReactNative.ReactInstanceManagerBuilder.Packages">
            <summary>
            The <see cref="T:ReactNative.Modules.Core.IReactPackage"/> instances to load modules and view
            managers from.
            </summary>
        </member>
        <member name="P:ReactNative.ReactInstanceManagerBuilder.UseDeveloperSupport">
            <summary>
            When <code>true</code>, developer options such as JavaScript
            reloading and debugging are enabled.
            </summary>
        </member>
        <member name="P:ReactNative.ReactInstanceManagerBuilder.InitialLifecycleState">
            <summary>
            Sets the initial lifecycle state of the host.
            </summary>
        </member>
        <member name="P:ReactNative.ReactInstanceManagerBuilder.NativeModuleCallExceptionHandler">
            <summary>
            Set the exception handler for all native module calls. If not set,
            the default behavior shows a redbox in dev mode, or rethrows
            (crashing the app) in release mode.
            </summary>
        </member>
        <member name="P:ReactNative.ReactInstanceManagerBuilder.JavaScriptExecutorFactory">
            <summary>
            Sets the JavaScript executor factory.
            </summary>
        </member>
        <member name="M:ReactNative.ReactInstanceManagerBuilder.Build">
            <summary>
            Instantiates a new <see cref="T:ReactNative.ReactInstanceManager"/>. 
            </summary>
            <returns>The instance.</returns>
        </member>
        <member name="T:ReactNative.ReactRootView">
            <summary>
            Default root view for applicaitons. Provides the ability to listen for
            size changes so that the UI manager can re-layout its elements.
            
            It is also responsible for handling touch events passed to any of it's
            child views and sending those events to JavaScript via the
            <see cref="T:ReactNative.UIManager.Events.RCTEventEmitter"/> module.
            </summary>
        </member>
        <member name="P:ReactNative.ReactRootView.JavaScriptModuleName">
            <summary>
            Gets the JavaScript module name.
            </summary>
        </member>
        <member name="P:ReactNative.ReactRootView.TouchHandler">
            <summary>
            The touch handler for the root view.
            </summary>
        </member>
        <member name="P:ReactNative.ReactRootView.InitialProps">
            <summary>
            Get the initialProps
            </summary>
        </member>
        <member name="M:ReactNative.ReactRootView.StartReactApplication(ReactNative.ReactInstanceManager,System.String)">
            <summary>
            Schedule rendering of the React component rendered by the 
            JavaScript application from the given JavaScript module 
            <paramref name="moduleName"/> using the provided
            <paramref name="reactInstanceManager"/> to attach to the JavaScript
            context of that manager.
            </summary>
            <param name="reactInstanceManager">
            The React instance manager.
            </param>
            <param name="moduleName">The module name.</param>
        </member>
        <member name="M:ReactNative.ReactRootView.StartReactApplication(ReactNative.ReactInstanceManager,System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Schedule rendering of the React component rendered by the 
            JavaScript application from the given JavaScript module 
            <paramref name="moduleName"/> using the provided
            <paramref name="reactInstanceManager"/> to attach to the JavaScript context of that manager.
            Extra parameter
            <paramref name="initialProps"/> can be used to pass initial properties for the react component.
            </summary>
            <param name="reactInstanceManager">
            The React instance manager.
            </param>
            <param name="moduleName">The module name.</param>
            <param name="initialProps">The initialProps</param>
        </member>
        <member name="M:ReactNative.ReactRootView.MeasureOverride(Windows.Foundation.Size)">
            <summary>
            Hooks into the measurement event to potentially attach the React 
            root view.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The desired size.</returns>
        </member>
        <member name="T:ReactNative.Reflection.ExpressionExtensions">
            <summary>
            Helper methods for expressions.
            </summary>
        </member>
        <member name="M:ReactNative.Reflection.ExpressionExtensions.Let``2(``0,System.Func{``0,``1})">
            <summary>
            Transforms an expression into a parameter that can be used in
            multiple places in a larger expression. Particularly useful for
            declaring parameters in a <see cref="T:System.Linq.Expressions.LambdaExpression"/>.
            </summary>
            <typeparam name="TExpression">Expression type.</typeparam>
            <typeparam name="T">Result type.</typeparam>
            <param name="expression">The expression.</param>
            <param name="selector">The result selector.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:ReactNative.Reflection.ReflectionHelpers">
            <summary>
            Helpers for <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
        </member>
        <member name="M:ReactNative.Reflection.ReflectionHelpers.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            Checks if a method is asynchronous.
            </summary>
            <param name="methodInfo">The method.</param>
            <returns>
            <b>true</b> if the method is asynchronous, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:ReactNative.Reflection.ReflectionHelpers.InfoOf(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/> at the root of the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The reflected member.</returns>
        </member>
        <member name="M:ReactNative.Reflection.ReflectionHelpers.InfoOf``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/> at the root of the expression.
            </summary>
            <typeparam name="T">Type of input.</typeparam>
            <param name="expression">The expression.</param>
            <returns>The reflected member.</returns>
        </member>
        <member name="M:ReactNative.Reflection.ReflectionHelpers.InfoOf``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/> at the root of the expression.
            </summary>
            <typeparam name="T">Type of result.</typeparam>
            <param name="expression">The expression.</param>
            <returns>The reflected member.</returns>
        </member>
        <member name="M:ReactNative.Reflection.ReflectionHelpers.InfoOf``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/> at the root of the expression.
            </summary>
            <typeparam name="TArgs">Type of input.</typeparam>
            <typeparam name="T">Type of result.</typeparam>
            <param name="expression">The expression.</param>
            <returns>The reflected member.</returns>
        </member>
        <member name="M:ReactNative.Reflection.ReflectionHelpers.InfoOf(System.Linq.Expressions.Expression)">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/> at the root of the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The reflected member.</returns>
        </member>
        <member name="M:ReactNative.ReactNative_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.Type)">
            <summary>
            GetXamlType(Type)
            </summary>
        </member>
        <member name="M:ReactNative.ReactNative_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.String)">
            <summary>
            GetXamlType(String)
            </summary>
        </member>
        <member name="M:ReactNative.ReactNative_XamlTypeInfo.XamlMetaDataProvider.GetXmlnsDefinitions">
            <summary>
            GetXmlnsDefinitions()
            </summary>
        </member>
    </members>
</doc>
